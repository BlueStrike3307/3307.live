// Code generated by ent, DO NOT EDIT.

package user

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/internal/utils"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.User {
	return predicate.User(sql.FieldLTE(FieldID, id))
}

// Sub applies equality check predicate on the "sub" field. It's identical to SubEQ.
func Sub(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSub, v))
}

// Username applies equality check predicate on the "username" field. It's identical to UsernameEQ.
func Username(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// Password applies equality check predicate on the "password" field. It's identical to PasswordEQ.
func Password(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// Oauth applies equality check predicate on the "oauth" field. It's identical to OauthEQ.
func Oauth(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOauth, v))
}

// Webhook applies equality check predicate on the "webhook" field. It's identical to WebhookEQ.
func Webhook(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWebhook, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// SubEQ applies the EQ predicate on the "sub" field.
func SubEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldSub, v))
}

// SubNEQ applies the NEQ predicate on the "sub" field.
func SubNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldSub, v))
}

// SubIn applies the In predicate on the "sub" field.
func SubIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldSub, vs...))
}

// SubNotIn applies the NotIn predicate on the "sub" field.
func SubNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldSub, vs...))
}

// SubGT applies the GT predicate on the "sub" field.
func SubGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldSub, v))
}

// SubGTE applies the GTE predicate on the "sub" field.
func SubGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldSub, v))
}

// SubLT applies the LT predicate on the "sub" field.
func SubLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldSub, v))
}

// SubLTE applies the LTE predicate on the "sub" field.
func SubLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldSub, v))
}

// SubContains applies the Contains predicate on the "sub" field.
func SubContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldSub, v))
}

// SubHasPrefix applies the HasPrefix predicate on the "sub" field.
func SubHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldSub, v))
}

// SubHasSuffix applies the HasSuffix predicate on the "sub" field.
func SubHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldSub, v))
}

// SubIsNil applies the IsNil predicate on the "sub" field.
func SubIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldSub))
}

// SubNotNil applies the NotNil predicate on the "sub" field.
func SubNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldSub))
}

// SubEqualFold applies the EqualFold predicate on the "sub" field.
func SubEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldSub, v))
}

// SubContainsFold applies the ContainsFold predicate on the "sub" field.
func SubContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldSub, v))
}

// UsernameEQ applies the EQ predicate on the "username" field.
func UsernameEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUsername, v))
}

// UsernameNEQ applies the NEQ predicate on the "username" field.
func UsernameNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUsername, v))
}

// UsernameIn applies the In predicate on the "username" field.
func UsernameIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldUsername, vs...))
}

// UsernameNotIn applies the NotIn predicate on the "username" field.
func UsernameNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUsername, vs...))
}

// UsernameGT applies the GT predicate on the "username" field.
func UsernameGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldUsername, v))
}

// UsernameGTE applies the GTE predicate on the "username" field.
func UsernameGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUsername, v))
}

// UsernameLT applies the LT predicate on the "username" field.
func UsernameLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldUsername, v))
}

// UsernameLTE applies the LTE predicate on the "username" field.
func UsernameLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUsername, v))
}

// UsernameContains applies the Contains predicate on the "username" field.
func UsernameContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldUsername, v))
}

// UsernameHasPrefix applies the HasPrefix predicate on the "username" field.
func UsernameHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldUsername, v))
}

// UsernameHasSuffix applies the HasSuffix predicate on the "username" field.
func UsernameHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldUsername, v))
}

// UsernameEqualFold applies the EqualFold predicate on the "username" field.
func UsernameEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldUsername, v))
}

// UsernameContainsFold applies the ContainsFold predicate on the "username" field.
func UsernameContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldUsername, v))
}

// PasswordEQ applies the EQ predicate on the "password" field.
func PasswordEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldPassword, v))
}

// PasswordNEQ applies the NEQ predicate on the "password" field.
func PasswordNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldPassword, v))
}

// PasswordIn applies the In predicate on the "password" field.
func PasswordIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldPassword, vs...))
}

// PasswordNotIn applies the NotIn predicate on the "password" field.
func PasswordNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldPassword, vs...))
}

// PasswordGT applies the GT predicate on the "password" field.
func PasswordGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldPassword, v))
}

// PasswordGTE applies the GTE predicate on the "password" field.
func PasswordGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldPassword, v))
}

// PasswordLT applies the LT predicate on the "password" field.
func PasswordLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldPassword, v))
}

// PasswordLTE applies the LTE predicate on the "password" field.
func PasswordLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldPassword, v))
}

// PasswordContains applies the Contains predicate on the "password" field.
func PasswordContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldPassword, v))
}

// PasswordHasPrefix applies the HasPrefix predicate on the "password" field.
func PasswordHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldPassword, v))
}

// PasswordHasSuffix applies the HasSuffix predicate on the "password" field.
func PasswordHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldPassword, v))
}

// PasswordIsNil applies the IsNil predicate on the "password" field.
func PasswordIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldPassword))
}

// PasswordNotNil applies the NotNil predicate on the "password" field.
func PasswordNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldPassword))
}

// PasswordEqualFold applies the EqualFold predicate on the "password" field.
func PasswordEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldPassword, v))
}

// PasswordContainsFold applies the ContainsFold predicate on the "password" field.
func PasswordContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldPassword, v))
}

// OauthEQ applies the EQ predicate on the "oauth" field.
func OauthEQ(v bool) predicate.User {
	return predicate.User(sql.FieldEQ(FieldOauth, v))
}

// OauthNEQ applies the NEQ predicate on the "oauth" field.
func OauthNEQ(v bool) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldOauth, v))
}

// RoleEQ applies the EQ predicate on the "role" field.
func RoleEQ(v utils.Role) predicate.User {
	vc := v
	return predicate.User(sql.FieldEQ(FieldRole, vc))
}

// RoleNEQ applies the NEQ predicate on the "role" field.
func RoleNEQ(v utils.Role) predicate.User {
	vc := v
	return predicate.User(sql.FieldNEQ(FieldRole, vc))
}

// RoleIn applies the In predicate on the "role" field.
func RoleIn(vs ...utils.Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldIn(FieldRole, v...))
}

// RoleNotIn applies the NotIn predicate on the "role" field.
func RoleNotIn(vs ...utils.Role) predicate.User {
	v := make([]any, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.User(sql.FieldNotIn(FieldRole, v...))
}

// WebhookEQ applies the EQ predicate on the "webhook" field.
func WebhookEQ(v string) predicate.User {
	return predicate.User(sql.FieldEQ(FieldWebhook, v))
}

// WebhookNEQ applies the NEQ predicate on the "webhook" field.
func WebhookNEQ(v string) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldWebhook, v))
}

// WebhookIn applies the In predicate on the "webhook" field.
func WebhookIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldIn(FieldWebhook, vs...))
}

// WebhookNotIn applies the NotIn predicate on the "webhook" field.
func WebhookNotIn(vs ...string) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldWebhook, vs...))
}

// WebhookGT applies the GT predicate on the "webhook" field.
func WebhookGT(v string) predicate.User {
	return predicate.User(sql.FieldGT(FieldWebhook, v))
}

// WebhookGTE applies the GTE predicate on the "webhook" field.
func WebhookGTE(v string) predicate.User {
	return predicate.User(sql.FieldGTE(FieldWebhook, v))
}

// WebhookLT applies the LT predicate on the "webhook" field.
func WebhookLT(v string) predicate.User {
	return predicate.User(sql.FieldLT(FieldWebhook, v))
}

// WebhookLTE applies the LTE predicate on the "webhook" field.
func WebhookLTE(v string) predicate.User {
	return predicate.User(sql.FieldLTE(FieldWebhook, v))
}

// WebhookContains applies the Contains predicate on the "webhook" field.
func WebhookContains(v string) predicate.User {
	return predicate.User(sql.FieldContains(FieldWebhook, v))
}

// WebhookHasPrefix applies the HasPrefix predicate on the "webhook" field.
func WebhookHasPrefix(v string) predicate.User {
	return predicate.User(sql.FieldHasPrefix(FieldWebhook, v))
}

// WebhookHasSuffix applies the HasSuffix predicate on the "webhook" field.
func WebhookHasSuffix(v string) predicate.User {
	return predicate.User(sql.FieldHasSuffix(FieldWebhook, v))
}

// WebhookIsNil applies the IsNil predicate on the "webhook" field.
func WebhookIsNil() predicate.User {
	return predicate.User(sql.FieldIsNull(FieldWebhook))
}

// WebhookNotNil applies the NotNil predicate on the "webhook" field.
func WebhookNotNil() predicate.User {
	return predicate.User(sql.FieldNotNull(FieldWebhook))
}

// WebhookEqualFold applies the EqualFold predicate on the "webhook" field.
func WebhookEqualFold(v string) predicate.User {
	return predicate.User(sql.FieldEqualFold(FieldWebhook, v))
}

// WebhookContainsFold applies the ContainsFold predicate on the "webhook" field.
func WebhookContainsFold(v string) predicate.User {
	return predicate.User(sql.FieldContainsFold(FieldWebhook, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.User {
	return predicate.User(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.User {
	return predicate.User(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.User {
	return predicate.User(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.User {
	return predicate.User(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.User {
	return predicate.User(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.User) predicate.User {
	return predicate.User(func(s *sql.Selector) {
		p(s.Not())
	})
}
