// Code generated by entc, DO NOT EDIT.

package queue

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/internal/utils"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// LiveArchive applies equality check predicate on the "live_archive" field. It's identical to LiveArchiveEQ.
func LiveArchive(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveArchive), v))
	})
}

// OnHold applies equality check predicate on the "on_hold" field. It's identical to OnHoldEQ.
func OnHold(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnHold), v))
	})
}

// VideoProcessing applies equality check predicate on the "video_processing" field. It's identical to VideoProcessingEQ.
func VideoProcessing(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoProcessing), v))
	})
}

// ChatProcessing applies equality check predicate on the "chat_processing" field. It's identical to ChatProcessingEQ.
func ChatProcessing(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatProcessing), v))
	})
}

// Processing applies equality check predicate on the "processing" field. It's identical to ProcessingEQ.
func Processing(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessing), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// LiveArchiveEQ applies the EQ predicate on the "live_archive" field.
func LiveArchiveEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLiveArchive), v))
	})
}

// LiveArchiveNEQ applies the NEQ predicate on the "live_archive" field.
func LiveArchiveNEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLiveArchive), v))
	})
}

// OnHoldEQ applies the EQ predicate on the "on_hold" field.
func OnHoldEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldOnHold), v))
	})
}

// OnHoldNEQ applies the NEQ predicate on the "on_hold" field.
func OnHoldNEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldOnHold), v))
	})
}

// VideoProcessingEQ applies the EQ predicate on the "video_processing" field.
func VideoProcessingEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldVideoProcessing), v))
	})
}

// VideoProcessingNEQ applies the NEQ predicate on the "video_processing" field.
func VideoProcessingNEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldVideoProcessing), v))
	})
}

// ChatProcessingEQ applies the EQ predicate on the "chat_processing" field.
func ChatProcessingEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldChatProcessing), v))
	})
}

// ChatProcessingNEQ applies the NEQ predicate on the "chat_processing" field.
func ChatProcessingNEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldChatProcessing), v))
	})
}

// ProcessingEQ applies the EQ predicate on the "processing" field.
func ProcessingEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldProcessing), v))
	})
}

// ProcessingNEQ applies the NEQ predicate on the "processing" field.
func ProcessingNEQ(v bool) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldProcessing), v))
	})
}

// TaskVodCreateFolderEQ applies the EQ predicate on the "task_vod_create_folder" field.
func TaskVodCreateFolderEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskVodCreateFolder), vc))
	})
}

// TaskVodCreateFolderNEQ applies the NEQ predicate on the "task_vod_create_folder" field.
func TaskVodCreateFolderNEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskVodCreateFolder), vc))
	})
}

// TaskVodCreateFolderIn applies the In predicate on the "task_vod_create_folder" field.
func TaskVodCreateFolderIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskVodCreateFolder), v...))
	})
}

// TaskVodCreateFolderNotIn applies the NotIn predicate on the "task_vod_create_folder" field.
func TaskVodCreateFolderNotIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskVodCreateFolder), v...))
	})
}

// TaskVodCreateFolderIsNil applies the IsNil predicate on the "task_vod_create_folder" field.
func TaskVodCreateFolderIsNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskVodCreateFolder)))
	})
}

// TaskVodCreateFolderNotNil applies the NotNil predicate on the "task_vod_create_folder" field.
func TaskVodCreateFolderNotNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskVodCreateFolder)))
	})
}

// TaskVodDownloadThumbnailEQ applies the EQ predicate on the "task_vod_download_thumbnail" field.
func TaskVodDownloadThumbnailEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskVodDownloadThumbnail), vc))
	})
}

// TaskVodDownloadThumbnailNEQ applies the NEQ predicate on the "task_vod_download_thumbnail" field.
func TaskVodDownloadThumbnailNEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskVodDownloadThumbnail), vc))
	})
}

// TaskVodDownloadThumbnailIn applies the In predicate on the "task_vod_download_thumbnail" field.
func TaskVodDownloadThumbnailIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskVodDownloadThumbnail), v...))
	})
}

// TaskVodDownloadThumbnailNotIn applies the NotIn predicate on the "task_vod_download_thumbnail" field.
func TaskVodDownloadThumbnailNotIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskVodDownloadThumbnail), v...))
	})
}

// TaskVodDownloadThumbnailIsNil applies the IsNil predicate on the "task_vod_download_thumbnail" field.
func TaskVodDownloadThumbnailIsNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskVodDownloadThumbnail)))
	})
}

// TaskVodDownloadThumbnailNotNil applies the NotNil predicate on the "task_vod_download_thumbnail" field.
func TaskVodDownloadThumbnailNotNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskVodDownloadThumbnail)))
	})
}

// TaskVodSaveInfoEQ applies the EQ predicate on the "task_vod_save_info" field.
func TaskVodSaveInfoEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskVodSaveInfo), vc))
	})
}

// TaskVodSaveInfoNEQ applies the NEQ predicate on the "task_vod_save_info" field.
func TaskVodSaveInfoNEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskVodSaveInfo), vc))
	})
}

// TaskVodSaveInfoIn applies the In predicate on the "task_vod_save_info" field.
func TaskVodSaveInfoIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskVodSaveInfo), v...))
	})
}

// TaskVodSaveInfoNotIn applies the NotIn predicate on the "task_vod_save_info" field.
func TaskVodSaveInfoNotIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskVodSaveInfo), v...))
	})
}

// TaskVodSaveInfoIsNil applies the IsNil predicate on the "task_vod_save_info" field.
func TaskVodSaveInfoIsNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskVodSaveInfo)))
	})
}

// TaskVodSaveInfoNotNil applies the NotNil predicate on the "task_vod_save_info" field.
func TaskVodSaveInfoNotNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskVodSaveInfo)))
	})
}

// TaskVideoDownloadEQ applies the EQ predicate on the "task_video_download" field.
func TaskVideoDownloadEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskVideoDownload), vc))
	})
}

// TaskVideoDownloadNEQ applies the NEQ predicate on the "task_video_download" field.
func TaskVideoDownloadNEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskVideoDownload), vc))
	})
}

// TaskVideoDownloadIn applies the In predicate on the "task_video_download" field.
func TaskVideoDownloadIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskVideoDownload), v...))
	})
}

// TaskVideoDownloadNotIn applies the NotIn predicate on the "task_video_download" field.
func TaskVideoDownloadNotIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskVideoDownload), v...))
	})
}

// TaskVideoDownloadIsNil applies the IsNil predicate on the "task_video_download" field.
func TaskVideoDownloadIsNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskVideoDownload)))
	})
}

// TaskVideoDownloadNotNil applies the NotNil predicate on the "task_video_download" field.
func TaskVideoDownloadNotNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskVideoDownload)))
	})
}

// TaskVideoConvertEQ applies the EQ predicate on the "task_video_convert" field.
func TaskVideoConvertEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskVideoConvert), vc))
	})
}

// TaskVideoConvertNEQ applies the NEQ predicate on the "task_video_convert" field.
func TaskVideoConvertNEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskVideoConvert), vc))
	})
}

// TaskVideoConvertIn applies the In predicate on the "task_video_convert" field.
func TaskVideoConvertIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskVideoConvert), v...))
	})
}

// TaskVideoConvertNotIn applies the NotIn predicate on the "task_video_convert" field.
func TaskVideoConvertNotIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskVideoConvert), v...))
	})
}

// TaskVideoConvertIsNil applies the IsNil predicate on the "task_video_convert" field.
func TaskVideoConvertIsNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskVideoConvert)))
	})
}

// TaskVideoConvertNotNil applies the NotNil predicate on the "task_video_convert" field.
func TaskVideoConvertNotNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskVideoConvert)))
	})
}

// TaskVideoMoveEQ applies the EQ predicate on the "task_video_move" field.
func TaskVideoMoveEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskVideoMove), vc))
	})
}

// TaskVideoMoveNEQ applies the NEQ predicate on the "task_video_move" field.
func TaskVideoMoveNEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskVideoMove), vc))
	})
}

// TaskVideoMoveIn applies the In predicate on the "task_video_move" field.
func TaskVideoMoveIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskVideoMove), v...))
	})
}

// TaskVideoMoveNotIn applies the NotIn predicate on the "task_video_move" field.
func TaskVideoMoveNotIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskVideoMove), v...))
	})
}

// TaskVideoMoveIsNil applies the IsNil predicate on the "task_video_move" field.
func TaskVideoMoveIsNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskVideoMove)))
	})
}

// TaskVideoMoveNotNil applies the NotNil predicate on the "task_video_move" field.
func TaskVideoMoveNotNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskVideoMove)))
	})
}

// TaskChatDownloadEQ applies the EQ predicate on the "task_chat_download" field.
func TaskChatDownloadEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskChatDownload), vc))
	})
}

// TaskChatDownloadNEQ applies the NEQ predicate on the "task_chat_download" field.
func TaskChatDownloadNEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskChatDownload), vc))
	})
}

// TaskChatDownloadIn applies the In predicate on the "task_chat_download" field.
func TaskChatDownloadIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskChatDownload), v...))
	})
}

// TaskChatDownloadNotIn applies the NotIn predicate on the "task_chat_download" field.
func TaskChatDownloadNotIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskChatDownload), v...))
	})
}

// TaskChatDownloadIsNil applies the IsNil predicate on the "task_chat_download" field.
func TaskChatDownloadIsNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskChatDownload)))
	})
}

// TaskChatDownloadNotNil applies the NotNil predicate on the "task_chat_download" field.
func TaskChatDownloadNotNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskChatDownload)))
	})
}

// TaskChatRenderEQ applies the EQ predicate on the "task_chat_render" field.
func TaskChatRenderEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskChatRender), vc))
	})
}

// TaskChatRenderNEQ applies the NEQ predicate on the "task_chat_render" field.
func TaskChatRenderNEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskChatRender), vc))
	})
}

// TaskChatRenderIn applies the In predicate on the "task_chat_render" field.
func TaskChatRenderIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskChatRender), v...))
	})
}

// TaskChatRenderNotIn applies the NotIn predicate on the "task_chat_render" field.
func TaskChatRenderNotIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskChatRender), v...))
	})
}

// TaskChatRenderIsNil applies the IsNil predicate on the "task_chat_render" field.
func TaskChatRenderIsNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskChatRender)))
	})
}

// TaskChatRenderNotNil applies the NotNil predicate on the "task_chat_render" field.
func TaskChatRenderNotNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskChatRender)))
	})
}

// TaskChatMoveEQ applies the EQ predicate on the "task_chat_move" field.
func TaskChatMoveEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldTaskChatMove), vc))
	})
}

// TaskChatMoveNEQ applies the NEQ predicate on the "task_chat_move" field.
func TaskChatMoveNEQ(v utils.TaskStatus) predicate.Queue {
	vc := v
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldTaskChatMove), vc))
	})
}

// TaskChatMoveIn applies the In predicate on the "task_chat_move" field.
func TaskChatMoveIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldTaskChatMove), v...))
	})
}

// TaskChatMoveNotIn applies the NotIn predicate on the "task_chat_move" field.
func TaskChatMoveNotIn(vs ...utils.TaskStatus) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldTaskChatMove), v...))
	})
}

// TaskChatMoveIsNil applies the IsNil predicate on the "task_chat_move" field.
func TaskChatMoveIsNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldTaskChatMove)))
	})
}

// TaskChatMoveNotNil applies the NotNil predicate on the "task_chat_move" field.
func TaskChatMoveNotNil() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldTaskChatMove)))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Queue {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Queue(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasVod applies the HasEdge predicate on the "vod" edge.
func HasVod() predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VodTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, VodTable, VodColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasVodWith applies the HasEdge predicate on the "vod" edge with a given conditions (other predicates).
func HasVodWith(preds ...predicate.Vod) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(VodInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, VodTable, VodColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Queue) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Queue) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Queue) predicate.Queue {
	return predicate.Queue(func(s *sql.Selector) {
		p(s.Not())
	})
}
