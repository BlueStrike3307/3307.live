// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/live"
	"github.com/zibbp/ganymede/ent/livecategory"
)

// LiveCategoryCreate is the builder for creating a LiveCategory entity.
type LiveCategoryCreate struct {
	config
	mutation *LiveCategoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (lcc *LiveCategoryCreate) SetName(s string) *LiveCategoryCreate {
	lcc.mutation.SetName(s)
	return lcc
}

// SetID sets the "id" field.
func (lcc *LiveCategoryCreate) SetID(u uuid.UUID) *LiveCategoryCreate {
	lcc.mutation.SetID(u)
	return lcc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lcc *LiveCategoryCreate) SetNillableID(u *uuid.UUID) *LiveCategoryCreate {
	if u != nil {
		lcc.SetID(*u)
	}
	return lcc
}

// SetLiveID sets the "live" edge to the Live entity by ID.
func (lcc *LiveCategoryCreate) SetLiveID(id uuid.UUID) *LiveCategoryCreate {
	lcc.mutation.SetLiveID(id)
	return lcc
}

// SetLive sets the "live" edge to the Live entity.
func (lcc *LiveCategoryCreate) SetLive(l *Live) *LiveCategoryCreate {
	return lcc.SetLiveID(l.ID)
}

// Mutation returns the LiveCategoryMutation object of the builder.
func (lcc *LiveCategoryCreate) Mutation() *LiveCategoryMutation {
	return lcc.mutation
}

// Save creates the LiveCategory in the database.
func (lcc *LiveCategoryCreate) Save(ctx context.Context) (*LiveCategory, error) {
	lcc.defaults()
	return withHooks[*LiveCategory, LiveCategoryMutation](ctx, lcc.sqlSave, lcc.mutation, lcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lcc *LiveCategoryCreate) SaveX(ctx context.Context) *LiveCategory {
	v, err := lcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcc *LiveCategoryCreate) Exec(ctx context.Context) error {
	_, err := lcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcc *LiveCategoryCreate) ExecX(ctx context.Context) {
	if err := lcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lcc *LiveCategoryCreate) defaults() {
	if _, ok := lcc.mutation.ID(); !ok {
		v := livecategory.DefaultID()
		lcc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lcc *LiveCategoryCreate) check() error {
	if _, ok := lcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "LiveCategory.name"`)}
	}
	if _, ok := lcc.mutation.LiveID(); !ok {
		return &ValidationError{Name: "live", err: errors.New(`ent: missing required edge "LiveCategory.live"`)}
	}
	return nil
}

func (lcc *LiveCategoryCreate) sqlSave(ctx context.Context) (*LiveCategory, error) {
	if err := lcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lcc.mutation.id = &_node.ID
	lcc.mutation.done = true
	return _node, nil
}

func (lcc *LiveCategoryCreate) createSpec() (*LiveCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &LiveCategory{config: lcc.config}
		_spec = sqlgraph.NewCreateSpec(livecategory.Table, sqlgraph.NewFieldSpec(livecategory.FieldID, field.TypeUUID))
	)
	if id, ok := lcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lcc.mutation.Name(); ok {
		_spec.SetField(livecategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if nodes := lcc.mutation.LiveIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   livecategory.LiveTable,
			Columns: []string{livecategory.LiveColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(live.FieldID, field.TypeUUID),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.live_id = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LiveCategoryCreateBulk is the builder for creating many LiveCategory entities in bulk.
type LiveCategoryCreateBulk struct {
	config
	builders []*LiveCategoryCreate
}

// Save creates the LiveCategory entities in the database.
func (lccb *LiveCategoryCreateBulk) Save(ctx context.Context) ([]*LiveCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lccb.builders))
	nodes := make([]*LiveCategory, len(lccb.builders))
	mutators := make([]Mutator, len(lccb.builders))
	for i := range lccb.builders {
		func(i int, root context.Context) {
			builder := lccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LiveCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lccb *LiveCategoryCreateBulk) SaveX(ctx context.Context) []*LiveCategory {
	v, err := lccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lccb *LiveCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := lccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lccb *LiveCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := lccb.Exec(ctx); err != nil {
		panic(err)
	}
}
