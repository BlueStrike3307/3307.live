// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/zibbp/ganymede/ent/twitchcategory"
)

// TwitchCategoryCreate is the builder for creating a TwitchCategory entity.
type TwitchCategoryCreate struct {
	config
	mutation *TwitchCategoryMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (tcc *TwitchCategoryCreate) SetName(s string) *TwitchCategoryCreate {
	tcc.mutation.SetName(s)
	return tcc
}

// SetBoxArtURL sets the "box_art_url" field.
func (tcc *TwitchCategoryCreate) SetBoxArtURL(s string) *TwitchCategoryCreate {
	tcc.mutation.SetBoxArtURL(s)
	return tcc
}

// SetNillableBoxArtURL sets the "box_art_url" field if the given value is not nil.
func (tcc *TwitchCategoryCreate) SetNillableBoxArtURL(s *string) *TwitchCategoryCreate {
	if s != nil {
		tcc.SetBoxArtURL(*s)
	}
	return tcc
}

// SetIgdbID sets the "igdb_id" field.
func (tcc *TwitchCategoryCreate) SetIgdbID(s string) *TwitchCategoryCreate {
	tcc.mutation.SetIgdbID(s)
	return tcc
}

// SetNillableIgdbID sets the "igdb_id" field if the given value is not nil.
func (tcc *TwitchCategoryCreate) SetNillableIgdbID(s *string) *TwitchCategoryCreate {
	if s != nil {
		tcc.SetIgdbID(*s)
	}
	return tcc
}

// SetUpdatedAt sets the "updated_at" field.
func (tcc *TwitchCategoryCreate) SetUpdatedAt(t time.Time) *TwitchCategoryCreate {
	tcc.mutation.SetUpdatedAt(t)
	return tcc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (tcc *TwitchCategoryCreate) SetNillableUpdatedAt(t *time.Time) *TwitchCategoryCreate {
	if t != nil {
		tcc.SetUpdatedAt(*t)
	}
	return tcc
}

// SetCreatedAt sets the "created_at" field.
func (tcc *TwitchCategoryCreate) SetCreatedAt(t time.Time) *TwitchCategoryCreate {
	tcc.mutation.SetCreatedAt(t)
	return tcc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (tcc *TwitchCategoryCreate) SetNillableCreatedAt(t *time.Time) *TwitchCategoryCreate {
	if t != nil {
		tcc.SetCreatedAt(*t)
	}
	return tcc
}

// SetID sets the "id" field.
func (tcc *TwitchCategoryCreate) SetID(s string) *TwitchCategoryCreate {
	tcc.mutation.SetID(s)
	return tcc
}

// Mutation returns the TwitchCategoryMutation object of the builder.
func (tcc *TwitchCategoryCreate) Mutation() *TwitchCategoryMutation {
	return tcc.mutation
}

// Save creates the TwitchCategory in the database.
func (tcc *TwitchCategoryCreate) Save(ctx context.Context) (*TwitchCategory, error) {
	tcc.defaults()
	return withHooks[*TwitchCategory, TwitchCategoryMutation](ctx, tcc.sqlSave, tcc.mutation, tcc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tcc *TwitchCategoryCreate) SaveX(ctx context.Context) *TwitchCategory {
	v, err := tcc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcc *TwitchCategoryCreate) Exec(ctx context.Context) error {
	_, err := tcc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcc *TwitchCategoryCreate) ExecX(ctx context.Context) {
	if err := tcc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tcc *TwitchCategoryCreate) defaults() {
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		v := twitchcategory.DefaultUpdatedAt()
		tcc.mutation.SetUpdatedAt(v)
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		v := twitchcategory.DefaultCreatedAt()
		tcc.mutation.SetCreatedAt(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tcc *TwitchCategoryCreate) check() error {
	if _, ok := tcc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "TwitchCategory.name"`)}
	}
	if _, ok := tcc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "TwitchCategory.updated_at"`)}
	}
	if _, ok := tcc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "TwitchCategory.created_at"`)}
	}
	return nil
}

func (tcc *TwitchCategoryCreate) sqlSave(ctx context.Context) (*TwitchCategory, error) {
	if err := tcc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tcc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tcc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(string); ok {
			_node.ID = id
		} else {
			return nil, fmt.Errorf("unexpected TwitchCategory.ID type: %T", _spec.ID.Value)
		}
	}
	tcc.mutation.id = &_node.ID
	tcc.mutation.done = true
	return _node, nil
}

func (tcc *TwitchCategoryCreate) createSpec() (*TwitchCategory, *sqlgraph.CreateSpec) {
	var (
		_node = &TwitchCategory{config: tcc.config}
		_spec = sqlgraph.NewCreateSpec(twitchcategory.Table, sqlgraph.NewFieldSpec(twitchcategory.FieldID, field.TypeString))
	)
	if id, ok := tcc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := tcc.mutation.Name(); ok {
		_spec.SetField(twitchcategory.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tcc.mutation.BoxArtURL(); ok {
		_spec.SetField(twitchcategory.FieldBoxArtURL, field.TypeString, value)
		_node.BoxArtURL = value
	}
	if value, ok := tcc.mutation.IgdbID(); ok {
		_spec.SetField(twitchcategory.FieldIgdbID, field.TypeString, value)
		_node.IgdbID = value
	}
	if value, ok := tcc.mutation.UpdatedAt(); ok {
		_spec.SetField(twitchcategory.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := tcc.mutation.CreatedAt(); ok {
		_spec.SetField(twitchcategory.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	return _node, _spec
}

// TwitchCategoryCreateBulk is the builder for creating many TwitchCategory entities in bulk.
type TwitchCategoryCreateBulk struct {
	config
	builders []*TwitchCategoryCreate
}

// Save creates the TwitchCategory entities in the database.
func (tccb *TwitchCategoryCreateBulk) Save(ctx context.Context) ([]*TwitchCategory, error) {
	specs := make([]*sqlgraph.CreateSpec, len(tccb.builders))
	nodes := make([]*TwitchCategory, len(tccb.builders))
	mutators := make([]Mutator, len(tccb.builders))
	for i := range tccb.builders {
		func(i int, root context.Context) {
			builder := tccb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TwitchCategoryMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tccb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tccb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tccb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tccb *TwitchCategoryCreateBulk) SaveX(ctx context.Context) []*TwitchCategory {
	v, err := tccb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tccb *TwitchCategoryCreateBulk) Exec(ctx context.Context) error {
	_, err := tccb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tccb *TwitchCategoryCreateBulk) ExecX(ctx context.Context) {
	if err := tccb.Exec(ctx); err != nil {
		panic(err)
	}
}
