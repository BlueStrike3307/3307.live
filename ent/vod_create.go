// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/channel"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/vod"
	"github.com/zibbp/ganymede/internal/utils"
)

// VodCreate is the builder for creating a Vod entity.
type VodCreate struct {
	config
	mutation *VodMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetExtID sets the "ext_id" field.
func (vc *VodCreate) SetExtID(s string) *VodCreate {
	vc.mutation.SetExtID(s)
	return vc
}

// SetPlatform sets the "platform" field.
func (vc *VodCreate) SetPlatform(up utils.VodPlatform) *VodCreate {
	vc.mutation.SetPlatform(up)
	return vc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (vc *VodCreate) SetNillablePlatform(up *utils.VodPlatform) *VodCreate {
	if up != nil {
		vc.SetPlatform(*up)
	}
	return vc
}

// SetType sets the "type" field.
func (vc *VodCreate) SetType(ut utils.VodType) *VodCreate {
	vc.mutation.SetType(ut)
	return vc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vc *VodCreate) SetNillableType(ut *utils.VodType) *VodCreate {
	if ut != nil {
		vc.SetType(*ut)
	}
	return vc
}

// SetTitle sets the "title" field.
func (vc *VodCreate) SetTitle(s string) *VodCreate {
	vc.mutation.SetTitle(s)
	return vc
}

// SetDuration sets the "duration" field.
func (vc *VodCreate) SetDuration(i int) *VodCreate {
	vc.mutation.SetDuration(i)
	return vc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vc *VodCreate) SetNillableDuration(i *int) *VodCreate {
	if i != nil {
		vc.SetDuration(*i)
	}
	return vc
}

// SetViews sets the "views" field.
func (vc *VodCreate) SetViews(i int) *VodCreate {
	vc.mutation.SetViews(i)
	return vc
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (vc *VodCreate) SetNillableViews(i *int) *VodCreate {
	if i != nil {
		vc.SetViews(*i)
	}
	return vc
}

// SetResolution sets the "resolution" field.
func (vc *VodCreate) SetResolution(s string) *VodCreate {
	vc.mutation.SetResolution(s)
	return vc
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (vc *VodCreate) SetNillableResolution(s *string) *VodCreate {
	if s != nil {
		vc.SetResolution(*s)
	}
	return vc
}

// SetProcessing sets the "processing" field.
func (vc *VodCreate) SetProcessing(b bool) *VodCreate {
	vc.mutation.SetProcessing(b)
	return vc
}

// SetNillableProcessing sets the "processing" field if the given value is not nil.
func (vc *VodCreate) SetNillableProcessing(b *bool) *VodCreate {
	if b != nil {
		vc.SetProcessing(*b)
	}
	return vc
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (vc *VodCreate) SetThumbnailPath(s string) *VodCreate {
	vc.mutation.SetThumbnailPath(s)
	return vc
}

// SetNillableThumbnailPath sets the "thumbnail_path" field if the given value is not nil.
func (vc *VodCreate) SetNillableThumbnailPath(s *string) *VodCreate {
	if s != nil {
		vc.SetThumbnailPath(*s)
	}
	return vc
}

// SetWebThumbnailPath sets the "web_thumbnail_path" field.
func (vc *VodCreate) SetWebThumbnailPath(s string) *VodCreate {
	vc.mutation.SetWebThumbnailPath(s)
	return vc
}

// SetVideoPath sets the "video_path" field.
func (vc *VodCreate) SetVideoPath(s string) *VodCreate {
	vc.mutation.SetVideoPath(s)
	return vc
}

// SetChatPath sets the "chat_path" field.
func (vc *VodCreate) SetChatPath(s string) *VodCreate {
	vc.mutation.SetChatPath(s)
	return vc
}

// SetNillableChatPath sets the "chat_path" field if the given value is not nil.
func (vc *VodCreate) SetNillableChatPath(s *string) *VodCreate {
	if s != nil {
		vc.SetChatPath(*s)
	}
	return vc
}

// SetChatVideoPath sets the "chat_video_path" field.
func (vc *VodCreate) SetChatVideoPath(s string) *VodCreate {
	vc.mutation.SetChatVideoPath(s)
	return vc
}

// SetNillableChatVideoPath sets the "chat_video_path" field if the given value is not nil.
func (vc *VodCreate) SetNillableChatVideoPath(s *string) *VodCreate {
	if s != nil {
		vc.SetChatVideoPath(*s)
	}
	return vc
}

// SetInfoPath sets the "info_path" field.
func (vc *VodCreate) SetInfoPath(s string) *VodCreate {
	vc.mutation.SetInfoPath(s)
	return vc
}

// SetNillableInfoPath sets the "info_path" field if the given value is not nil.
func (vc *VodCreate) SetNillableInfoPath(s *string) *VodCreate {
	if s != nil {
		vc.SetInfoPath(*s)
	}
	return vc
}

// SetStreamedAt sets the "streamed_at" field.
func (vc *VodCreate) SetStreamedAt(t time.Time) *VodCreate {
	vc.mutation.SetStreamedAt(t)
	return vc
}

// SetNillableStreamedAt sets the "streamed_at" field if the given value is not nil.
func (vc *VodCreate) SetNillableStreamedAt(t *time.Time) *VodCreate {
	if t != nil {
		vc.SetStreamedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VodCreate) SetUpdatedAt(t time.Time) *VodCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VodCreate) SetNillableUpdatedAt(t *time.Time) *VodCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetCreatedAt sets the "created_at" field.
func (vc *VodCreate) SetCreatedAt(t time.Time) *VodCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VodCreate) SetNillableCreatedAt(t *time.Time) *VodCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *VodCreate) SetID(u uuid.UUID) *VodCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *VodCreate) SetNillableID(u *uuid.UUID) *VodCreate {
	if u != nil {
		vc.SetID(*u)
	}
	return vc
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (vc *VodCreate) SetChannelID(id uuid.UUID) *VodCreate {
	vc.mutation.SetChannelID(id)
	return vc
}

// SetChannel sets the "channel" edge to the Channel entity.
func (vc *VodCreate) SetChannel(c *Channel) *VodCreate {
	return vc.SetChannelID(c.ID)
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (vc *VodCreate) SetQueueID(id uuid.UUID) *VodCreate {
	vc.mutation.SetQueueID(id)
	return vc
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (vc *VodCreate) SetNillableQueueID(id *uuid.UUID) *VodCreate {
	if id != nil {
		vc = vc.SetQueueID(*id)
	}
	return vc
}

// SetQueue sets the "queue" edge to the Queue entity.
func (vc *VodCreate) SetQueue(q *Queue) *VodCreate {
	return vc.SetQueueID(q.ID)
}

// Mutation returns the VodMutation object of the builder.
func (vc *VodCreate) Mutation() *VodMutation {
	return vc.mutation
}

// Save creates the Vod in the database.
func (vc *VodCreate) Save(ctx context.Context) (*Vod, error) {
	var (
		err  error
		node *Vod
	)
	vc.defaults()
	if len(vc.hooks) == 0 {
		if err = vc.check(); err != nil {
			return nil, err
		}
		node, err = vc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*VodMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = vc.check(); err != nil {
				return nil, err
			}
			vc.mutation = mutation
			if node, err = vc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(vc.hooks) - 1; i >= 0; i-- {
			if vc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = vc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, vc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VodCreate) SaveX(ctx context.Context) *Vod {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VodCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VodCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VodCreate) defaults() {
	if _, ok := vc.mutation.Platform(); !ok {
		v := vod.DefaultPlatform
		vc.mutation.SetPlatform(v)
	}
	if _, ok := vc.mutation.GetType(); !ok {
		v := vod.DefaultType
		vc.mutation.SetType(v)
	}
	if _, ok := vc.mutation.Duration(); !ok {
		v := vod.DefaultDuration
		vc.mutation.SetDuration(v)
	}
	if _, ok := vc.mutation.Views(); !ok {
		v := vod.DefaultViews
		vc.mutation.SetViews(v)
	}
	if _, ok := vc.mutation.Processing(); !ok {
		v := vod.DefaultProcessing
		vc.mutation.SetProcessing(v)
	}
	if _, ok := vc.mutation.StreamedAt(); !ok {
		v := vod.DefaultStreamedAt()
		vc.mutation.SetStreamedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := vod.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := vod.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.ID(); !ok {
		v := vod.DefaultID()
		vc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VodCreate) check() error {
	if _, ok := vc.mutation.ExtID(); !ok {
		return &ValidationError{Name: "ext_id", err: errors.New(`ent: missing required field "Vod.ext_id"`)}
	}
	if _, ok := vc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Vod.platform"`)}
	}
	if v, ok := vc.mutation.Platform(); ok {
		if err := vod.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Vod.platform": %w`, err)}
		}
	}
	if _, ok := vc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Vod.type"`)}
	}
	if v, ok := vc.mutation.GetType(); ok {
		if err := vod.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Vod.type": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Vod.title"`)}
	}
	if _, ok := vc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Vod.duration"`)}
	}
	if _, ok := vc.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`ent: missing required field "Vod.views"`)}
	}
	if _, ok := vc.mutation.Processing(); !ok {
		return &ValidationError{Name: "processing", err: errors.New(`ent: missing required field "Vod.processing"`)}
	}
	if _, ok := vc.mutation.WebThumbnailPath(); !ok {
		return &ValidationError{Name: "web_thumbnail_path", err: errors.New(`ent: missing required field "Vod.web_thumbnail_path"`)}
	}
	if _, ok := vc.mutation.VideoPath(); !ok {
		return &ValidationError{Name: "video_path", err: errors.New(`ent: missing required field "Vod.video_path"`)}
	}
	if _, ok := vc.mutation.StreamedAt(); !ok {
		return &ValidationError{Name: "streamed_at", err: errors.New(`ent: missing required field "Vod.streamed_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Vod.updated_at"`)}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Vod.created_at"`)}
	}
	if _, ok := vc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "Vod.channel"`)}
	}
	return nil
}

func (vc *VodCreate) sqlSave(ctx context.Context) (*Vod, error) {
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (vc *VodCreate) createSpec() (*Vod, *sqlgraph.CreateSpec) {
	var (
		_node = &Vod{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vod.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vod.FieldID,
			},
		}
	)
	_spec.OnConflict = vc.conflict
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.ExtID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldExtID,
		})
		_node.ExtID = value
	}
	if value, ok := vc.mutation.Platform(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vod.FieldPlatform,
		})
		_node.Platform = value
	}
	if value, ok := vc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: vod.FieldType,
		})
		_node.Type = value
	}
	if value, ok := vc.mutation.Title(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldTitle,
		})
		_node.Title = value
	}
	if value, ok := vc.mutation.Duration(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldDuration,
		})
		_node.Duration = value
	}
	if value, ok := vc.mutation.Views(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: vod.FieldViews,
		})
		_node.Views = value
	}
	if value, ok := vc.mutation.Resolution(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldResolution,
		})
		_node.Resolution = value
	}
	if value, ok := vc.mutation.Processing(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: vod.FieldProcessing,
		})
		_node.Processing = value
	}
	if value, ok := vc.mutation.ThumbnailPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldThumbnailPath,
		})
		_node.ThumbnailPath = value
	}
	if value, ok := vc.mutation.WebThumbnailPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldWebThumbnailPath,
		})
		_node.WebThumbnailPath = value
	}
	if value, ok := vc.mutation.VideoPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldVideoPath,
		})
		_node.VideoPath = value
	}
	if value, ok := vc.mutation.ChatPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldChatPath,
		})
		_node.ChatPath = value
	}
	if value, ok := vc.mutation.ChatVideoPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldChatVideoPath,
		})
		_node.ChatVideoPath = value
	}
	if value, ok := vc.mutation.InfoPath(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: vod.FieldInfoPath,
		})
		_node.InfoPath = value
	}
	if value, ok := vc.mutation.StreamedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vod.FieldStreamedAt,
		})
		_node.StreamedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vod.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: vod.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := vc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vod.ChannelTable,
			Columns: []string{vod.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.channel_vods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vod.QueueTable,
			Columns: []string{vod.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vod.Create().
//		SetExtID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VodUpsert) {
//			SetExtID(v+v).
//		}).
//		Exec(ctx)
//
func (vc *VodCreate) OnConflict(opts ...sql.ConflictOption) *VodUpsertOne {
	vc.conflict = opts
	return &VodUpsertOne{
		create: vc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (vc *VodCreate) OnConflictColumns(columns ...string) *VodUpsertOne {
	vc.conflict = append(vc.conflict, sql.ConflictColumns(columns...))
	return &VodUpsertOne{
		create: vc,
	}
}

type (
	// VodUpsertOne is the builder for "upsert"-ing
	//  one Vod node.
	VodUpsertOne struct {
		create *VodCreate
	}

	// VodUpsert is the "OnConflict" setter.
	VodUpsert struct {
		*sql.UpdateSet
	}
)

// SetExtID sets the "ext_id" field.
func (u *VodUpsert) SetExtID(v string) *VodUpsert {
	u.Set(vod.FieldExtID, v)
	return u
}

// UpdateExtID sets the "ext_id" field to the value that was provided on create.
func (u *VodUpsert) UpdateExtID() *VodUpsert {
	u.SetExcluded(vod.FieldExtID)
	return u
}

// SetPlatform sets the "platform" field.
func (u *VodUpsert) SetPlatform(v utils.VodPlatform) *VodUpsert {
	u.Set(vod.FieldPlatform, v)
	return u
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *VodUpsert) UpdatePlatform() *VodUpsert {
	u.SetExcluded(vod.FieldPlatform)
	return u
}

// SetType sets the "type" field.
func (u *VodUpsert) SetType(v utils.VodType) *VodUpsert {
	u.Set(vod.FieldType, v)
	return u
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VodUpsert) UpdateType() *VodUpsert {
	u.SetExcluded(vod.FieldType)
	return u
}

// SetTitle sets the "title" field.
func (u *VodUpsert) SetTitle(v string) *VodUpsert {
	u.Set(vod.FieldTitle, v)
	return u
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VodUpsert) UpdateTitle() *VodUpsert {
	u.SetExcluded(vod.FieldTitle)
	return u
}

// SetDuration sets the "duration" field.
func (u *VodUpsert) SetDuration(v int) *VodUpsert {
	u.Set(vod.FieldDuration, v)
	return u
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *VodUpsert) UpdateDuration() *VodUpsert {
	u.SetExcluded(vod.FieldDuration)
	return u
}

// AddDuration adds v to the "duration" field.
func (u *VodUpsert) AddDuration(v int) *VodUpsert {
	u.Add(vod.FieldDuration, v)
	return u
}

// SetViews sets the "views" field.
func (u *VodUpsert) SetViews(v int) *VodUpsert {
	u.Set(vod.FieldViews, v)
	return u
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *VodUpsert) UpdateViews() *VodUpsert {
	u.SetExcluded(vod.FieldViews)
	return u
}

// AddViews adds v to the "views" field.
func (u *VodUpsert) AddViews(v int) *VodUpsert {
	u.Add(vod.FieldViews, v)
	return u
}

// SetResolution sets the "resolution" field.
func (u *VodUpsert) SetResolution(v string) *VodUpsert {
	u.Set(vod.FieldResolution, v)
	return u
}

// UpdateResolution sets the "resolution" field to the value that was provided on create.
func (u *VodUpsert) UpdateResolution() *VodUpsert {
	u.SetExcluded(vod.FieldResolution)
	return u
}

// ClearResolution clears the value of the "resolution" field.
func (u *VodUpsert) ClearResolution() *VodUpsert {
	u.SetNull(vod.FieldResolution)
	return u
}

// SetProcessing sets the "processing" field.
func (u *VodUpsert) SetProcessing(v bool) *VodUpsert {
	u.Set(vod.FieldProcessing, v)
	return u
}

// UpdateProcessing sets the "processing" field to the value that was provided on create.
func (u *VodUpsert) UpdateProcessing() *VodUpsert {
	u.SetExcluded(vod.FieldProcessing)
	return u
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (u *VodUpsert) SetThumbnailPath(v string) *VodUpsert {
	u.Set(vod.FieldThumbnailPath, v)
	return u
}

// UpdateThumbnailPath sets the "thumbnail_path" field to the value that was provided on create.
func (u *VodUpsert) UpdateThumbnailPath() *VodUpsert {
	u.SetExcluded(vod.FieldThumbnailPath)
	return u
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (u *VodUpsert) ClearThumbnailPath() *VodUpsert {
	u.SetNull(vod.FieldThumbnailPath)
	return u
}

// SetWebThumbnailPath sets the "web_thumbnail_path" field.
func (u *VodUpsert) SetWebThumbnailPath(v string) *VodUpsert {
	u.Set(vod.FieldWebThumbnailPath, v)
	return u
}

// UpdateWebThumbnailPath sets the "web_thumbnail_path" field to the value that was provided on create.
func (u *VodUpsert) UpdateWebThumbnailPath() *VodUpsert {
	u.SetExcluded(vod.FieldWebThumbnailPath)
	return u
}

// SetVideoPath sets the "video_path" field.
func (u *VodUpsert) SetVideoPath(v string) *VodUpsert {
	u.Set(vod.FieldVideoPath, v)
	return u
}

// UpdateVideoPath sets the "video_path" field to the value that was provided on create.
func (u *VodUpsert) UpdateVideoPath() *VodUpsert {
	u.SetExcluded(vod.FieldVideoPath)
	return u
}

// SetChatPath sets the "chat_path" field.
func (u *VodUpsert) SetChatPath(v string) *VodUpsert {
	u.Set(vod.FieldChatPath, v)
	return u
}

// UpdateChatPath sets the "chat_path" field to the value that was provided on create.
func (u *VodUpsert) UpdateChatPath() *VodUpsert {
	u.SetExcluded(vod.FieldChatPath)
	return u
}

// ClearChatPath clears the value of the "chat_path" field.
func (u *VodUpsert) ClearChatPath() *VodUpsert {
	u.SetNull(vod.FieldChatPath)
	return u
}

// SetChatVideoPath sets the "chat_video_path" field.
func (u *VodUpsert) SetChatVideoPath(v string) *VodUpsert {
	u.Set(vod.FieldChatVideoPath, v)
	return u
}

// UpdateChatVideoPath sets the "chat_video_path" field to the value that was provided on create.
func (u *VodUpsert) UpdateChatVideoPath() *VodUpsert {
	u.SetExcluded(vod.FieldChatVideoPath)
	return u
}

// ClearChatVideoPath clears the value of the "chat_video_path" field.
func (u *VodUpsert) ClearChatVideoPath() *VodUpsert {
	u.SetNull(vod.FieldChatVideoPath)
	return u
}

// SetInfoPath sets the "info_path" field.
func (u *VodUpsert) SetInfoPath(v string) *VodUpsert {
	u.Set(vod.FieldInfoPath, v)
	return u
}

// UpdateInfoPath sets the "info_path" field to the value that was provided on create.
func (u *VodUpsert) UpdateInfoPath() *VodUpsert {
	u.SetExcluded(vod.FieldInfoPath)
	return u
}

// ClearInfoPath clears the value of the "info_path" field.
func (u *VodUpsert) ClearInfoPath() *VodUpsert {
	u.SetNull(vod.FieldInfoPath)
	return u
}

// SetStreamedAt sets the "streamed_at" field.
func (u *VodUpsert) SetStreamedAt(v time.Time) *VodUpsert {
	u.Set(vod.FieldStreamedAt, v)
	return u
}

// UpdateStreamedAt sets the "streamed_at" field to the value that was provided on create.
func (u *VodUpsert) UpdateStreamedAt() *VodUpsert {
	u.SetExcluded(vod.FieldStreamedAt)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VodUpsert) SetUpdatedAt(v time.Time) *VodUpsert {
	u.Set(vod.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VodUpsert) UpdateUpdatedAt() *VodUpsert {
	u.SetExcluded(vod.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *VodUpsert) SetCreatedAt(v time.Time) *VodUpsert {
	u.Set(vod.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VodUpsert) UpdateCreatedAt() *VodUpsert {
	u.SetExcluded(vod.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Vod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vod.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *VodUpsertOne) UpdateNewValues() *VodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(vod.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(vod.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Vod.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *VodUpsertOne) Ignore() *VodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VodUpsertOne) DoNothing() *VodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VodCreate.OnConflict
// documentation for more info.
func (u *VodUpsertOne) Update(set func(*VodUpsert)) *VodUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VodUpsert{UpdateSet: update})
	}))
	return u
}

// SetExtID sets the "ext_id" field.
func (u *VodUpsertOne) SetExtID(v string) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetExtID(v)
	})
}

// UpdateExtID sets the "ext_id" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateExtID() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateExtID()
	})
}

// SetPlatform sets the "platform" field.
func (u *VodUpsertOne) SetPlatform(v utils.VodPlatform) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *VodUpsertOne) UpdatePlatform() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdatePlatform()
	})
}

// SetType sets the "type" field.
func (u *VodUpsertOne) SetType(v utils.VodType) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateType() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateType()
	})
}

// SetTitle sets the "title" field.
func (u *VodUpsertOne) SetTitle(v string) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateTitle() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateTitle()
	})
}

// SetDuration sets the "duration" field.
func (u *VodUpsertOne) SetDuration(v int) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *VodUpsertOne) AddDuration(v int) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateDuration() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateDuration()
	})
}

// SetViews sets the "views" field.
func (u *VodUpsertOne) SetViews(v int) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetViews(v)
	})
}

// AddViews adds v to the "views" field.
func (u *VodUpsertOne) AddViews(v int) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.AddViews(v)
	})
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateViews() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateViews()
	})
}

// SetResolution sets the "resolution" field.
func (u *VodUpsertOne) SetResolution(v string) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetResolution(v)
	})
}

// UpdateResolution sets the "resolution" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateResolution() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateResolution()
	})
}

// ClearResolution clears the value of the "resolution" field.
func (u *VodUpsertOne) ClearResolution() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.ClearResolution()
	})
}

// SetProcessing sets the "processing" field.
func (u *VodUpsertOne) SetProcessing(v bool) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetProcessing(v)
	})
}

// UpdateProcessing sets the "processing" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateProcessing() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateProcessing()
	})
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (u *VodUpsertOne) SetThumbnailPath(v string) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetThumbnailPath(v)
	})
}

// UpdateThumbnailPath sets the "thumbnail_path" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateThumbnailPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateThumbnailPath()
	})
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (u *VodUpsertOne) ClearThumbnailPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.ClearThumbnailPath()
	})
}

// SetWebThumbnailPath sets the "web_thumbnail_path" field.
func (u *VodUpsertOne) SetWebThumbnailPath(v string) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetWebThumbnailPath(v)
	})
}

// UpdateWebThumbnailPath sets the "web_thumbnail_path" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateWebThumbnailPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateWebThumbnailPath()
	})
}

// SetVideoPath sets the "video_path" field.
func (u *VodUpsertOne) SetVideoPath(v string) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetVideoPath(v)
	})
}

// UpdateVideoPath sets the "video_path" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateVideoPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateVideoPath()
	})
}

// SetChatPath sets the "chat_path" field.
func (u *VodUpsertOne) SetChatPath(v string) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetChatPath(v)
	})
}

// UpdateChatPath sets the "chat_path" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateChatPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateChatPath()
	})
}

// ClearChatPath clears the value of the "chat_path" field.
func (u *VodUpsertOne) ClearChatPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.ClearChatPath()
	})
}

// SetChatVideoPath sets the "chat_video_path" field.
func (u *VodUpsertOne) SetChatVideoPath(v string) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetChatVideoPath(v)
	})
}

// UpdateChatVideoPath sets the "chat_video_path" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateChatVideoPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateChatVideoPath()
	})
}

// ClearChatVideoPath clears the value of the "chat_video_path" field.
func (u *VodUpsertOne) ClearChatVideoPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.ClearChatVideoPath()
	})
}

// SetInfoPath sets the "info_path" field.
func (u *VodUpsertOne) SetInfoPath(v string) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetInfoPath(v)
	})
}

// UpdateInfoPath sets the "info_path" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateInfoPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateInfoPath()
	})
}

// ClearInfoPath clears the value of the "info_path" field.
func (u *VodUpsertOne) ClearInfoPath() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.ClearInfoPath()
	})
}

// SetStreamedAt sets the "streamed_at" field.
func (u *VodUpsertOne) SetStreamedAt(v time.Time) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetStreamedAt(v)
	})
}

// UpdateStreamedAt sets the "streamed_at" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateStreamedAt() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateStreamedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VodUpsertOne) SetUpdatedAt(v time.Time) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateUpdatedAt() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *VodUpsertOne) SetCreatedAt(v time.Time) *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VodUpsertOne) UpdateCreatedAt() *VodUpsertOne {
	return u.Update(func(s *VodUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *VodUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VodCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VodUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *VodUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: VodUpsertOne.ID is not supported by MySQL driver. Use VodUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *VodUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// VodCreateBulk is the builder for creating many Vod entities in bulk.
type VodCreateBulk struct {
	config
	builders []*VodCreate
	conflict []sql.ConflictOption
}

// Save creates the Vod entities in the database.
func (vcb *VodCreateBulk) Save(ctx context.Context) ([]*Vod, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vod, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = vcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VodCreateBulk) SaveX(ctx context.Context) []*Vod {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VodCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VodCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Vod.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.VodUpsert) {
//			SetExtID(v+v).
//		}).
//		Exec(ctx)
//
func (vcb *VodCreateBulk) OnConflict(opts ...sql.ConflictOption) *VodUpsertBulk {
	vcb.conflict = opts
	return &VodUpsertBulk{
		create: vcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Vod.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (vcb *VodCreateBulk) OnConflictColumns(columns ...string) *VodUpsertBulk {
	vcb.conflict = append(vcb.conflict, sql.ConflictColumns(columns...))
	return &VodUpsertBulk{
		create: vcb,
	}
}

// VodUpsertBulk is the builder for "upsert"-ing
// a bulk of Vod nodes.
type VodUpsertBulk struct {
	create *VodCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Vod.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(vod.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *VodUpsertBulk) UpdateNewValues() *VodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(vod.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(vod.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Vod.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *VodUpsertBulk) Ignore() *VodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *VodUpsertBulk) DoNothing() *VodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the VodCreateBulk.OnConflict
// documentation for more info.
func (u *VodUpsertBulk) Update(set func(*VodUpsert)) *VodUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&VodUpsert{UpdateSet: update})
	}))
	return u
}

// SetExtID sets the "ext_id" field.
func (u *VodUpsertBulk) SetExtID(v string) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetExtID(v)
	})
}

// UpdateExtID sets the "ext_id" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateExtID() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateExtID()
	})
}

// SetPlatform sets the "platform" field.
func (u *VodUpsertBulk) SetPlatform(v utils.VodPlatform) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetPlatform(v)
	})
}

// UpdatePlatform sets the "platform" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdatePlatform() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdatePlatform()
	})
}

// SetType sets the "type" field.
func (u *VodUpsertBulk) SetType(v utils.VodType) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetType(v)
	})
}

// UpdateType sets the "type" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateType() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateType()
	})
}

// SetTitle sets the "title" field.
func (u *VodUpsertBulk) SetTitle(v string) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetTitle(v)
	})
}

// UpdateTitle sets the "title" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateTitle() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateTitle()
	})
}

// SetDuration sets the "duration" field.
func (u *VodUpsertBulk) SetDuration(v int) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetDuration(v)
	})
}

// AddDuration adds v to the "duration" field.
func (u *VodUpsertBulk) AddDuration(v int) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.AddDuration(v)
	})
}

// UpdateDuration sets the "duration" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateDuration() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateDuration()
	})
}

// SetViews sets the "views" field.
func (u *VodUpsertBulk) SetViews(v int) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetViews(v)
	})
}

// AddViews adds v to the "views" field.
func (u *VodUpsertBulk) AddViews(v int) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.AddViews(v)
	})
}

// UpdateViews sets the "views" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateViews() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateViews()
	})
}

// SetResolution sets the "resolution" field.
func (u *VodUpsertBulk) SetResolution(v string) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetResolution(v)
	})
}

// UpdateResolution sets the "resolution" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateResolution() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateResolution()
	})
}

// ClearResolution clears the value of the "resolution" field.
func (u *VodUpsertBulk) ClearResolution() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.ClearResolution()
	})
}

// SetProcessing sets the "processing" field.
func (u *VodUpsertBulk) SetProcessing(v bool) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetProcessing(v)
	})
}

// UpdateProcessing sets the "processing" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateProcessing() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateProcessing()
	})
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (u *VodUpsertBulk) SetThumbnailPath(v string) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetThumbnailPath(v)
	})
}

// UpdateThumbnailPath sets the "thumbnail_path" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateThumbnailPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateThumbnailPath()
	})
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (u *VodUpsertBulk) ClearThumbnailPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.ClearThumbnailPath()
	})
}

// SetWebThumbnailPath sets the "web_thumbnail_path" field.
func (u *VodUpsertBulk) SetWebThumbnailPath(v string) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetWebThumbnailPath(v)
	})
}

// UpdateWebThumbnailPath sets the "web_thumbnail_path" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateWebThumbnailPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateWebThumbnailPath()
	})
}

// SetVideoPath sets the "video_path" field.
func (u *VodUpsertBulk) SetVideoPath(v string) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetVideoPath(v)
	})
}

// UpdateVideoPath sets the "video_path" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateVideoPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateVideoPath()
	})
}

// SetChatPath sets the "chat_path" field.
func (u *VodUpsertBulk) SetChatPath(v string) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetChatPath(v)
	})
}

// UpdateChatPath sets the "chat_path" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateChatPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateChatPath()
	})
}

// ClearChatPath clears the value of the "chat_path" field.
func (u *VodUpsertBulk) ClearChatPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.ClearChatPath()
	})
}

// SetChatVideoPath sets the "chat_video_path" field.
func (u *VodUpsertBulk) SetChatVideoPath(v string) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetChatVideoPath(v)
	})
}

// UpdateChatVideoPath sets the "chat_video_path" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateChatVideoPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateChatVideoPath()
	})
}

// ClearChatVideoPath clears the value of the "chat_video_path" field.
func (u *VodUpsertBulk) ClearChatVideoPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.ClearChatVideoPath()
	})
}

// SetInfoPath sets the "info_path" field.
func (u *VodUpsertBulk) SetInfoPath(v string) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetInfoPath(v)
	})
}

// UpdateInfoPath sets the "info_path" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateInfoPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateInfoPath()
	})
}

// ClearInfoPath clears the value of the "info_path" field.
func (u *VodUpsertBulk) ClearInfoPath() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.ClearInfoPath()
	})
}

// SetStreamedAt sets the "streamed_at" field.
func (u *VodUpsertBulk) SetStreamedAt(v time.Time) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetStreamedAt(v)
	})
}

// UpdateStreamedAt sets the "streamed_at" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateStreamedAt() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateStreamedAt()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *VodUpsertBulk) SetUpdatedAt(v time.Time) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateUpdatedAt() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *VodUpsertBulk) SetCreatedAt(v time.Time) *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *VodUpsertBulk) UpdateCreatedAt() *VodUpsertBulk {
	return u.Update(func(s *VodUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *VodUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the VodCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for VodCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *VodUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
