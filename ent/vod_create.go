// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/channel"
	"github.com/zibbp/ganymede/ent/playlist"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/vod"
	"github.com/zibbp/ganymede/internal/utils"
)

// VodCreate is the builder for creating a Vod entity.
type VodCreate struct {
	config
	mutation *VodMutation
	hooks    []Hook
}

// SetExtID sets the "ext_id" field.
func (vc *VodCreate) SetExtID(s string) *VodCreate {
	vc.mutation.SetExtID(s)
	return vc
}

// SetPlatform sets the "platform" field.
func (vc *VodCreate) SetPlatform(up utils.VodPlatform) *VodCreate {
	vc.mutation.SetPlatform(up)
	return vc
}

// SetNillablePlatform sets the "platform" field if the given value is not nil.
func (vc *VodCreate) SetNillablePlatform(up *utils.VodPlatform) *VodCreate {
	if up != nil {
		vc.SetPlatform(*up)
	}
	return vc
}

// SetType sets the "type" field.
func (vc *VodCreate) SetType(ut utils.VodType) *VodCreate {
	vc.mutation.SetType(ut)
	return vc
}

// SetNillableType sets the "type" field if the given value is not nil.
func (vc *VodCreate) SetNillableType(ut *utils.VodType) *VodCreate {
	if ut != nil {
		vc.SetType(*ut)
	}
	return vc
}

// SetTitle sets the "title" field.
func (vc *VodCreate) SetTitle(s string) *VodCreate {
	vc.mutation.SetTitle(s)
	return vc
}

// SetDuration sets the "duration" field.
func (vc *VodCreate) SetDuration(i int) *VodCreate {
	vc.mutation.SetDuration(i)
	return vc
}

// SetNillableDuration sets the "duration" field if the given value is not nil.
func (vc *VodCreate) SetNillableDuration(i *int) *VodCreate {
	if i != nil {
		vc.SetDuration(*i)
	}
	return vc
}

// SetViews sets the "views" field.
func (vc *VodCreate) SetViews(i int) *VodCreate {
	vc.mutation.SetViews(i)
	return vc
}

// SetNillableViews sets the "views" field if the given value is not nil.
func (vc *VodCreate) SetNillableViews(i *int) *VodCreate {
	if i != nil {
		vc.SetViews(*i)
	}
	return vc
}

// SetResolution sets the "resolution" field.
func (vc *VodCreate) SetResolution(s string) *VodCreate {
	vc.mutation.SetResolution(s)
	return vc
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (vc *VodCreate) SetNillableResolution(s *string) *VodCreate {
	if s != nil {
		vc.SetResolution(*s)
	}
	return vc
}

// SetProcessing sets the "processing" field.
func (vc *VodCreate) SetProcessing(b bool) *VodCreate {
	vc.mutation.SetProcessing(b)
	return vc
}

// SetNillableProcessing sets the "processing" field if the given value is not nil.
func (vc *VodCreate) SetNillableProcessing(b *bool) *VodCreate {
	if b != nil {
		vc.SetProcessing(*b)
	}
	return vc
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (vc *VodCreate) SetThumbnailPath(s string) *VodCreate {
	vc.mutation.SetThumbnailPath(s)
	return vc
}

// SetNillableThumbnailPath sets the "thumbnail_path" field if the given value is not nil.
func (vc *VodCreate) SetNillableThumbnailPath(s *string) *VodCreate {
	if s != nil {
		vc.SetThumbnailPath(*s)
	}
	return vc
}

// SetWebThumbnailPath sets the "web_thumbnail_path" field.
func (vc *VodCreate) SetWebThumbnailPath(s string) *VodCreate {
	vc.mutation.SetWebThumbnailPath(s)
	return vc
}

// SetVideoPath sets the "video_path" field.
func (vc *VodCreate) SetVideoPath(s string) *VodCreate {
	vc.mutation.SetVideoPath(s)
	return vc
}

// SetChatPath sets the "chat_path" field.
func (vc *VodCreate) SetChatPath(s string) *VodCreate {
	vc.mutation.SetChatPath(s)
	return vc
}

// SetNillableChatPath sets the "chat_path" field if the given value is not nil.
func (vc *VodCreate) SetNillableChatPath(s *string) *VodCreate {
	if s != nil {
		vc.SetChatPath(*s)
	}
	return vc
}

// SetChatVideoPath sets the "chat_video_path" field.
func (vc *VodCreate) SetChatVideoPath(s string) *VodCreate {
	vc.mutation.SetChatVideoPath(s)
	return vc
}

// SetNillableChatVideoPath sets the "chat_video_path" field if the given value is not nil.
func (vc *VodCreate) SetNillableChatVideoPath(s *string) *VodCreate {
	if s != nil {
		vc.SetChatVideoPath(*s)
	}
	return vc
}

// SetInfoPath sets the "info_path" field.
func (vc *VodCreate) SetInfoPath(s string) *VodCreate {
	vc.mutation.SetInfoPath(s)
	return vc
}

// SetNillableInfoPath sets the "info_path" field if the given value is not nil.
func (vc *VodCreate) SetNillableInfoPath(s *string) *VodCreate {
	if s != nil {
		vc.SetInfoPath(*s)
	}
	return vc
}

// SetCaptionPath sets the "caption_path" field.
func (vc *VodCreate) SetCaptionPath(s string) *VodCreate {
	vc.mutation.SetCaptionPath(s)
	return vc
}

// SetNillableCaptionPath sets the "caption_path" field if the given value is not nil.
func (vc *VodCreate) SetNillableCaptionPath(s *string) *VodCreate {
	if s != nil {
		vc.SetCaptionPath(*s)
	}
	return vc
}

// SetFolderName sets the "folder_name" field.
func (vc *VodCreate) SetFolderName(s string) *VodCreate {
	vc.mutation.SetFolderName(s)
	return vc
}

// SetNillableFolderName sets the "folder_name" field if the given value is not nil.
func (vc *VodCreate) SetNillableFolderName(s *string) *VodCreate {
	if s != nil {
		vc.SetFolderName(*s)
	}
	return vc
}

// SetFileName sets the "file_name" field.
func (vc *VodCreate) SetFileName(s string) *VodCreate {
	vc.mutation.SetFileName(s)
	return vc
}

// SetNillableFileName sets the "file_name" field if the given value is not nil.
func (vc *VodCreate) SetNillableFileName(s *string) *VodCreate {
	if s != nil {
		vc.SetFileName(*s)
	}
	return vc
}

// SetStreamedAt sets the "streamed_at" field.
func (vc *VodCreate) SetStreamedAt(t time.Time) *VodCreate {
	vc.mutation.SetStreamedAt(t)
	return vc
}

// SetNillableStreamedAt sets the "streamed_at" field if the given value is not nil.
func (vc *VodCreate) SetNillableStreamedAt(t *time.Time) *VodCreate {
	if t != nil {
		vc.SetStreamedAt(*t)
	}
	return vc
}

// SetUpdatedAt sets the "updated_at" field.
func (vc *VodCreate) SetUpdatedAt(t time.Time) *VodCreate {
	vc.mutation.SetUpdatedAt(t)
	return vc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (vc *VodCreate) SetNillableUpdatedAt(t *time.Time) *VodCreate {
	if t != nil {
		vc.SetUpdatedAt(*t)
	}
	return vc
}

// SetCreatedAt sets the "created_at" field.
func (vc *VodCreate) SetCreatedAt(t time.Time) *VodCreate {
	vc.mutation.SetCreatedAt(t)
	return vc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (vc *VodCreate) SetNillableCreatedAt(t *time.Time) *VodCreate {
	if t != nil {
		vc.SetCreatedAt(*t)
	}
	return vc
}

// SetID sets the "id" field.
func (vc *VodCreate) SetID(u uuid.UUID) *VodCreate {
	vc.mutation.SetID(u)
	return vc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (vc *VodCreate) SetNillableID(u *uuid.UUID) *VodCreate {
	if u != nil {
		vc.SetID(*u)
	}
	return vc
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (vc *VodCreate) SetChannelID(id uuid.UUID) *VodCreate {
	vc.mutation.SetChannelID(id)
	return vc
}

// SetChannel sets the "channel" edge to the Channel entity.
func (vc *VodCreate) SetChannel(c *Channel) *VodCreate {
	return vc.SetChannelID(c.ID)
}

// SetQueueID sets the "queue" edge to the Queue entity by ID.
func (vc *VodCreate) SetQueueID(id uuid.UUID) *VodCreate {
	vc.mutation.SetQueueID(id)
	return vc
}

// SetNillableQueueID sets the "queue" edge to the Queue entity by ID if the given value is not nil.
func (vc *VodCreate) SetNillableQueueID(id *uuid.UUID) *VodCreate {
	if id != nil {
		vc = vc.SetQueueID(*id)
	}
	return vc
}

// SetQueue sets the "queue" edge to the Queue entity.
func (vc *VodCreate) SetQueue(q *Queue) *VodCreate {
	return vc.SetQueueID(q.ID)
}

// AddPlaylistIDs adds the "playlists" edge to the Playlist entity by IDs.
func (vc *VodCreate) AddPlaylistIDs(ids ...uuid.UUID) *VodCreate {
	vc.mutation.AddPlaylistIDs(ids...)
	return vc
}

// AddPlaylists adds the "playlists" edges to the Playlist entity.
func (vc *VodCreate) AddPlaylists(p ...*Playlist) *VodCreate {
	ids := make([]uuid.UUID, len(p))
	for i := range p {
		ids[i] = p[i].ID
	}
	return vc.AddPlaylistIDs(ids...)
}

// Mutation returns the VodMutation object of the builder.
func (vc *VodCreate) Mutation() *VodMutation {
	return vc.mutation
}

// Save creates the Vod in the database.
func (vc *VodCreate) Save(ctx context.Context) (*Vod, error) {
	vc.defaults()
	return withHooks[*Vod, VodMutation](ctx, vc.sqlSave, vc.mutation, vc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (vc *VodCreate) SaveX(ctx context.Context) *Vod {
	v, err := vc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vc *VodCreate) Exec(ctx context.Context) error {
	_, err := vc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vc *VodCreate) ExecX(ctx context.Context) {
	if err := vc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (vc *VodCreate) defaults() {
	if _, ok := vc.mutation.Platform(); !ok {
		v := vod.DefaultPlatform
		vc.mutation.SetPlatform(v)
	}
	if _, ok := vc.mutation.GetType(); !ok {
		v := vod.DefaultType
		vc.mutation.SetType(v)
	}
	if _, ok := vc.mutation.Duration(); !ok {
		v := vod.DefaultDuration
		vc.mutation.SetDuration(v)
	}
	if _, ok := vc.mutation.Views(); !ok {
		v := vod.DefaultViews
		vc.mutation.SetViews(v)
	}
	if _, ok := vc.mutation.Processing(); !ok {
		v := vod.DefaultProcessing
		vc.mutation.SetProcessing(v)
	}
	if _, ok := vc.mutation.StreamedAt(); !ok {
		v := vod.DefaultStreamedAt()
		vc.mutation.SetStreamedAt(v)
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		v := vod.DefaultUpdatedAt()
		vc.mutation.SetUpdatedAt(v)
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		v := vod.DefaultCreatedAt()
		vc.mutation.SetCreatedAt(v)
	}
	if _, ok := vc.mutation.ID(); !ok {
		v := vod.DefaultID()
		vc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (vc *VodCreate) check() error {
	if _, ok := vc.mutation.ExtID(); !ok {
		return &ValidationError{Name: "ext_id", err: errors.New(`ent: missing required field "Vod.ext_id"`)}
	}
	if _, ok := vc.mutation.Platform(); !ok {
		return &ValidationError{Name: "platform", err: errors.New(`ent: missing required field "Vod.platform"`)}
	}
	if v, ok := vc.mutation.Platform(); ok {
		if err := vod.PlatformValidator(v); err != nil {
			return &ValidationError{Name: "platform", err: fmt.Errorf(`ent: validator failed for field "Vod.platform": %w`, err)}
		}
	}
	if _, ok := vc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Vod.type"`)}
	}
	if v, ok := vc.mutation.GetType(); ok {
		if err := vod.TypeValidator(v); err != nil {
			return &ValidationError{Name: "type", err: fmt.Errorf(`ent: validator failed for field "Vod.type": %w`, err)}
		}
	}
	if _, ok := vc.mutation.Title(); !ok {
		return &ValidationError{Name: "title", err: errors.New(`ent: missing required field "Vod.title"`)}
	}
	if _, ok := vc.mutation.Duration(); !ok {
		return &ValidationError{Name: "duration", err: errors.New(`ent: missing required field "Vod.duration"`)}
	}
	if _, ok := vc.mutation.Views(); !ok {
		return &ValidationError{Name: "views", err: errors.New(`ent: missing required field "Vod.views"`)}
	}
	if _, ok := vc.mutation.Processing(); !ok {
		return &ValidationError{Name: "processing", err: errors.New(`ent: missing required field "Vod.processing"`)}
	}
	if _, ok := vc.mutation.WebThumbnailPath(); !ok {
		return &ValidationError{Name: "web_thumbnail_path", err: errors.New(`ent: missing required field "Vod.web_thumbnail_path"`)}
	}
	if _, ok := vc.mutation.VideoPath(); !ok {
		return &ValidationError{Name: "video_path", err: errors.New(`ent: missing required field "Vod.video_path"`)}
	}
	if _, ok := vc.mutation.StreamedAt(); !ok {
		return &ValidationError{Name: "streamed_at", err: errors.New(`ent: missing required field "Vod.streamed_at"`)}
	}
	if _, ok := vc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Vod.updated_at"`)}
	}
	if _, ok := vc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Vod.created_at"`)}
	}
	if _, ok := vc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "Vod.channel"`)}
	}
	return nil
}

func (vc *VodCreate) sqlSave(ctx context.Context) (*Vod, error) {
	if err := vc.check(); err != nil {
		return nil, err
	}
	_node, _spec := vc.createSpec()
	if err := sqlgraph.CreateNode(ctx, vc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	vc.mutation.id = &_node.ID
	vc.mutation.done = true
	return _node, nil
}

func (vc *VodCreate) createSpec() (*Vod, *sqlgraph.CreateSpec) {
	var (
		_node = &Vod{config: vc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: vod.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: vod.FieldID,
			},
		}
	)
	if id, ok := vc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := vc.mutation.ExtID(); ok {
		_spec.SetField(vod.FieldExtID, field.TypeString, value)
		_node.ExtID = value
	}
	if value, ok := vc.mutation.Platform(); ok {
		_spec.SetField(vod.FieldPlatform, field.TypeEnum, value)
		_node.Platform = value
	}
	if value, ok := vc.mutation.GetType(); ok {
		_spec.SetField(vod.FieldType, field.TypeEnum, value)
		_node.Type = value
	}
	if value, ok := vc.mutation.Title(); ok {
		_spec.SetField(vod.FieldTitle, field.TypeString, value)
		_node.Title = value
	}
	if value, ok := vc.mutation.Duration(); ok {
		_spec.SetField(vod.FieldDuration, field.TypeInt, value)
		_node.Duration = value
	}
	if value, ok := vc.mutation.Views(); ok {
		_spec.SetField(vod.FieldViews, field.TypeInt, value)
		_node.Views = value
	}
	if value, ok := vc.mutation.Resolution(); ok {
		_spec.SetField(vod.FieldResolution, field.TypeString, value)
		_node.Resolution = value
	}
	if value, ok := vc.mutation.Processing(); ok {
		_spec.SetField(vod.FieldProcessing, field.TypeBool, value)
		_node.Processing = value
	}
	if value, ok := vc.mutation.ThumbnailPath(); ok {
		_spec.SetField(vod.FieldThumbnailPath, field.TypeString, value)
		_node.ThumbnailPath = value
	}
	if value, ok := vc.mutation.WebThumbnailPath(); ok {
		_spec.SetField(vod.FieldWebThumbnailPath, field.TypeString, value)
		_node.WebThumbnailPath = value
	}
	if value, ok := vc.mutation.VideoPath(); ok {
		_spec.SetField(vod.FieldVideoPath, field.TypeString, value)
		_node.VideoPath = value
	}
	if value, ok := vc.mutation.ChatPath(); ok {
		_spec.SetField(vod.FieldChatPath, field.TypeString, value)
		_node.ChatPath = value
	}
	if value, ok := vc.mutation.ChatVideoPath(); ok {
		_spec.SetField(vod.FieldChatVideoPath, field.TypeString, value)
		_node.ChatVideoPath = value
	}
	if value, ok := vc.mutation.InfoPath(); ok {
		_spec.SetField(vod.FieldInfoPath, field.TypeString, value)
		_node.InfoPath = value
	}
	if value, ok := vc.mutation.CaptionPath(); ok {
		_spec.SetField(vod.FieldCaptionPath, field.TypeString, value)
		_node.CaptionPath = value
	}
	if value, ok := vc.mutation.FolderName(); ok {
		_spec.SetField(vod.FieldFolderName, field.TypeString, value)
		_node.FolderName = value
	}
	if value, ok := vc.mutation.FileName(); ok {
		_spec.SetField(vod.FieldFileName, field.TypeString, value)
		_node.FileName = value
	}
	if value, ok := vc.mutation.StreamedAt(); ok {
		_spec.SetField(vod.FieldStreamedAt, field.TypeTime, value)
		_node.StreamedAt = value
	}
	if value, ok := vc.mutation.UpdatedAt(); ok {
		_spec.SetField(vod.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := vc.mutation.CreatedAt(); ok {
		_spec.SetField(vod.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := vc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   vod.ChannelTable,
			Columns: []string{vod.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.channel_vods = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.QueueIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2O,
			Inverse: false,
			Table:   vod.QueueTable,
			Columns: []string{vod.QueueColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: queue.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := vc.mutation.PlaylistsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   vod.PlaylistsTable,
			Columns: vod.PlaylistsPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: playlist.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// VodCreateBulk is the builder for creating many Vod entities in bulk.
type VodCreateBulk struct {
	config
	builders []*VodCreate
}

// Save creates the Vod entities in the database.
func (vcb *VodCreateBulk) Save(ctx context.Context) ([]*Vod, error) {
	specs := make([]*sqlgraph.CreateSpec, len(vcb.builders))
	nodes := make([]*Vod, len(vcb.builders))
	mutators := make([]Mutator, len(vcb.builders))
	for i := range vcb.builders {
		func(i int, root context.Context) {
			builder := vcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*VodMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, vcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, vcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, vcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (vcb *VodCreateBulk) SaveX(ctx context.Context) []*Vod {
	v, err := vcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (vcb *VodCreateBulk) Exec(ctx context.Context) error {
	_, err := vcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (vcb *VodCreateBulk) ExecX(ctx context.Context) {
	if err := vcb.Exec(ctx); err != nil {
		panic(err)
	}
}
