// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"sync"
	"time"

	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/channel"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/user"
	"github.com/zibbp/ganymede/ent/vod"
	"github.com/zibbp/ganymede/internal/utils"

	"entgo.io/ent"
)

const (
	// Operation types.
	OpCreate    = ent.OpCreate
	OpDelete    = ent.OpDelete
	OpDeleteOne = ent.OpDeleteOne
	OpUpdate    = ent.OpUpdate
	OpUpdateOne = ent.OpUpdateOne

	// Node types.
	TypeChannel = "Channel"
	TypeQueue   = "Queue"
	TypeUser    = "User"
	TypeVod     = "Vod"
)

// ChannelMutation represents an operation that mutates the Channel nodes in the graph.
type ChannelMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	name          *string
	display_name  *string
	image_path    *string
	updated_at    *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	vods          map[uuid.UUID]struct{}
	removedvods   map[uuid.UUID]struct{}
	clearedvods   bool
	done          bool
	oldValue      func(context.Context) (*Channel, error)
	predicates    []predicate.Channel
}

var _ ent.Mutation = (*ChannelMutation)(nil)

// channelOption allows management of the mutation configuration using functional options.
type channelOption func(*ChannelMutation)

// newChannelMutation creates new mutation for the Channel entity.
func newChannelMutation(c config, op Op, opts ...channelOption) *ChannelMutation {
	m := &ChannelMutation{
		config:        c,
		op:            op,
		typ:           TypeChannel,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withChannelID sets the ID field of the mutation.
func withChannelID(id uuid.UUID) channelOption {
	return func(m *ChannelMutation) {
		var (
			err   error
			once  sync.Once
			value *Channel
		)
		m.oldValue = func(ctx context.Context) (*Channel, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Channel.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withChannel sets the old Channel of the mutation.
func withChannel(node *Channel) channelOption {
	return func(m *ChannelMutation) {
		m.oldValue = func(context.Context) (*Channel, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m ChannelMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m ChannelMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Channel entities.
func (m *ChannelMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *ChannelMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *ChannelMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Channel.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetName sets the "name" field.
func (m *ChannelMutation) SetName(s string) {
	m.name = &s
}

// Name returns the value of the "name" field in the mutation.
func (m *ChannelMutation) Name() (r string, exists bool) {
	v := m.name
	if v == nil {
		return
	}
	return *v, true
}

// OldName returns the old "name" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldName: %w", err)
	}
	return oldValue.Name, nil
}

// ResetName resets all changes to the "name" field.
func (m *ChannelMutation) ResetName() {
	m.name = nil
}

// SetDisplayName sets the "display_name" field.
func (m *ChannelMutation) SetDisplayName(s string) {
	m.display_name = &s
}

// DisplayName returns the value of the "display_name" field in the mutation.
func (m *ChannelMutation) DisplayName() (r string, exists bool) {
	v := m.display_name
	if v == nil {
		return
	}
	return *v, true
}

// OldDisplayName returns the old "display_name" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldDisplayName(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDisplayName is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDisplayName requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDisplayName: %w", err)
	}
	return oldValue.DisplayName, nil
}

// ResetDisplayName resets all changes to the "display_name" field.
func (m *ChannelMutation) ResetDisplayName() {
	m.display_name = nil
}

// SetImagePath sets the "image_path" field.
func (m *ChannelMutation) SetImagePath(s string) {
	m.image_path = &s
}

// ImagePath returns the value of the "image_path" field in the mutation.
func (m *ChannelMutation) ImagePath() (r string, exists bool) {
	v := m.image_path
	if v == nil {
		return
	}
	return *v, true
}

// OldImagePath returns the old "image_path" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldImagePath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldImagePath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldImagePath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldImagePath: %w", err)
	}
	return oldValue.ImagePath, nil
}

// ResetImagePath resets all changes to the "image_path" field.
func (m *ChannelMutation) ResetImagePath() {
	m.image_path = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *ChannelMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *ChannelMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *ChannelMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *ChannelMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *ChannelMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Channel entity.
// If the Channel object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *ChannelMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *ChannelMutation) ResetCreatedAt() {
	m.created_at = nil
}

// AddVodIDs adds the "vods" edge to the Vod entity by ids.
func (m *ChannelMutation) AddVodIDs(ids ...uuid.UUID) {
	if m.vods == nil {
		m.vods = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		m.vods[ids[i]] = struct{}{}
	}
}

// ClearVods clears the "vods" edge to the Vod entity.
func (m *ChannelMutation) ClearVods() {
	m.clearedvods = true
}

// VodsCleared reports if the "vods" edge to the Vod entity was cleared.
func (m *ChannelMutation) VodsCleared() bool {
	return m.clearedvods
}

// RemoveVodIDs removes the "vods" edge to the Vod entity by IDs.
func (m *ChannelMutation) RemoveVodIDs(ids ...uuid.UUID) {
	if m.removedvods == nil {
		m.removedvods = make(map[uuid.UUID]struct{})
	}
	for i := range ids {
		delete(m.vods, ids[i])
		m.removedvods[ids[i]] = struct{}{}
	}
}

// RemovedVods returns the removed IDs of the "vods" edge to the Vod entity.
func (m *ChannelMutation) RemovedVodsIDs() (ids []uuid.UUID) {
	for id := range m.removedvods {
		ids = append(ids, id)
	}
	return
}

// VodsIDs returns the "vods" edge IDs in the mutation.
func (m *ChannelMutation) VodsIDs() (ids []uuid.UUID) {
	for id := range m.vods {
		ids = append(ids, id)
	}
	return
}

// ResetVods resets all changes to the "vods" edge.
func (m *ChannelMutation) ResetVods() {
	m.vods = nil
	m.clearedvods = false
	m.removedvods = nil
}

// Where appends a list predicates to the ChannelMutation builder.
func (m *ChannelMutation) Where(ps ...predicate.Channel) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *ChannelMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Channel).
func (m *ChannelMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *ChannelMutation) Fields() []string {
	fields := make([]string, 0, 5)
	if m.name != nil {
		fields = append(fields, channel.FieldName)
	}
	if m.display_name != nil {
		fields = append(fields, channel.FieldDisplayName)
	}
	if m.image_path != nil {
		fields = append(fields, channel.FieldImagePath)
	}
	if m.updated_at != nil {
		fields = append(fields, channel.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, channel.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *ChannelMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case channel.FieldName:
		return m.Name()
	case channel.FieldDisplayName:
		return m.DisplayName()
	case channel.FieldImagePath:
		return m.ImagePath()
	case channel.FieldUpdatedAt:
		return m.UpdatedAt()
	case channel.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *ChannelMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case channel.FieldName:
		return m.OldName(ctx)
	case channel.FieldDisplayName:
		return m.OldDisplayName(ctx)
	case channel.FieldImagePath:
		return m.OldImagePath(ctx)
	case channel.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case channel.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Channel field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) SetField(name string, value ent.Value) error {
	switch name {
	case channel.FieldName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetName(v)
		return nil
	case channel.FieldDisplayName:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDisplayName(v)
		return nil
	case channel.FieldImagePath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetImagePath(v)
		return nil
	case channel.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case channel.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *ChannelMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *ChannelMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *ChannelMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Channel numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *ChannelMutation) ClearedFields() []string {
	return nil
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *ChannelMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *ChannelMutation) ClearField(name string) error {
	return fmt.Errorf("unknown Channel nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *ChannelMutation) ResetField(name string) error {
	switch name {
	case channel.FieldName:
		m.ResetName()
		return nil
	case channel.FieldDisplayName:
		m.ResetDisplayName()
		return nil
	case channel.FieldImagePath:
		m.ResetImagePath()
		return nil
	case channel.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case channel.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Channel field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *ChannelMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vods != nil {
		edges = append(edges, channel.EdgeVods)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *ChannelMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeVods:
		ids := make([]ent.Value, 0, len(m.vods))
		for id := range m.vods {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *ChannelMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	if m.removedvods != nil {
		edges = append(edges, channel.EdgeVods)
	}
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *ChannelMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	case channel.EdgeVods:
		ids := make([]ent.Value, 0, len(m.removedvods))
		for id := range m.removedvods {
			ids = append(ids, id)
		}
		return ids
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *ChannelMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvods {
		edges = append(edges, channel.EdgeVods)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *ChannelMutation) EdgeCleared(name string) bool {
	switch name {
	case channel.EdgeVods:
		return m.clearedvods
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *ChannelMutation) ClearEdge(name string) error {
	switch name {
	}
	return fmt.Errorf("unknown Channel unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *ChannelMutation) ResetEdge(name string) error {
	switch name {
	case channel.EdgeVods:
		m.ResetVods()
		return nil
	}
	return fmt.Errorf("unknown Channel edge %s", name)
}

// QueueMutation represents an operation that mutates the Queue nodes in the graph.
type QueueMutation struct {
	config
	op                          Op
	typ                         string
	id                          *uuid.UUID
	live_archive                *bool
	on_hold                     *bool
	video_processing            *bool
	chat_processing             *bool
	processing                  *bool
	task_vod_create_folder      *utils.TaskStatus
	task_vod_download_thumbnail *utils.TaskStatus
	task_vod_save_info          *utils.TaskStatus
	task_video_download         *utils.TaskStatus
	task_video_convert          *utils.TaskStatus
	task_video_move             *utils.TaskStatus
	task_chat_download          *utils.TaskStatus
	task_chat_render            *utils.TaskStatus
	task_chat_move              *utils.TaskStatus
	updated_at                  *time.Time
	created_at                  *time.Time
	clearedFields               map[string]struct{}
	vod                         *uuid.UUID
	clearedvod                  bool
	done                        bool
	oldValue                    func(context.Context) (*Queue, error)
	predicates                  []predicate.Queue
}

var _ ent.Mutation = (*QueueMutation)(nil)

// queueOption allows management of the mutation configuration using functional options.
type queueOption func(*QueueMutation)

// newQueueMutation creates new mutation for the Queue entity.
func newQueueMutation(c config, op Op, opts ...queueOption) *QueueMutation {
	m := &QueueMutation{
		config:        c,
		op:            op,
		typ:           TypeQueue,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withQueueID sets the ID field of the mutation.
func withQueueID(id uuid.UUID) queueOption {
	return func(m *QueueMutation) {
		var (
			err   error
			once  sync.Once
			value *Queue
		)
		m.oldValue = func(ctx context.Context) (*Queue, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Queue.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withQueue sets the old Queue of the mutation.
func withQueue(node *Queue) queueOption {
	return func(m *QueueMutation) {
		m.oldValue = func(context.Context) (*Queue, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m QueueMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m QueueMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Queue entities.
func (m *QueueMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *QueueMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *QueueMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Queue.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetLiveArchive sets the "live_archive" field.
func (m *QueueMutation) SetLiveArchive(b bool) {
	m.live_archive = &b
}

// LiveArchive returns the value of the "live_archive" field in the mutation.
func (m *QueueMutation) LiveArchive() (r bool, exists bool) {
	v := m.live_archive
	if v == nil {
		return
	}
	return *v, true
}

// OldLiveArchive returns the old "live_archive" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldLiveArchive(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldLiveArchive is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldLiveArchive requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldLiveArchive: %w", err)
	}
	return oldValue.LiveArchive, nil
}

// ResetLiveArchive resets all changes to the "live_archive" field.
func (m *QueueMutation) ResetLiveArchive() {
	m.live_archive = nil
}

// SetOnHold sets the "on_hold" field.
func (m *QueueMutation) SetOnHold(b bool) {
	m.on_hold = &b
}

// OnHold returns the value of the "on_hold" field in the mutation.
func (m *QueueMutation) OnHold() (r bool, exists bool) {
	v := m.on_hold
	if v == nil {
		return
	}
	return *v, true
}

// OldOnHold returns the old "on_hold" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldOnHold(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldOnHold is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldOnHold requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldOnHold: %w", err)
	}
	return oldValue.OnHold, nil
}

// ResetOnHold resets all changes to the "on_hold" field.
func (m *QueueMutation) ResetOnHold() {
	m.on_hold = nil
}

// SetVideoProcessing sets the "video_processing" field.
func (m *QueueMutation) SetVideoProcessing(b bool) {
	m.video_processing = &b
}

// VideoProcessing returns the value of the "video_processing" field in the mutation.
func (m *QueueMutation) VideoProcessing() (r bool, exists bool) {
	v := m.video_processing
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoProcessing returns the old "video_processing" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldVideoProcessing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoProcessing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoProcessing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoProcessing: %w", err)
	}
	return oldValue.VideoProcessing, nil
}

// ResetVideoProcessing resets all changes to the "video_processing" field.
func (m *QueueMutation) ResetVideoProcessing() {
	m.video_processing = nil
}

// SetChatProcessing sets the "chat_processing" field.
func (m *QueueMutation) SetChatProcessing(b bool) {
	m.chat_processing = &b
}

// ChatProcessing returns the value of the "chat_processing" field in the mutation.
func (m *QueueMutation) ChatProcessing() (r bool, exists bool) {
	v := m.chat_processing
	if v == nil {
		return
	}
	return *v, true
}

// OldChatProcessing returns the old "chat_processing" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldChatProcessing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatProcessing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatProcessing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatProcessing: %w", err)
	}
	return oldValue.ChatProcessing, nil
}

// ResetChatProcessing resets all changes to the "chat_processing" field.
func (m *QueueMutation) ResetChatProcessing() {
	m.chat_processing = nil
}

// SetProcessing sets the "processing" field.
func (m *QueueMutation) SetProcessing(b bool) {
	m.processing = &b
}

// Processing returns the value of the "processing" field in the mutation.
func (m *QueueMutation) Processing() (r bool, exists bool) {
	v := m.processing
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessing returns the old "processing" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldProcessing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessing: %w", err)
	}
	return oldValue.Processing, nil
}

// ResetProcessing resets all changes to the "processing" field.
func (m *QueueMutation) ResetProcessing() {
	m.processing = nil
}

// SetTaskVodCreateFolder sets the "task_vod_create_folder" field.
func (m *QueueMutation) SetTaskVodCreateFolder(us utils.TaskStatus) {
	m.task_vod_create_folder = &us
}

// TaskVodCreateFolder returns the value of the "task_vod_create_folder" field in the mutation.
func (m *QueueMutation) TaskVodCreateFolder() (r utils.TaskStatus, exists bool) {
	v := m.task_vod_create_folder
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVodCreateFolder returns the old "task_vod_create_folder" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVodCreateFolder(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVodCreateFolder is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVodCreateFolder requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVodCreateFolder: %w", err)
	}
	return oldValue.TaskVodCreateFolder, nil
}

// ClearTaskVodCreateFolder clears the value of the "task_vod_create_folder" field.
func (m *QueueMutation) ClearTaskVodCreateFolder() {
	m.task_vod_create_folder = nil
	m.clearedFields[queue.FieldTaskVodCreateFolder] = struct{}{}
}

// TaskVodCreateFolderCleared returns if the "task_vod_create_folder" field was cleared in this mutation.
func (m *QueueMutation) TaskVodCreateFolderCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVodCreateFolder]
	return ok
}

// ResetTaskVodCreateFolder resets all changes to the "task_vod_create_folder" field.
func (m *QueueMutation) ResetTaskVodCreateFolder() {
	m.task_vod_create_folder = nil
	delete(m.clearedFields, queue.FieldTaskVodCreateFolder)
}

// SetTaskVodDownloadThumbnail sets the "task_vod_download_thumbnail" field.
func (m *QueueMutation) SetTaskVodDownloadThumbnail(us utils.TaskStatus) {
	m.task_vod_download_thumbnail = &us
}

// TaskVodDownloadThumbnail returns the value of the "task_vod_download_thumbnail" field in the mutation.
func (m *QueueMutation) TaskVodDownloadThumbnail() (r utils.TaskStatus, exists bool) {
	v := m.task_vod_download_thumbnail
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVodDownloadThumbnail returns the old "task_vod_download_thumbnail" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVodDownloadThumbnail(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVodDownloadThumbnail is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVodDownloadThumbnail requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVodDownloadThumbnail: %w", err)
	}
	return oldValue.TaskVodDownloadThumbnail, nil
}

// ClearTaskVodDownloadThumbnail clears the value of the "task_vod_download_thumbnail" field.
func (m *QueueMutation) ClearTaskVodDownloadThumbnail() {
	m.task_vod_download_thumbnail = nil
	m.clearedFields[queue.FieldTaskVodDownloadThumbnail] = struct{}{}
}

// TaskVodDownloadThumbnailCleared returns if the "task_vod_download_thumbnail" field was cleared in this mutation.
func (m *QueueMutation) TaskVodDownloadThumbnailCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVodDownloadThumbnail]
	return ok
}

// ResetTaskVodDownloadThumbnail resets all changes to the "task_vod_download_thumbnail" field.
func (m *QueueMutation) ResetTaskVodDownloadThumbnail() {
	m.task_vod_download_thumbnail = nil
	delete(m.clearedFields, queue.FieldTaskVodDownloadThumbnail)
}

// SetTaskVodSaveInfo sets the "task_vod_save_info" field.
func (m *QueueMutation) SetTaskVodSaveInfo(us utils.TaskStatus) {
	m.task_vod_save_info = &us
}

// TaskVodSaveInfo returns the value of the "task_vod_save_info" field in the mutation.
func (m *QueueMutation) TaskVodSaveInfo() (r utils.TaskStatus, exists bool) {
	v := m.task_vod_save_info
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVodSaveInfo returns the old "task_vod_save_info" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVodSaveInfo(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVodSaveInfo is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVodSaveInfo requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVodSaveInfo: %w", err)
	}
	return oldValue.TaskVodSaveInfo, nil
}

// ClearTaskVodSaveInfo clears the value of the "task_vod_save_info" field.
func (m *QueueMutation) ClearTaskVodSaveInfo() {
	m.task_vod_save_info = nil
	m.clearedFields[queue.FieldTaskVodSaveInfo] = struct{}{}
}

// TaskVodSaveInfoCleared returns if the "task_vod_save_info" field was cleared in this mutation.
func (m *QueueMutation) TaskVodSaveInfoCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVodSaveInfo]
	return ok
}

// ResetTaskVodSaveInfo resets all changes to the "task_vod_save_info" field.
func (m *QueueMutation) ResetTaskVodSaveInfo() {
	m.task_vod_save_info = nil
	delete(m.clearedFields, queue.FieldTaskVodSaveInfo)
}

// SetTaskVideoDownload sets the "task_video_download" field.
func (m *QueueMutation) SetTaskVideoDownload(us utils.TaskStatus) {
	m.task_video_download = &us
}

// TaskVideoDownload returns the value of the "task_video_download" field in the mutation.
func (m *QueueMutation) TaskVideoDownload() (r utils.TaskStatus, exists bool) {
	v := m.task_video_download
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVideoDownload returns the old "task_video_download" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVideoDownload(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVideoDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVideoDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVideoDownload: %w", err)
	}
	return oldValue.TaskVideoDownload, nil
}

// ClearTaskVideoDownload clears the value of the "task_video_download" field.
func (m *QueueMutation) ClearTaskVideoDownload() {
	m.task_video_download = nil
	m.clearedFields[queue.FieldTaskVideoDownload] = struct{}{}
}

// TaskVideoDownloadCleared returns if the "task_video_download" field was cleared in this mutation.
func (m *QueueMutation) TaskVideoDownloadCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVideoDownload]
	return ok
}

// ResetTaskVideoDownload resets all changes to the "task_video_download" field.
func (m *QueueMutation) ResetTaskVideoDownload() {
	m.task_video_download = nil
	delete(m.clearedFields, queue.FieldTaskVideoDownload)
}

// SetTaskVideoConvert sets the "task_video_convert" field.
func (m *QueueMutation) SetTaskVideoConvert(us utils.TaskStatus) {
	m.task_video_convert = &us
}

// TaskVideoConvert returns the value of the "task_video_convert" field in the mutation.
func (m *QueueMutation) TaskVideoConvert() (r utils.TaskStatus, exists bool) {
	v := m.task_video_convert
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVideoConvert returns the old "task_video_convert" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVideoConvert(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVideoConvert is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVideoConvert requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVideoConvert: %w", err)
	}
	return oldValue.TaskVideoConvert, nil
}

// ClearTaskVideoConvert clears the value of the "task_video_convert" field.
func (m *QueueMutation) ClearTaskVideoConvert() {
	m.task_video_convert = nil
	m.clearedFields[queue.FieldTaskVideoConvert] = struct{}{}
}

// TaskVideoConvertCleared returns if the "task_video_convert" field was cleared in this mutation.
func (m *QueueMutation) TaskVideoConvertCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVideoConvert]
	return ok
}

// ResetTaskVideoConvert resets all changes to the "task_video_convert" field.
func (m *QueueMutation) ResetTaskVideoConvert() {
	m.task_video_convert = nil
	delete(m.clearedFields, queue.FieldTaskVideoConvert)
}

// SetTaskVideoMove sets the "task_video_move" field.
func (m *QueueMutation) SetTaskVideoMove(us utils.TaskStatus) {
	m.task_video_move = &us
}

// TaskVideoMove returns the value of the "task_video_move" field in the mutation.
func (m *QueueMutation) TaskVideoMove() (r utils.TaskStatus, exists bool) {
	v := m.task_video_move
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskVideoMove returns the old "task_video_move" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskVideoMove(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskVideoMove is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskVideoMove requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskVideoMove: %w", err)
	}
	return oldValue.TaskVideoMove, nil
}

// ClearTaskVideoMove clears the value of the "task_video_move" field.
func (m *QueueMutation) ClearTaskVideoMove() {
	m.task_video_move = nil
	m.clearedFields[queue.FieldTaskVideoMove] = struct{}{}
}

// TaskVideoMoveCleared returns if the "task_video_move" field was cleared in this mutation.
func (m *QueueMutation) TaskVideoMoveCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskVideoMove]
	return ok
}

// ResetTaskVideoMove resets all changes to the "task_video_move" field.
func (m *QueueMutation) ResetTaskVideoMove() {
	m.task_video_move = nil
	delete(m.clearedFields, queue.FieldTaskVideoMove)
}

// SetTaskChatDownload sets the "task_chat_download" field.
func (m *QueueMutation) SetTaskChatDownload(us utils.TaskStatus) {
	m.task_chat_download = &us
}

// TaskChatDownload returns the value of the "task_chat_download" field in the mutation.
func (m *QueueMutation) TaskChatDownload() (r utils.TaskStatus, exists bool) {
	v := m.task_chat_download
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskChatDownload returns the old "task_chat_download" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskChatDownload(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskChatDownload is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskChatDownload requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskChatDownload: %w", err)
	}
	return oldValue.TaskChatDownload, nil
}

// ClearTaskChatDownload clears the value of the "task_chat_download" field.
func (m *QueueMutation) ClearTaskChatDownload() {
	m.task_chat_download = nil
	m.clearedFields[queue.FieldTaskChatDownload] = struct{}{}
}

// TaskChatDownloadCleared returns if the "task_chat_download" field was cleared in this mutation.
func (m *QueueMutation) TaskChatDownloadCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskChatDownload]
	return ok
}

// ResetTaskChatDownload resets all changes to the "task_chat_download" field.
func (m *QueueMutation) ResetTaskChatDownload() {
	m.task_chat_download = nil
	delete(m.clearedFields, queue.FieldTaskChatDownload)
}

// SetTaskChatRender sets the "task_chat_render" field.
func (m *QueueMutation) SetTaskChatRender(us utils.TaskStatus) {
	m.task_chat_render = &us
}

// TaskChatRender returns the value of the "task_chat_render" field in the mutation.
func (m *QueueMutation) TaskChatRender() (r utils.TaskStatus, exists bool) {
	v := m.task_chat_render
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskChatRender returns the old "task_chat_render" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskChatRender(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskChatRender is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskChatRender requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskChatRender: %w", err)
	}
	return oldValue.TaskChatRender, nil
}

// ClearTaskChatRender clears the value of the "task_chat_render" field.
func (m *QueueMutation) ClearTaskChatRender() {
	m.task_chat_render = nil
	m.clearedFields[queue.FieldTaskChatRender] = struct{}{}
}

// TaskChatRenderCleared returns if the "task_chat_render" field was cleared in this mutation.
func (m *QueueMutation) TaskChatRenderCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskChatRender]
	return ok
}

// ResetTaskChatRender resets all changes to the "task_chat_render" field.
func (m *QueueMutation) ResetTaskChatRender() {
	m.task_chat_render = nil
	delete(m.clearedFields, queue.FieldTaskChatRender)
}

// SetTaskChatMove sets the "task_chat_move" field.
func (m *QueueMutation) SetTaskChatMove(us utils.TaskStatus) {
	m.task_chat_move = &us
}

// TaskChatMove returns the value of the "task_chat_move" field in the mutation.
func (m *QueueMutation) TaskChatMove() (r utils.TaskStatus, exists bool) {
	v := m.task_chat_move
	if v == nil {
		return
	}
	return *v, true
}

// OldTaskChatMove returns the old "task_chat_move" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldTaskChatMove(ctx context.Context) (v utils.TaskStatus, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTaskChatMove is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTaskChatMove requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTaskChatMove: %w", err)
	}
	return oldValue.TaskChatMove, nil
}

// ClearTaskChatMove clears the value of the "task_chat_move" field.
func (m *QueueMutation) ClearTaskChatMove() {
	m.task_chat_move = nil
	m.clearedFields[queue.FieldTaskChatMove] = struct{}{}
}

// TaskChatMoveCleared returns if the "task_chat_move" field was cleared in this mutation.
func (m *QueueMutation) TaskChatMoveCleared() bool {
	_, ok := m.clearedFields[queue.FieldTaskChatMove]
	return ok
}

// ResetTaskChatMove resets all changes to the "task_chat_move" field.
func (m *QueueMutation) ResetTaskChatMove() {
	m.task_chat_move = nil
	delete(m.clearedFields, queue.FieldTaskChatMove)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *QueueMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *QueueMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *QueueMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *QueueMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *QueueMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Queue entity.
// If the Queue object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *QueueMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *QueueMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetVodID sets the "vod" edge to the Vod entity by id.
func (m *QueueMutation) SetVodID(id uuid.UUID) {
	m.vod = &id
}

// ClearVod clears the "vod" edge to the Vod entity.
func (m *QueueMutation) ClearVod() {
	m.clearedvod = true
}

// VodCleared reports if the "vod" edge to the Vod entity was cleared.
func (m *QueueMutation) VodCleared() bool {
	return m.clearedvod
}

// VodID returns the "vod" edge ID in the mutation.
func (m *QueueMutation) VodID() (id uuid.UUID, exists bool) {
	if m.vod != nil {
		return *m.vod, true
	}
	return
}

// VodIDs returns the "vod" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// VodID instead. It exists only for internal usage by the builders.
func (m *QueueMutation) VodIDs() (ids []uuid.UUID) {
	if id := m.vod; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetVod resets all changes to the "vod" edge.
func (m *QueueMutation) ResetVod() {
	m.vod = nil
	m.clearedvod = false
}

// Where appends a list predicates to the QueueMutation builder.
func (m *QueueMutation) Where(ps ...predicate.Queue) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *QueueMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Queue).
func (m *QueueMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *QueueMutation) Fields() []string {
	fields := make([]string, 0, 16)
	if m.live_archive != nil {
		fields = append(fields, queue.FieldLiveArchive)
	}
	if m.on_hold != nil {
		fields = append(fields, queue.FieldOnHold)
	}
	if m.video_processing != nil {
		fields = append(fields, queue.FieldVideoProcessing)
	}
	if m.chat_processing != nil {
		fields = append(fields, queue.FieldChatProcessing)
	}
	if m.processing != nil {
		fields = append(fields, queue.FieldProcessing)
	}
	if m.task_vod_create_folder != nil {
		fields = append(fields, queue.FieldTaskVodCreateFolder)
	}
	if m.task_vod_download_thumbnail != nil {
		fields = append(fields, queue.FieldTaskVodDownloadThumbnail)
	}
	if m.task_vod_save_info != nil {
		fields = append(fields, queue.FieldTaskVodSaveInfo)
	}
	if m.task_video_download != nil {
		fields = append(fields, queue.FieldTaskVideoDownload)
	}
	if m.task_video_convert != nil {
		fields = append(fields, queue.FieldTaskVideoConvert)
	}
	if m.task_video_move != nil {
		fields = append(fields, queue.FieldTaskVideoMove)
	}
	if m.task_chat_download != nil {
		fields = append(fields, queue.FieldTaskChatDownload)
	}
	if m.task_chat_render != nil {
		fields = append(fields, queue.FieldTaskChatRender)
	}
	if m.task_chat_move != nil {
		fields = append(fields, queue.FieldTaskChatMove)
	}
	if m.updated_at != nil {
		fields = append(fields, queue.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, queue.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *QueueMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case queue.FieldLiveArchive:
		return m.LiveArchive()
	case queue.FieldOnHold:
		return m.OnHold()
	case queue.FieldVideoProcessing:
		return m.VideoProcessing()
	case queue.FieldChatProcessing:
		return m.ChatProcessing()
	case queue.FieldProcessing:
		return m.Processing()
	case queue.FieldTaskVodCreateFolder:
		return m.TaskVodCreateFolder()
	case queue.FieldTaskVodDownloadThumbnail:
		return m.TaskVodDownloadThumbnail()
	case queue.FieldTaskVodSaveInfo:
		return m.TaskVodSaveInfo()
	case queue.FieldTaskVideoDownload:
		return m.TaskVideoDownload()
	case queue.FieldTaskVideoConvert:
		return m.TaskVideoConvert()
	case queue.FieldTaskVideoMove:
		return m.TaskVideoMove()
	case queue.FieldTaskChatDownload:
		return m.TaskChatDownload()
	case queue.FieldTaskChatRender:
		return m.TaskChatRender()
	case queue.FieldTaskChatMove:
		return m.TaskChatMove()
	case queue.FieldUpdatedAt:
		return m.UpdatedAt()
	case queue.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *QueueMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case queue.FieldLiveArchive:
		return m.OldLiveArchive(ctx)
	case queue.FieldOnHold:
		return m.OldOnHold(ctx)
	case queue.FieldVideoProcessing:
		return m.OldVideoProcessing(ctx)
	case queue.FieldChatProcessing:
		return m.OldChatProcessing(ctx)
	case queue.FieldProcessing:
		return m.OldProcessing(ctx)
	case queue.FieldTaskVodCreateFolder:
		return m.OldTaskVodCreateFolder(ctx)
	case queue.FieldTaskVodDownloadThumbnail:
		return m.OldTaskVodDownloadThumbnail(ctx)
	case queue.FieldTaskVodSaveInfo:
		return m.OldTaskVodSaveInfo(ctx)
	case queue.FieldTaskVideoDownload:
		return m.OldTaskVideoDownload(ctx)
	case queue.FieldTaskVideoConvert:
		return m.OldTaskVideoConvert(ctx)
	case queue.FieldTaskVideoMove:
		return m.OldTaskVideoMove(ctx)
	case queue.FieldTaskChatDownload:
		return m.OldTaskChatDownload(ctx)
	case queue.FieldTaskChatRender:
		return m.OldTaskChatRender(ctx)
	case queue.FieldTaskChatMove:
		return m.OldTaskChatMove(ctx)
	case queue.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case queue.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Queue field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueueMutation) SetField(name string, value ent.Value) error {
	switch name {
	case queue.FieldLiveArchive:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetLiveArchive(v)
		return nil
	case queue.FieldOnHold:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetOnHold(v)
		return nil
	case queue.FieldVideoProcessing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoProcessing(v)
		return nil
	case queue.FieldChatProcessing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatProcessing(v)
		return nil
	case queue.FieldProcessing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessing(v)
		return nil
	case queue.FieldTaskVodCreateFolder:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVodCreateFolder(v)
		return nil
	case queue.FieldTaskVodDownloadThumbnail:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVodDownloadThumbnail(v)
		return nil
	case queue.FieldTaskVodSaveInfo:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVodSaveInfo(v)
		return nil
	case queue.FieldTaskVideoDownload:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVideoDownload(v)
		return nil
	case queue.FieldTaskVideoConvert:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVideoConvert(v)
		return nil
	case queue.FieldTaskVideoMove:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskVideoMove(v)
		return nil
	case queue.FieldTaskChatDownload:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskChatDownload(v)
		return nil
	case queue.FieldTaskChatRender:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskChatRender(v)
		return nil
	case queue.FieldTaskChatMove:
		v, ok := value.(utils.TaskStatus)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTaskChatMove(v)
		return nil
	case queue.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case queue.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Queue field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *QueueMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *QueueMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *QueueMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown Queue numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *QueueMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(queue.FieldTaskVodCreateFolder) {
		fields = append(fields, queue.FieldTaskVodCreateFolder)
	}
	if m.FieldCleared(queue.FieldTaskVodDownloadThumbnail) {
		fields = append(fields, queue.FieldTaskVodDownloadThumbnail)
	}
	if m.FieldCleared(queue.FieldTaskVodSaveInfo) {
		fields = append(fields, queue.FieldTaskVodSaveInfo)
	}
	if m.FieldCleared(queue.FieldTaskVideoDownload) {
		fields = append(fields, queue.FieldTaskVideoDownload)
	}
	if m.FieldCleared(queue.FieldTaskVideoConvert) {
		fields = append(fields, queue.FieldTaskVideoConvert)
	}
	if m.FieldCleared(queue.FieldTaskVideoMove) {
		fields = append(fields, queue.FieldTaskVideoMove)
	}
	if m.FieldCleared(queue.FieldTaskChatDownload) {
		fields = append(fields, queue.FieldTaskChatDownload)
	}
	if m.FieldCleared(queue.FieldTaskChatRender) {
		fields = append(fields, queue.FieldTaskChatRender)
	}
	if m.FieldCleared(queue.FieldTaskChatMove) {
		fields = append(fields, queue.FieldTaskChatMove)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *QueueMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *QueueMutation) ClearField(name string) error {
	switch name {
	case queue.FieldTaskVodCreateFolder:
		m.ClearTaskVodCreateFolder()
		return nil
	case queue.FieldTaskVodDownloadThumbnail:
		m.ClearTaskVodDownloadThumbnail()
		return nil
	case queue.FieldTaskVodSaveInfo:
		m.ClearTaskVodSaveInfo()
		return nil
	case queue.FieldTaskVideoDownload:
		m.ClearTaskVideoDownload()
		return nil
	case queue.FieldTaskVideoConvert:
		m.ClearTaskVideoConvert()
		return nil
	case queue.FieldTaskVideoMove:
		m.ClearTaskVideoMove()
		return nil
	case queue.FieldTaskChatDownload:
		m.ClearTaskChatDownload()
		return nil
	case queue.FieldTaskChatRender:
		m.ClearTaskChatRender()
		return nil
	case queue.FieldTaskChatMove:
		m.ClearTaskChatMove()
		return nil
	}
	return fmt.Errorf("unknown Queue nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *QueueMutation) ResetField(name string) error {
	switch name {
	case queue.FieldLiveArchive:
		m.ResetLiveArchive()
		return nil
	case queue.FieldOnHold:
		m.ResetOnHold()
		return nil
	case queue.FieldVideoProcessing:
		m.ResetVideoProcessing()
		return nil
	case queue.FieldChatProcessing:
		m.ResetChatProcessing()
		return nil
	case queue.FieldProcessing:
		m.ResetProcessing()
		return nil
	case queue.FieldTaskVodCreateFolder:
		m.ResetTaskVodCreateFolder()
		return nil
	case queue.FieldTaskVodDownloadThumbnail:
		m.ResetTaskVodDownloadThumbnail()
		return nil
	case queue.FieldTaskVodSaveInfo:
		m.ResetTaskVodSaveInfo()
		return nil
	case queue.FieldTaskVideoDownload:
		m.ResetTaskVideoDownload()
		return nil
	case queue.FieldTaskVideoConvert:
		m.ResetTaskVideoConvert()
		return nil
	case queue.FieldTaskVideoMove:
		m.ResetTaskVideoMove()
		return nil
	case queue.FieldTaskChatDownload:
		m.ResetTaskChatDownload()
		return nil
	case queue.FieldTaskChatRender:
		m.ResetTaskChatRender()
		return nil
	case queue.FieldTaskChatMove:
		m.ResetTaskChatMove()
		return nil
	case queue.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case queue.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Queue field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *QueueMutation) AddedEdges() []string {
	edges := make([]string, 0, 1)
	if m.vod != nil {
		edges = append(edges, queue.EdgeVod)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *QueueMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case queue.EdgeVod:
		if id := m.vod; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *QueueMutation) RemovedEdges() []string {
	edges := make([]string, 0, 1)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *QueueMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *QueueMutation) ClearedEdges() []string {
	edges := make([]string, 0, 1)
	if m.clearedvod {
		edges = append(edges, queue.EdgeVod)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *QueueMutation) EdgeCleared(name string) bool {
	switch name {
	case queue.EdgeVod:
		return m.clearedvod
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *QueueMutation) ClearEdge(name string) error {
	switch name {
	case queue.EdgeVod:
		m.ClearVod()
		return nil
	}
	return fmt.Errorf("unknown Queue unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *QueueMutation) ResetEdge(name string) error {
	switch name {
	case queue.EdgeVod:
		m.ResetVod()
		return nil
	}
	return fmt.Errorf("unknown Queue edge %s", name)
}

// UserMutation represents an operation that mutates the User nodes in the graph.
type UserMutation struct {
	config
	op            Op
	typ           string
	id            *uuid.UUID
	username      *string
	password      *string
	role          *utils.Role
	webhook       *string
	updated_at    *time.Time
	created_at    *time.Time
	clearedFields map[string]struct{}
	done          bool
	oldValue      func(context.Context) (*User, error)
	predicates    []predicate.User
}

var _ ent.Mutation = (*UserMutation)(nil)

// userOption allows management of the mutation configuration using functional options.
type userOption func(*UserMutation)

// newUserMutation creates new mutation for the User entity.
func newUserMutation(c config, op Op, opts ...userOption) *UserMutation {
	m := &UserMutation{
		config:        c,
		op:            op,
		typ:           TypeUser,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withUserID sets the ID field of the mutation.
func withUserID(id uuid.UUID) userOption {
	return func(m *UserMutation) {
		var (
			err   error
			once  sync.Once
			value *User
		)
		m.oldValue = func(ctx context.Context) (*User, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().User.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withUser sets the old User of the mutation.
func withUser(node *User) userOption {
	return func(m *UserMutation) {
		m.oldValue = func(context.Context) (*User, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m UserMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m UserMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of User entities.
func (m *UserMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *UserMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *UserMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().User.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetUsername sets the "username" field.
func (m *UserMutation) SetUsername(s string) {
	m.username = &s
}

// Username returns the value of the "username" field in the mutation.
func (m *UserMutation) Username() (r string, exists bool) {
	v := m.username
	if v == nil {
		return
	}
	return *v, true
}

// OldUsername returns the old "username" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUsername(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUsername is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUsername requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUsername: %w", err)
	}
	return oldValue.Username, nil
}

// ResetUsername resets all changes to the "username" field.
func (m *UserMutation) ResetUsername() {
	m.username = nil
}

// SetPassword sets the "password" field.
func (m *UserMutation) SetPassword(s string) {
	m.password = &s
}

// Password returns the value of the "password" field in the mutation.
func (m *UserMutation) Password() (r string, exists bool) {
	v := m.password
	if v == nil {
		return
	}
	return *v, true
}

// OldPassword returns the old "password" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldPassword(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPassword is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPassword requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPassword: %w", err)
	}
	return oldValue.Password, nil
}

// ResetPassword resets all changes to the "password" field.
func (m *UserMutation) ResetPassword() {
	m.password = nil
}

// SetRole sets the "role" field.
func (m *UserMutation) SetRole(u utils.Role) {
	m.role = &u
}

// Role returns the value of the "role" field in the mutation.
func (m *UserMutation) Role() (r utils.Role, exists bool) {
	v := m.role
	if v == nil {
		return
	}
	return *v, true
}

// OldRole returns the old "role" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldRole(ctx context.Context) (v utils.Role, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldRole is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldRole requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldRole: %w", err)
	}
	return oldValue.Role, nil
}

// ResetRole resets all changes to the "role" field.
func (m *UserMutation) ResetRole() {
	m.role = nil
}

// SetWebhook sets the "webhook" field.
func (m *UserMutation) SetWebhook(s string) {
	m.webhook = &s
}

// Webhook returns the value of the "webhook" field in the mutation.
func (m *UserMutation) Webhook() (r string, exists bool) {
	v := m.webhook
	if v == nil {
		return
	}
	return *v, true
}

// OldWebhook returns the old "webhook" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldWebhook(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebhook is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebhook requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebhook: %w", err)
	}
	return oldValue.Webhook, nil
}

// ClearWebhook clears the value of the "webhook" field.
func (m *UserMutation) ClearWebhook() {
	m.webhook = nil
	m.clearedFields[user.FieldWebhook] = struct{}{}
}

// WebhookCleared returns if the "webhook" field was cleared in this mutation.
func (m *UserMutation) WebhookCleared() bool {
	_, ok := m.clearedFields[user.FieldWebhook]
	return ok
}

// ResetWebhook resets all changes to the "webhook" field.
func (m *UserMutation) ResetWebhook() {
	m.webhook = nil
	delete(m.clearedFields, user.FieldWebhook)
}

// SetUpdatedAt sets the "updated_at" field.
func (m *UserMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *UserMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *UserMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *UserMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *UserMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the User entity.
// If the User object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *UserMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *UserMutation) ResetCreatedAt() {
	m.created_at = nil
}

// Where appends a list predicates to the UserMutation builder.
func (m *UserMutation) Where(ps ...predicate.User) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *UserMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (User).
func (m *UserMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *UserMutation) Fields() []string {
	fields := make([]string, 0, 6)
	if m.username != nil {
		fields = append(fields, user.FieldUsername)
	}
	if m.password != nil {
		fields = append(fields, user.FieldPassword)
	}
	if m.role != nil {
		fields = append(fields, user.FieldRole)
	}
	if m.webhook != nil {
		fields = append(fields, user.FieldWebhook)
	}
	if m.updated_at != nil {
		fields = append(fields, user.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, user.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *UserMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case user.FieldUsername:
		return m.Username()
	case user.FieldPassword:
		return m.Password()
	case user.FieldRole:
		return m.Role()
	case user.FieldWebhook:
		return m.Webhook()
	case user.FieldUpdatedAt:
		return m.UpdatedAt()
	case user.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *UserMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case user.FieldUsername:
		return m.OldUsername(ctx)
	case user.FieldPassword:
		return m.OldPassword(ctx)
	case user.FieldRole:
		return m.OldRole(ctx)
	case user.FieldWebhook:
		return m.OldWebhook(ctx)
	case user.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case user.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown User field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) SetField(name string, value ent.Value) error {
	switch name {
	case user.FieldUsername:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUsername(v)
		return nil
	case user.FieldPassword:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPassword(v)
		return nil
	case user.FieldRole:
		v, ok := value.(utils.Role)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetRole(v)
		return nil
	case user.FieldWebhook:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebhook(v)
		return nil
	case user.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case user.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *UserMutation) AddedFields() []string {
	return nil
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *UserMutation) AddedField(name string) (ent.Value, bool) {
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *UserMutation) AddField(name string, value ent.Value) error {
	switch name {
	}
	return fmt.Errorf("unknown User numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *UserMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(user.FieldWebhook) {
		fields = append(fields, user.FieldWebhook)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *UserMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *UserMutation) ClearField(name string) error {
	switch name {
	case user.FieldWebhook:
		m.ClearWebhook()
		return nil
	}
	return fmt.Errorf("unknown User nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *UserMutation) ResetField(name string) error {
	switch name {
	case user.FieldUsername:
		m.ResetUsername()
		return nil
	case user.FieldPassword:
		m.ResetPassword()
		return nil
	case user.FieldRole:
		m.ResetRole()
		return nil
	case user.FieldWebhook:
		m.ResetWebhook()
		return nil
	case user.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case user.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown User field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *UserMutation) AddedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *UserMutation) AddedIDs(name string) []ent.Value {
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *UserMutation) RemovedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *UserMutation) RemovedIDs(name string) []ent.Value {
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *UserMutation) ClearedEdges() []string {
	edges := make([]string, 0, 0)
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *UserMutation) EdgeCleared(name string) bool {
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *UserMutation) ClearEdge(name string) error {
	return fmt.Errorf("unknown User unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *UserMutation) ResetEdge(name string) error {
	return fmt.Errorf("unknown User edge %s", name)
}

// VodMutation represents an operation that mutates the Vod nodes in the graph.
type VodMutation struct {
	config
	op                 Op
	typ                string
	id                 *uuid.UUID
	ext_id             *string
	platform           *utils.VodPlatform
	_type              *utils.VodType
	title              *string
	duration           *int
	addduration        *int
	views              *int
	addviews           *int
	resolution         *string
	processing         *bool
	thumbnail_path     *string
	web_thumbnail_path *string
	video_path         *string
	chat_path          *string
	chat_video_path    *string
	info_path          *string
	streamed_at        *time.Time
	updated_at         *time.Time
	created_at         *time.Time
	clearedFields      map[string]struct{}
	channel            *uuid.UUID
	clearedchannel     bool
	queue              *uuid.UUID
	clearedqueue       bool
	done               bool
	oldValue           func(context.Context) (*Vod, error)
	predicates         []predicate.Vod
}

var _ ent.Mutation = (*VodMutation)(nil)

// vodOption allows management of the mutation configuration using functional options.
type vodOption func(*VodMutation)

// newVodMutation creates new mutation for the Vod entity.
func newVodMutation(c config, op Op, opts ...vodOption) *VodMutation {
	m := &VodMutation{
		config:        c,
		op:            op,
		typ:           TypeVod,
		clearedFields: make(map[string]struct{}),
	}
	for _, opt := range opts {
		opt(m)
	}
	return m
}

// withVodID sets the ID field of the mutation.
func withVodID(id uuid.UUID) vodOption {
	return func(m *VodMutation) {
		var (
			err   error
			once  sync.Once
			value *Vod
		)
		m.oldValue = func(ctx context.Context) (*Vod, error) {
			once.Do(func() {
				if m.done {
					err = errors.New("querying old values post mutation is not allowed")
				} else {
					value, err = m.Client().Vod.Get(ctx, id)
				}
			})
			return value, err
		}
		m.id = &id
	}
}

// withVod sets the old Vod of the mutation.
func withVod(node *Vod) vodOption {
	return func(m *VodMutation) {
		m.oldValue = func(context.Context) (*Vod, error) {
			return node, nil
		}
		m.id = &node.ID
	}
}

// Client returns a new `ent.Client` from the mutation. If the mutation was
// executed in a transaction (ent.Tx), a transactional client is returned.
func (m VodMutation) Client() *Client {
	client := &Client{config: m.config}
	client.init()
	return client
}

// Tx returns an `ent.Tx` for mutations that were executed in transactions;
// it returns an error otherwise.
func (m VodMutation) Tx() (*Tx, error) {
	if _, ok := m.driver.(*txDriver); !ok {
		return nil, errors.New("ent: mutation is not running in a transaction")
	}
	tx := &Tx{config: m.config}
	tx.init()
	return tx, nil
}

// SetID sets the value of the id field. Note that this
// operation is only accepted on creation of Vod entities.
func (m *VodMutation) SetID(id uuid.UUID) {
	m.id = &id
}

// ID returns the ID value in the mutation. Note that the ID is only available
// if it was provided to the builder or after it was returned from the database.
func (m *VodMutation) ID() (id uuid.UUID, exists bool) {
	if m.id == nil {
		return
	}
	return *m.id, true
}

// IDs queries the database and returns the entity ids that match the mutation's predicate.
// That means, if the mutation is applied within a transaction with an isolation level such
// as sql.LevelSerializable, the returned ids match the ids of the rows that will be updated
// or updated by the mutation.
func (m *VodMutation) IDs(ctx context.Context) ([]uuid.UUID, error) {
	switch {
	case m.op.Is(OpUpdateOne | OpDeleteOne):
		id, exists := m.ID()
		if exists {
			return []uuid.UUID{id}, nil
		}
		fallthrough
	case m.op.Is(OpUpdate | OpDelete):
		return m.Client().Vod.Query().Where(m.predicates...).IDs(ctx)
	default:
		return nil, fmt.Errorf("IDs is not allowed on %s operations", m.op)
	}
}

// SetExtID sets the "ext_id" field.
func (m *VodMutation) SetExtID(s string) {
	m.ext_id = &s
}

// ExtID returns the value of the "ext_id" field in the mutation.
func (m *VodMutation) ExtID() (r string, exists bool) {
	v := m.ext_id
	if v == nil {
		return
	}
	return *v, true
}

// OldExtID returns the old "ext_id" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldExtID(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldExtID is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldExtID requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldExtID: %w", err)
	}
	return oldValue.ExtID, nil
}

// ResetExtID resets all changes to the "ext_id" field.
func (m *VodMutation) ResetExtID() {
	m.ext_id = nil
}

// SetPlatform sets the "platform" field.
func (m *VodMutation) SetPlatform(up utils.VodPlatform) {
	m.platform = &up
}

// Platform returns the value of the "platform" field in the mutation.
func (m *VodMutation) Platform() (r utils.VodPlatform, exists bool) {
	v := m.platform
	if v == nil {
		return
	}
	return *v, true
}

// OldPlatform returns the old "platform" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldPlatform(ctx context.Context) (v utils.VodPlatform, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldPlatform is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldPlatform requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldPlatform: %w", err)
	}
	return oldValue.Platform, nil
}

// ResetPlatform resets all changes to the "platform" field.
func (m *VodMutation) ResetPlatform() {
	m.platform = nil
}

// SetType sets the "type" field.
func (m *VodMutation) SetType(ut utils.VodType) {
	m._type = &ut
}

// GetType returns the value of the "type" field in the mutation.
func (m *VodMutation) GetType() (r utils.VodType, exists bool) {
	v := m._type
	if v == nil {
		return
	}
	return *v, true
}

// OldType returns the old "type" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldType(ctx context.Context) (v utils.VodType, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldType is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldType requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldType: %w", err)
	}
	return oldValue.Type, nil
}

// ResetType resets all changes to the "type" field.
func (m *VodMutation) ResetType() {
	m._type = nil
}

// SetTitle sets the "title" field.
func (m *VodMutation) SetTitle(s string) {
	m.title = &s
}

// Title returns the value of the "title" field in the mutation.
func (m *VodMutation) Title() (r string, exists bool) {
	v := m.title
	if v == nil {
		return
	}
	return *v, true
}

// OldTitle returns the old "title" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldTitle(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldTitle is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldTitle requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldTitle: %w", err)
	}
	return oldValue.Title, nil
}

// ResetTitle resets all changes to the "title" field.
func (m *VodMutation) ResetTitle() {
	m.title = nil
}

// SetDuration sets the "duration" field.
func (m *VodMutation) SetDuration(i int) {
	m.duration = &i
	m.addduration = nil
}

// Duration returns the value of the "duration" field in the mutation.
func (m *VodMutation) Duration() (r int, exists bool) {
	v := m.duration
	if v == nil {
		return
	}
	return *v, true
}

// OldDuration returns the old "duration" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldDuration(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldDuration is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldDuration requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldDuration: %w", err)
	}
	return oldValue.Duration, nil
}

// AddDuration adds i to the "duration" field.
func (m *VodMutation) AddDuration(i int) {
	if m.addduration != nil {
		*m.addduration += i
	} else {
		m.addduration = &i
	}
}

// AddedDuration returns the value that was added to the "duration" field in this mutation.
func (m *VodMutation) AddedDuration() (r int, exists bool) {
	v := m.addduration
	if v == nil {
		return
	}
	return *v, true
}

// ResetDuration resets all changes to the "duration" field.
func (m *VodMutation) ResetDuration() {
	m.duration = nil
	m.addduration = nil
}

// SetViews sets the "views" field.
func (m *VodMutation) SetViews(i int) {
	m.views = &i
	m.addviews = nil
}

// Views returns the value of the "views" field in the mutation.
func (m *VodMutation) Views() (r int, exists bool) {
	v := m.views
	if v == nil {
		return
	}
	return *v, true
}

// OldViews returns the old "views" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldViews(ctx context.Context) (v int, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldViews is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldViews requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldViews: %w", err)
	}
	return oldValue.Views, nil
}

// AddViews adds i to the "views" field.
func (m *VodMutation) AddViews(i int) {
	if m.addviews != nil {
		*m.addviews += i
	} else {
		m.addviews = &i
	}
}

// AddedViews returns the value that was added to the "views" field in this mutation.
func (m *VodMutation) AddedViews() (r int, exists bool) {
	v := m.addviews
	if v == nil {
		return
	}
	return *v, true
}

// ResetViews resets all changes to the "views" field.
func (m *VodMutation) ResetViews() {
	m.views = nil
	m.addviews = nil
}

// SetResolution sets the "resolution" field.
func (m *VodMutation) SetResolution(s string) {
	m.resolution = &s
}

// Resolution returns the value of the "resolution" field in the mutation.
func (m *VodMutation) Resolution() (r string, exists bool) {
	v := m.resolution
	if v == nil {
		return
	}
	return *v, true
}

// OldResolution returns the old "resolution" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldResolution(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldResolution is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldResolution requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldResolution: %w", err)
	}
	return oldValue.Resolution, nil
}

// ClearResolution clears the value of the "resolution" field.
func (m *VodMutation) ClearResolution() {
	m.resolution = nil
	m.clearedFields[vod.FieldResolution] = struct{}{}
}

// ResolutionCleared returns if the "resolution" field was cleared in this mutation.
func (m *VodMutation) ResolutionCleared() bool {
	_, ok := m.clearedFields[vod.FieldResolution]
	return ok
}

// ResetResolution resets all changes to the "resolution" field.
func (m *VodMutation) ResetResolution() {
	m.resolution = nil
	delete(m.clearedFields, vod.FieldResolution)
}

// SetProcessing sets the "processing" field.
func (m *VodMutation) SetProcessing(b bool) {
	m.processing = &b
}

// Processing returns the value of the "processing" field in the mutation.
func (m *VodMutation) Processing() (r bool, exists bool) {
	v := m.processing
	if v == nil {
		return
	}
	return *v, true
}

// OldProcessing returns the old "processing" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldProcessing(ctx context.Context) (v bool, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldProcessing is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldProcessing requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldProcessing: %w", err)
	}
	return oldValue.Processing, nil
}

// ResetProcessing resets all changes to the "processing" field.
func (m *VodMutation) ResetProcessing() {
	m.processing = nil
}

// SetThumbnailPath sets the "thumbnail_path" field.
func (m *VodMutation) SetThumbnailPath(s string) {
	m.thumbnail_path = &s
}

// ThumbnailPath returns the value of the "thumbnail_path" field in the mutation.
func (m *VodMutation) ThumbnailPath() (r string, exists bool) {
	v := m.thumbnail_path
	if v == nil {
		return
	}
	return *v, true
}

// OldThumbnailPath returns the old "thumbnail_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldThumbnailPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldThumbnailPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldThumbnailPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldThumbnailPath: %w", err)
	}
	return oldValue.ThumbnailPath, nil
}

// ClearThumbnailPath clears the value of the "thumbnail_path" field.
func (m *VodMutation) ClearThumbnailPath() {
	m.thumbnail_path = nil
	m.clearedFields[vod.FieldThumbnailPath] = struct{}{}
}

// ThumbnailPathCleared returns if the "thumbnail_path" field was cleared in this mutation.
func (m *VodMutation) ThumbnailPathCleared() bool {
	_, ok := m.clearedFields[vod.FieldThumbnailPath]
	return ok
}

// ResetThumbnailPath resets all changes to the "thumbnail_path" field.
func (m *VodMutation) ResetThumbnailPath() {
	m.thumbnail_path = nil
	delete(m.clearedFields, vod.FieldThumbnailPath)
}

// SetWebThumbnailPath sets the "web_thumbnail_path" field.
func (m *VodMutation) SetWebThumbnailPath(s string) {
	m.web_thumbnail_path = &s
}

// WebThumbnailPath returns the value of the "web_thumbnail_path" field in the mutation.
func (m *VodMutation) WebThumbnailPath() (r string, exists bool) {
	v := m.web_thumbnail_path
	if v == nil {
		return
	}
	return *v, true
}

// OldWebThumbnailPath returns the old "web_thumbnail_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldWebThumbnailPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldWebThumbnailPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldWebThumbnailPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldWebThumbnailPath: %w", err)
	}
	return oldValue.WebThumbnailPath, nil
}

// ResetWebThumbnailPath resets all changes to the "web_thumbnail_path" field.
func (m *VodMutation) ResetWebThumbnailPath() {
	m.web_thumbnail_path = nil
}

// SetVideoPath sets the "video_path" field.
func (m *VodMutation) SetVideoPath(s string) {
	m.video_path = &s
}

// VideoPath returns the value of the "video_path" field in the mutation.
func (m *VodMutation) VideoPath() (r string, exists bool) {
	v := m.video_path
	if v == nil {
		return
	}
	return *v, true
}

// OldVideoPath returns the old "video_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldVideoPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldVideoPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldVideoPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldVideoPath: %w", err)
	}
	return oldValue.VideoPath, nil
}

// ResetVideoPath resets all changes to the "video_path" field.
func (m *VodMutation) ResetVideoPath() {
	m.video_path = nil
}

// SetChatPath sets the "chat_path" field.
func (m *VodMutation) SetChatPath(s string) {
	m.chat_path = &s
}

// ChatPath returns the value of the "chat_path" field in the mutation.
func (m *VodMutation) ChatPath() (r string, exists bool) {
	v := m.chat_path
	if v == nil {
		return
	}
	return *v, true
}

// OldChatPath returns the old "chat_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldChatPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatPath: %w", err)
	}
	return oldValue.ChatPath, nil
}

// ClearChatPath clears the value of the "chat_path" field.
func (m *VodMutation) ClearChatPath() {
	m.chat_path = nil
	m.clearedFields[vod.FieldChatPath] = struct{}{}
}

// ChatPathCleared returns if the "chat_path" field was cleared in this mutation.
func (m *VodMutation) ChatPathCleared() bool {
	_, ok := m.clearedFields[vod.FieldChatPath]
	return ok
}

// ResetChatPath resets all changes to the "chat_path" field.
func (m *VodMutation) ResetChatPath() {
	m.chat_path = nil
	delete(m.clearedFields, vod.FieldChatPath)
}

// SetChatVideoPath sets the "chat_video_path" field.
func (m *VodMutation) SetChatVideoPath(s string) {
	m.chat_video_path = &s
}

// ChatVideoPath returns the value of the "chat_video_path" field in the mutation.
func (m *VodMutation) ChatVideoPath() (r string, exists bool) {
	v := m.chat_video_path
	if v == nil {
		return
	}
	return *v, true
}

// OldChatVideoPath returns the old "chat_video_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldChatVideoPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldChatVideoPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldChatVideoPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldChatVideoPath: %w", err)
	}
	return oldValue.ChatVideoPath, nil
}

// ClearChatVideoPath clears the value of the "chat_video_path" field.
func (m *VodMutation) ClearChatVideoPath() {
	m.chat_video_path = nil
	m.clearedFields[vod.FieldChatVideoPath] = struct{}{}
}

// ChatVideoPathCleared returns if the "chat_video_path" field was cleared in this mutation.
func (m *VodMutation) ChatVideoPathCleared() bool {
	_, ok := m.clearedFields[vod.FieldChatVideoPath]
	return ok
}

// ResetChatVideoPath resets all changes to the "chat_video_path" field.
func (m *VodMutation) ResetChatVideoPath() {
	m.chat_video_path = nil
	delete(m.clearedFields, vod.FieldChatVideoPath)
}

// SetInfoPath sets the "info_path" field.
func (m *VodMutation) SetInfoPath(s string) {
	m.info_path = &s
}

// InfoPath returns the value of the "info_path" field in the mutation.
func (m *VodMutation) InfoPath() (r string, exists bool) {
	v := m.info_path
	if v == nil {
		return
	}
	return *v, true
}

// OldInfoPath returns the old "info_path" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldInfoPath(ctx context.Context) (v string, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldInfoPath is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldInfoPath requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldInfoPath: %w", err)
	}
	return oldValue.InfoPath, nil
}

// ClearInfoPath clears the value of the "info_path" field.
func (m *VodMutation) ClearInfoPath() {
	m.info_path = nil
	m.clearedFields[vod.FieldInfoPath] = struct{}{}
}

// InfoPathCleared returns if the "info_path" field was cleared in this mutation.
func (m *VodMutation) InfoPathCleared() bool {
	_, ok := m.clearedFields[vod.FieldInfoPath]
	return ok
}

// ResetInfoPath resets all changes to the "info_path" field.
func (m *VodMutation) ResetInfoPath() {
	m.info_path = nil
	delete(m.clearedFields, vod.FieldInfoPath)
}

// SetStreamedAt sets the "streamed_at" field.
func (m *VodMutation) SetStreamedAt(t time.Time) {
	m.streamed_at = &t
}

// StreamedAt returns the value of the "streamed_at" field in the mutation.
func (m *VodMutation) StreamedAt() (r time.Time, exists bool) {
	v := m.streamed_at
	if v == nil {
		return
	}
	return *v, true
}

// OldStreamedAt returns the old "streamed_at" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldStreamedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldStreamedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldStreamedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldStreamedAt: %w", err)
	}
	return oldValue.StreamedAt, nil
}

// ResetStreamedAt resets all changes to the "streamed_at" field.
func (m *VodMutation) ResetStreamedAt() {
	m.streamed_at = nil
}

// SetUpdatedAt sets the "updated_at" field.
func (m *VodMutation) SetUpdatedAt(t time.Time) {
	m.updated_at = &t
}

// UpdatedAt returns the value of the "updated_at" field in the mutation.
func (m *VodMutation) UpdatedAt() (r time.Time, exists bool) {
	v := m.updated_at
	if v == nil {
		return
	}
	return *v, true
}

// OldUpdatedAt returns the old "updated_at" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldUpdatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldUpdatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldUpdatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldUpdatedAt: %w", err)
	}
	return oldValue.UpdatedAt, nil
}

// ResetUpdatedAt resets all changes to the "updated_at" field.
func (m *VodMutation) ResetUpdatedAt() {
	m.updated_at = nil
}

// SetCreatedAt sets the "created_at" field.
func (m *VodMutation) SetCreatedAt(t time.Time) {
	m.created_at = &t
}

// CreatedAt returns the value of the "created_at" field in the mutation.
func (m *VodMutation) CreatedAt() (r time.Time, exists bool) {
	v := m.created_at
	if v == nil {
		return
	}
	return *v, true
}

// OldCreatedAt returns the old "created_at" field's value of the Vod entity.
// If the Vod object wasn't provided to the builder, the object is fetched from the database.
// An error is returned if the mutation operation is not UpdateOne, or the database query fails.
func (m *VodMutation) OldCreatedAt(ctx context.Context) (v time.Time, err error) {
	if !m.op.Is(OpUpdateOne) {
		return v, errors.New("OldCreatedAt is only allowed on UpdateOne operations")
	}
	if m.id == nil || m.oldValue == nil {
		return v, errors.New("OldCreatedAt requires an ID field in the mutation")
	}
	oldValue, err := m.oldValue(ctx)
	if err != nil {
		return v, fmt.Errorf("querying old value for OldCreatedAt: %w", err)
	}
	return oldValue.CreatedAt, nil
}

// ResetCreatedAt resets all changes to the "created_at" field.
func (m *VodMutation) ResetCreatedAt() {
	m.created_at = nil
}

// SetChannelID sets the "channel" edge to the Channel entity by id.
func (m *VodMutation) SetChannelID(id uuid.UUID) {
	m.channel = &id
}

// ClearChannel clears the "channel" edge to the Channel entity.
func (m *VodMutation) ClearChannel() {
	m.clearedchannel = true
}

// ChannelCleared reports if the "channel" edge to the Channel entity was cleared.
func (m *VodMutation) ChannelCleared() bool {
	return m.clearedchannel
}

// ChannelID returns the "channel" edge ID in the mutation.
func (m *VodMutation) ChannelID() (id uuid.UUID, exists bool) {
	if m.channel != nil {
		return *m.channel, true
	}
	return
}

// ChannelIDs returns the "channel" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// ChannelID instead. It exists only for internal usage by the builders.
func (m *VodMutation) ChannelIDs() (ids []uuid.UUID) {
	if id := m.channel; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetChannel resets all changes to the "channel" edge.
func (m *VodMutation) ResetChannel() {
	m.channel = nil
	m.clearedchannel = false
}

// SetQueueID sets the "queue" edge to the Queue entity by id.
func (m *VodMutation) SetQueueID(id uuid.UUID) {
	m.queue = &id
}

// ClearQueue clears the "queue" edge to the Queue entity.
func (m *VodMutation) ClearQueue() {
	m.clearedqueue = true
}

// QueueCleared reports if the "queue" edge to the Queue entity was cleared.
func (m *VodMutation) QueueCleared() bool {
	return m.clearedqueue
}

// QueueID returns the "queue" edge ID in the mutation.
func (m *VodMutation) QueueID() (id uuid.UUID, exists bool) {
	if m.queue != nil {
		return *m.queue, true
	}
	return
}

// QueueIDs returns the "queue" edge IDs in the mutation.
// Note that IDs always returns len(IDs) <= 1 for unique edges, and you should use
// QueueID instead. It exists only for internal usage by the builders.
func (m *VodMutation) QueueIDs() (ids []uuid.UUID) {
	if id := m.queue; id != nil {
		ids = append(ids, *id)
	}
	return
}

// ResetQueue resets all changes to the "queue" edge.
func (m *VodMutation) ResetQueue() {
	m.queue = nil
	m.clearedqueue = false
}

// Where appends a list predicates to the VodMutation builder.
func (m *VodMutation) Where(ps ...predicate.Vod) {
	m.predicates = append(m.predicates, ps...)
}

// Op returns the operation name.
func (m *VodMutation) Op() Op {
	return m.op
}

// Type returns the node type of this mutation (Vod).
func (m *VodMutation) Type() string {
	return m.typ
}

// Fields returns all fields that were changed during this mutation. Note that in
// order to get all numeric fields that were incremented/decremented, call
// AddedFields().
func (m *VodMutation) Fields() []string {
	fields := make([]string, 0, 17)
	if m.ext_id != nil {
		fields = append(fields, vod.FieldExtID)
	}
	if m.platform != nil {
		fields = append(fields, vod.FieldPlatform)
	}
	if m._type != nil {
		fields = append(fields, vod.FieldType)
	}
	if m.title != nil {
		fields = append(fields, vod.FieldTitle)
	}
	if m.duration != nil {
		fields = append(fields, vod.FieldDuration)
	}
	if m.views != nil {
		fields = append(fields, vod.FieldViews)
	}
	if m.resolution != nil {
		fields = append(fields, vod.FieldResolution)
	}
	if m.processing != nil {
		fields = append(fields, vod.FieldProcessing)
	}
	if m.thumbnail_path != nil {
		fields = append(fields, vod.FieldThumbnailPath)
	}
	if m.web_thumbnail_path != nil {
		fields = append(fields, vod.FieldWebThumbnailPath)
	}
	if m.video_path != nil {
		fields = append(fields, vod.FieldVideoPath)
	}
	if m.chat_path != nil {
		fields = append(fields, vod.FieldChatPath)
	}
	if m.chat_video_path != nil {
		fields = append(fields, vod.FieldChatVideoPath)
	}
	if m.info_path != nil {
		fields = append(fields, vod.FieldInfoPath)
	}
	if m.streamed_at != nil {
		fields = append(fields, vod.FieldStreamedAt)
	}
	if m.updated_at != nil {
		fields = append(fields, vod.FieldUpdatedAt)
	}
	if m.created_at != nil {
		fields = append(fields, vod.FieldCreatedAt)
	}
	return fields
}

// Field returns the value of a field with the given name. The second boolean
// return value indicates that this field was not set, or was not defined in the
// schema.
func (m *VodMutation) Field(name string) (ent.Value, bool) {
	switch name {
	case vod.FieldExtID:
		return m.ExtID()
	case vod.FieldPlatform:
		return m.Platform()
	case vod.FieldType:
		return m.GetType()
	case vod.FieldTitle:
		return m.Title()
	case vod.FieldDuration:
		return m.Duration()
	case vod.FieldViews:
		return m.Views()
	case vod.FieldResolution:
		return m.Resolution()
	case vod.FieldProcessing:
		return m.Processing()
	case vod.FieldThumbnailPath:
		return m.ThumbnailPath()
	case vod.FieldWebThumbnailPath:
		return m.WebThumbnailPath()
	case vod.FieldVideoPath:
		return m.VideoPath()
	case vod.FieldChatPath:
		return m.ChatPath()
	case vod.FieldChatVideoPath:
		return m.ChatVideoPath()
	case vod.FieldInfoPath:
		return m.InfoPath()
	case vod.FieldStreamedAt:
		return m.StreamedAt()
	case vod.FieldUpdatedAt:
		return m.UpdatedAt()
	case vod.FieldCreatedAt:
		return m.CreatedAt()
	}
	return nil, false
}

// OldField returns the old value of the field from the database. An error is
// returned if the mutation operation is not UpdateOne, or the query to the
// database failed.
func (m *VodMutation) OldField(ctx context.Context, name string) (ent.Value, error) {
	switch name {
	case vod.FieldExtID:
		return m.OldExtID(ctx)
	case vod.FieldPlatform:
		return m.OldPlatform(ctx)
	case vod.FieldType:
		return m.OldType(ctx)
	case vod.FieldTitle:
		return m.OldTitle(ctx)
	case vod.FieldDuration:
		return m.OldDuration(ctx)
	case vod.FieldViews:
		return m.OldViews(ctx)
	case vod.FieldResolution:
		return m.OldResolution(ctx)
	case vod.FieldProcessing:
		return m.OldProcessing(ctx)
	case vod.FieldThumbnailPath:
		return m.OldThumbnailPath(ctx)
	case vod.FieldWebThumbnailPath:
		return m.OldWebThumbnailPath(ctx)
	case vod.FieldVideoPath:
		return m.OldVideoPath(ctx)
	case vod.FieldChatPath:
		return m.OldChatPath(ctx)
	case vod.FieldChatVideoPath:
		return m.OldChatVideoPath(ctx)
	case vod.FieldInfoPath:
		return m.OldInfoPath(ctx)
	case vod.FieldStreamedAt:
		return m.OldStreamedAt(ctx)
	case vod.FieldUpdatedAt:
		return m.OldUpdatedAt(ctx)
	case vod.FieldCreatedAt:
		return m.OldCreatedAt(ctx)
	}
	return nil, fmt.Errorf("unknown Vod field %s", name)
}

// SetField sets the value of a field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VodMutation) SetField(name string, value ent.Value) error {
	switch name {
	case vod.FieldExtID:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetExtID(v)
		return nil
	case vod.FieldPlatform:
		v, ok := value.(utils.VodPlatform)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetPlatform(v)
		return nil
	case vod.FieldType:
		v, ok := value.(utils.VodType)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetType(v)
		return nil
	case vod.FieldTitle:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetTitle(v)
		return nil
	case vod.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetDuration(v)
		return nil
	case vod.FieldViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetViews(v)
		return nil
	case vod.FieldResolution:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetResolution(v)
		return nil
	case vod.FieldProcessing:
		v, ok := value.(bool)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetProcessing(v)
		return nil
	case vod.FieldThumbnailPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetThumbnailPath(v)
		return nil
	case vod.FieldWebThumbnailPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetWebThumbnailPath(v)
		return nil
	case vod.FieldVideoPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetVideoPath(v)
		return nil
	case vod.FieldChatPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatPath(v)
		return nil
	case vod.FieldChatVideoPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetChatVideoPath(v)
		return nil
	case vod.FieldInfoPath:
		v, ok := value.(string)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetInfoPath(v)
		return nil
	case vod.FieldStreamedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetStreamedAt(v)
		return nil
	case vod.FieldUpdatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetUpdatedAt(v)
		return nil
	case vod.FieldCreatedAt:
		v, ok := value.(time.Time)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.SetCreatedAt(v)
		return nil
	}
	return fmt.Errorf("unknown Vod field %s", name)
}

// AddedFields returns all numeric fields that were incremented/decremented during
// this mutation.
func (m *VodMutation) AddedFields() []string {
	var fields []string
	if m.addduration != nil {
		fields = append(fields, vod.FieldDuration)
	}
	if m.addviews != nil {
		fields = append(fields, vod.FieldViews)
	}
	return fields
}

// AddedField returns the numeric value that was incremented/decremented on a field
// with the given name. The second boolean return value indicates that this field
// was not set, or was not defined in the schema.
func (m *VodMutation) AddedField(name string) (ent.Value, bool) {
	switch name {
	case vod.FieldDuration:
		return m.AddedDuration()
	case vod.FieldViews:
		return m.AddedViews()
	}
	return nil, false
}

// AddField adds the value to the field with the given name. It returns an error if
// the field is not defined in the schema, or if the type mismatched the field
// type.
func (m *VodMutation) AddField(name string, value ent.Value) error {
	switch name {
	case vod.FieldDuration:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddDuration(v)
		return nil
	case vod.FieldViews:
		v, ok := value.(int)
		if !ok {
			return fmt.Errorf("unexpected type %T for field %s", value, name)
		}
		m.AddViews(v)
		return nil
	}
	return fmt.Errorf("unknown Vod numeric field %s", name)
}

// ClearedFields returns all nullable fields that were cleared during this
// mutation.
func (m *VodMutation) ClearedFields() []string {
	var fields []string
	if m.FieldCleared(vod.FieldResolution) {
		fields = append(fields, vod.FieldResolution)
	}
	if m.FieldCleared(vod.FieldThumbnailPath) {
		fields = append(fields, vod.FieldThumbnailPath)
	}
	if m.FieldCleared(vod.FieldChatPath) {
		fields = append(fields, vod.FieldChatPath)
	}
	if m.FieldCleared(vod.FieldChatVideoPath) {
		fields = append(fields, vod.FieldChatVideoPath)
	}
	if m.FieldCleared(vod.FieldInfoPath) {
		fields = append(fields, vod.FieldInfoPath)
	}
	return fields
}

// FieldCleared returns a boolean indicating if a field with the given name was
// cleared in this mutation.
func (m *VodMutation) FieldCleared(name string) bool {
	_, ok := m.clearedFields[name]
	return ok
}

// ClearField clears the value of the field with the given name. It returns an
// error if the field is not defined in the schema.
func (m *VodMutation) ClearField(name string) error {
	switch name {
	case vod.FieldResolution:
		m.ClearResolution()
		return nil
	case vod.FieldThumbnailPath:
		m.ClearThumbnailPath()
		return nil
	case vod.FieldChatPath:
		m.ClearChatPath()
		return nil
	case vod.FieldChatVideoPath:
		m.ClearChatVideoPath()
		return nil
	case vod.FieldInfoPath:
		m.ClearInfoPath()
		return nil
	}
	return fmt.Errorf("unknown Vod nullable field %s", name)
}

// ResetField resets all changes in the mutation for the field with the given name.
// It returns an error if the field is not defined in the schema.
func (m *VodMutation) ResetField(name string) error {
	switch name {
	case vod.FieldExtID:
		m.ResetExtID()
		return nil
	case vod.FieldPlatform:
		m.ResetPlatform()
		return nil
	case vod.FieldType:
		m.ResetType()
		return nil
	case vod.FieldTitle:
		m.ResetTitle()
		return nil
	case vod.FieldDuration:
		m.ResetDuration()
		return nil
	case vod.FieldViews:
		m.ResetViews()
		return nil
	case vod.FieldResolution:
		m.ResetResolution()
		return nil
	case vod.FieldProcessing:
		m.ResetProcessing()
		return nil
	case vod.FieldThumbnailPath:
		m.ResetThumbnailPath()
		return nil
	case vod.FieldWebThumbnailPath:
		m.ResetWebThumbnailPath()
		return nil
	case vod.FieldVideoPath:
		m.ResetVideoPath()
		return nil
	case vod.FieldChatPath:
		m.ResetChatPath()
		return nil
	case vod.FieldChatVideoPath:
		m.ResetChatVideoPath()
		return nil
	case vod.FieldInfoPath:
		m.ResetInfoPath()
		return nil
	case vod.FieldStreamedAt:
		m.ResetStreamedAt()
		return nil
	case vod.FieldUpdatedAt:
		m.ResetUpdatedAt()
		return nil
	case vod.FieldCreatedAt:
		m.ResetCreatedAt()
		return nil
	}
	return fmt.Errorf("unknown Vod field %s", name)
}

// AddedEdges returns all edge names that were set/added in this mutation.
func (m *VodMutation) AddedEdges() []string {
	edges := make([]string, 0, 2)
	if m.channel != nil {
		edges = append(edges, vod.EdgeChannel)
	}
	if m.queue != nil {
		edges = append(edges, vod.EdgeQueue)
	}
	return edges
}

// AddedIDs returns all IDs (to other nodes) that were added for the given edge
// name in this mutation.
func (m *VodMutation) AddedIDs(name string) []ent.Value {
	switch name {
	case vod.EdgeChannel:
		if id := m.channel; id != nil {
			return []ent.Value{*id}
		}
	case vod.EdgeQueue:
		if id := m.queue; id != nil {
			return []ent.Value{*id}
		}
	}
	return nil
}

// RemovedEdges returns all edge names that were removed in this mutation.
func (m *VodMutation) RemovedEdges() []string {
	edges := make([]string, 0, 2)
	return edges
}

// RemovedIDs returns all IDs (to other nodes) that were removed for the edge with
// the given name in this mutation.
func (m *VodMutation) RemovedIDs(name string) []ent.Value {
	switch name {
	}
	return nil
}

// ClearedEdges returns all edge names that were cleared in this mutation.
func (m *VodMutation) ClearedEdges() []string {
	edges := make([]string, 0, 2)
	if m.clearedchannel {
		edges = append(edges, vod.EdgeChannel)
	}
	if m.clearedqueue {
		edges = append(edges, vod.EdgeQueue)
	}
	return edges
}

// EdgeCleared returns a boolean which indicates if the edge with the given name
// was cleared in this mutation.
func (m *VodMutation) EdgeCleared(name string) bool {
	switch name {
	case vod.EdgeChannel:
		return m.clearedchannel
	case vod.EdgeQueue:
		return m.clearedqueue
	}
	return false
}

// ClearEdge clears the value of the edge with the given name. It returns an error
// if that edge is not defined in the schema.
func (m *VodMutation) ClearEdge(name string) error {
	switch name {
	case vod.EdgeChannel:
		m.ClearChannel()
		return nil
	case vod.EdgeQueue:
		m.ClearQueue()
		return nil
	}
	return fmt.Errorf("unknown Vod unique edge %s", name)
}

// ResetEdge resets all changes to the edge with the given name in this mutation.
// It returns an error if the edge is not defined in the schema.
func (m *VodMutation) ResetEdge(name string) error {
	switch name {
	case vod.EdgeChannel:
		m.ResetChannel()
		return nil
	case vod.EdgeQueue:
		m.ResetQueue()
		return nil
	}
	return fmt.Errorf("unknown Vod edge %s", name)
}
