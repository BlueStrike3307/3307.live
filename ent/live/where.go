// Code generated by entc, DO NOT EDIT.

package live

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id uuid.UUID) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uuid.UUID) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uuid.UUID) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uuid.UUID) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uuid.UUID) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uuid.UUID) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uuid.UUID) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uuid.UUID) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uuid.UUID) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// IsLive applies equality check predicate on the "is_live" field. It's identical to IsLiveEQ.
func IsLive(v bool) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLive), v))
	})
}

// ArchiveChat applies equality check predicate on the "archive_chat" field. It's identical to ArchiveChatEQ.
func ArchiveChat(v bool) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArchiveChat), v))
	})
}

// Resolution applies equality check predicate on the "resolution" field. It's identical to ResolutionEQ.
func Resolution(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResolution), v))
	})
}

// LastLive applies equality check predicate on the "last_live" field. It's identical to LastLiveEQ.
func LastLive(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLive), v))
	})
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// IsLiveEQ applies the EQ predicate on the "is_live" field.
func IsLiveEQ(v bool) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldIsLive), v))
	})
}

// IsLiveNEQ applies the NEQ predicate on the "is_live" field.
func IsLiveNEQ(v bool) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldIsLive), v))
	})
}

// ArchiveChatEQ applies the EQ predicate on the "archive_chat" field.
func ArchiveChatEQ(v bool) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldArchiveChat), v))
	})
}

// ArchiveChatNEQ applies the NEQ predicate on the "archive_chat" field.
func ArchiveChatNEQ(v bool) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldArchiveChat), v))
	})
}

// ResolutionEQ applies the EQ predicate on the "resolution" field.
func ResolutionEQ(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldResolution), v))
	})
}

// ResolutionNEQ applies the NEQ predicate on the "resolution" field.
func ResolutionNEQ(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldResolution), v))
	})
}

// ResolutionIn applies the In predicate on the "resolution" field.
func ResolutionIn(vs ...string) predicate.Live {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldResolution), v...))
	})
}

// ResolutionNotIn applies the NotIn predicate on the "resolution" field.
func ResolutionNotIn(vs ...string) predicate.Live {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldResolution), v...))
	})
}

// ResolutionGT applies the GT predicate on the "resolution" field.
func ResolutionGT(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldResolution), v))
	})
}

// ResolutionGTE applies the GTE predicate on the "resolution" field.
func ResolutionGTE(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldResolution), v))
	})
}

// ResolutionLT applies the LT predicate on the "resolution" field.
func ResolutionLT(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldResolution), v))
	})
}

// ResolutionLTE applies the LTE predicate on the "resolution" field.
func ResolutionLTE(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldResolution), v))
	})
}

// ResolutionContains applies the Contains predicate on the "resolution" field.
func ResolutionContains(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldResolution), v))
	})
}

// ResolutionHasPrefix applies the HasPrefix predicate on the "resolution" field.
func ResolutionHasPrefix(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldResolution), v))
	})
}

// ResolutionHasSuffix applies the HasSuffix predicate on the "resolution" field.
func ResolutionHasSuffix(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldResolution), v))
	})
}

// ResolutionIsNil applies the IsNil predicate on the "resolution" field.
func ResolutionIsNil() predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.IsNull(s.C(FieldResolution)))
	})
}

// ResolutionNotNil applies the NotNil predicate on the "resolution" field.
func ResolutionNotNil() predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.NotNull(s.C(FieldResolution)))
	})
}

// ResolutionEqualFold applies the EqualFold predicate on the "resolution" field.
func ResolutionEqualFold(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldResolution), v))
	})
}

// ResolutionContainsFold applies the ContainsFold predicate on the "resolution" field.
func ResolutionContainsFold(v string) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldResolution), v))
	})
}

// LastLiveEQ applies the EQ predicate on the "last_live" field.
func LastLiveEQ(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldLastLive), v))
	})
}

// LastLiveNEQ applies the NEQ predicate on the "last_live" field.
func LastLiveNEQ(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldLastLive), v))
	})
}

// LastLiveIn applies the In predicate on the "last_live" field.
func LastLiveIn(vs ...time.Time) predicate.Live {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldLastLive), v...))
	})
}

// LastLiveNotIn applies the NotIn predicate on the "last_live" field.
func LastLiveNotIn(vs ...time.Time) predicate.Live {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldLastLive), v...))
	})
}

// LastLiveGT applies the GT predicate on the "last_live" field.
func LastLiveGT(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldLastLive), v))
	})
}

// LastLiveGTE applies the GTE predicate on the "last_live" field.
func LastLiveGTE(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldLastLive), v))
	})
}

// LastLiveLT applies the LT predicate on the "last_live" field.
func LastLiveLT(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldLastLive), v))
	})
}

// LastLiveLTE applies the LTE predicate on the "last_live" field.
func LastLiveLTE(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldLastLive), v))
	})
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.Live {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.Live {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldUpdatedAt), v...))
	})
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldUpdatedAt), v))
	})
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldUpdatedAt), v))
	})
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.Live {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.Live {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.Live(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldCreatedAt), v...))
	})
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldCreatedAt), v))
	})
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldCreatedAt), v))
	})
}

// HasChannel applies the HasEdge predicate on the "channel" edge.
func HasChannel() predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighbors(s, step)
	})
}

// HasChannelWith applies the HasEdge predicate on the "channel" edge with a given conditions (other predicates).
func HasChannelWith(preds ...predicate.Channel) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		step := sqlgraph.NewStep(
			sqlgraph.From(Table, FieldID),
			sqlgraph.To(ChannelInverseTable, FieldID),
			sqlgraph.Edge(sqlgraph.M2O, true, ChannelTable, ChannelColumn),
		)
		sqlgraph.HasNeighborsWith(s, step, func(s *sql.Selector) {
			for _, p := range preds {
				p(s)
			}
		})
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.Live) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.Live) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.Live) predicate.Live {
	return predicate.Live(func(s *sql.Selector) {
		p(s.Not())
	})
}
