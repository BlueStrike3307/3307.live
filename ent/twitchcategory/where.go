// Code generated by ent, DO NOT EDIT.

package twitchcategory

import (
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/zibbp/ganymede/ent/predicate"
)

// ID filters vertices based on their ID field.
func ID(id string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldID, id))
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldID, id))
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNEQ(FieldID, id))
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldIn(FieldID, ids...))
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNotIn(FieldID, ids...))
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGT(FieldID, id))
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGTE(FieldID, id))
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLT(FieldID, id))
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLTE(FieldID, id))
}

// IDEqualFold applies the EqualFold predicate on the ID field.
func IDEqualFold(id string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEqualFold(FieldID, id))
}

// IDContainsFold applies the ContainsFold predicate on the ID field.
func IDContainsFold(id string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldContainsFold(FieldID, id))
}

// Name applies equality check predicate on the "name" field. It's identical to NameEQ.
func Name(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldName, v))
}

// BoxArtURL applies equality check predicate on the "box_art_url" field. It's identical to BoxArtURLEQ.
func BoxArtURL(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldBoxArtURL, v))
}

// IgdbID applies equality check predicate on the "igdb_id" field. It's identical to IgdbIDEQ.
func IgdbID(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldIgdbID, v))
}

// UpdatedAt applies equality check predicate on the "updated_at" field. It's identical to UpdatedAtEQ.
func UpdatedAt(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldUpdatedAt, v))
}

// CreatedAt applies equality check predicate on the "created_at" field. It's identical to CreatedAtEQ.
func CreatedAt(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldCreatedAt, v))
}

// NameEQ applies the EQ predicate on the "name" field.
func NameEQ(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldName, v))
}

// NameNEQ applies the NEQ predicate on the "name" field.
func NameNEQ(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNEQ(FieldName, v))
}

// NameIn applies the In predicate on the "name" field.
func NameIn(vs ...string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldIn(FieldName, vs...))
}

// NameNotIn applies the NotIn predicate on the "name" field.
func NameNotIn(vs ...string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNotIn(FieldName, vs...))
}

// NameGT applies the GT predicate on the "name" field.
func NameGT(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGT(FieldName, v))
}

// NameGTE applies the GTE predicate on the "name" field.
func NameGTE(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGTE(FieldName, v))
}

// NameLT applies the LT predicate on the "name" field.
func NameLT(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLT(FieldName, v))
}

// NameLTE applies the LTE predicate on the "name" field.
func NameLTE(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLTE(FieldName, v))
}

// NameContains applies the Contains predicate on the "name" field.
func NameContains(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldContains(FieldName, v))
}

// NameHasPrefix applies the HasPrefix predicate on the "name" field.
func NameHasPrefix(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldHasPrefix(FieldName, v))
}

// NameHasSuffix applies the HasSuffix predicate on the "name" field.
func NameHasSuffix(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldHasSuffix(FieldName, v))
}

// NameEqualFold applies the EqualFold predicate on the "name" field.
func NameEqualFold(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEqualFold(FieldName, v))
}

// NameContainsFold applies the ContainsFold predicate on the "name" field.
func NameContainsFold(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldContainsFold(FieldName, v))
}

// BoxArtURLEQ applies the EQ predicate on the "box_art_url" field.
func BoxArtURLEQ(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldBoxArtURL, v))
}

// BoxArtURLNEQ applies the NEQ predicate on the "box_art_url" field.
func BoxArtURLNEQ(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNEQ(FieldBoxArtURL, v))
}

// BoxArtURLIn applies the In predicate on the "box_art_url" field.
func BoxArtURLIn(vs ...string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldIn(FieldBoxArtURL, vs...))
}

// BoxArtURLNotIn applies the NotIn predicate on the "box_art_url" field.
func BoxArtURLNotIn(vs ...string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNotIn(FieldBoxArtURL, vs...))
}

// BoxArtURLGT applies the GT predicate on the "box_art_url" field.
func BoxArtURLGT(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGT(FieldBoxArtURL, v))
}

// BoxArtURLGTE applies the GTE predicate on the "box_art_url" field.
func BoxArtURLGTE(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGTE(FieldBoxArtURL, v))
}

// BoxArtURLLT applies the LT predicate on the "box_art_url" field.
func BoxArtURLLT(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLT(FieldBoxArtURL, v))
}

// BoxArtURLLTE applies the LTE predicate on the "box_art_url" field.
func BoxArtURLLTE(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLTE(FieldBoxArtURL, v))
}

// BoxArtURLContains applies the Contains predicate on the "box_art_url" field.
func BoxArtURLContains(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldContains(FieldBoxArtURL, v))
}

// BoxArtURLHasPrefix applies the HasPrefix predicate on the "box_art_url" field.
func BoxArtURLHasPrefix(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldHasPrefix(FieldBoxArtURL, v))
}

// BoxArtURLHasSuffix applies the HasSuffix predicate on the "box_art_url" field.
func BoxArtURLHasSuffix(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldHasSuffix(FieldBoxArtURL, v))
}

// BoxArtURLIsNil applies the IsNil predicate on the "box_art_url" field.
func BoxArtURLIsNil() predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldIsNull(FieldBoxArtURL))
}

// BoxArtURLNotNil applies the NotNil predicate on the "box_art_url" field.
func BoxArtURLNotNil() predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNotNull(FieldBoxArtURL))
}

// BoxArtURLEqualFold applies the EqualFold predicate on the "box_art_url" field.
func BoxArtURLEqualFold(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEqualFold(FieldBoxArtURL, v))
}

// BoxArtURLContainsFold applies the ContainsFold predicate on the "box_art_url" field.
func BoxArtURLContainsFold(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldContainsFold(FieldBoxArtURL, v))
}

// IgdbIDEQ applies the EQ predicate on the "igdb_id" field.
func IgdbIDEQ(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldIgdbID, v))
}

// IgdbIDNEQ applies the NEQ predicate on the "igdb_id" field.
func IgdbIDNEQ(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNEQ(FieldIgdbID, v))
}

// IgdbIDIn applies the In predicate on the "igdb_id" field.
func IgdbIDIn(vs ...string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldIn(FieldIgdbID, vs...))
}

// IgdbIDNotIn applies the NotIn predicate on the "igdb_id" field.
func IgdbIDNotIn(vs ...string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNotIn(FieldIgdbID, vs...))
}

// IgdbIDGT applies the GT predicate on the "igdb_id" field.
func IgdbIDGT(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGT(FieldIgdbID, v))
}

// IgdbIDGTE applies the GTE predicate on the "igdb_id" field.
func IgdbIDGTE(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGTE(FieldIgdbID, v))
}

// IgdbIDLT applies the LT predicate on the "igdb_id" field.
func IgdbIDLT(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLT(FieldIgdbID, v))
}

// IgdbIDLTE applies the LTE predicate on the "igdb_id" field.
func IgdbIDLTE(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLTE(FieldIgdbID, v))
}

// IgdbIDContains applies the Contains predicate on the "igdb_id" field.
func IgdbIDContains(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldContains(FieldIgdbID, v))
}

// IgdbIDHasPrefix applies the HasPrefix predicate on the "igdb_id" field.
func IgdbIDHasPrefix(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldHasPrefix(FieldIgdbID, v))
}

// IgdbIDHasSuffix applies the HasSuffix predicate on the "igdb_id" field.
func IgdbIDHasSuffix(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldHasSuffix(FieldIgdbID, v))
}

// IgdbIDIsNil applies the IsNil predicate on the "igdb_id" field.
func IgdbIDIsNil() predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldIsNull(FieldIgdbID))
}

// IgdbIDNotNil applies the NotNil predicate on the "igdb_id" field.
func IgdbIDNotNil() predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNotNull(FieldIgdbID))
}

// IgdbIDEqualFold applies the EqualFold predicate on the "igdb_id" field.
func IgdbIDEqualFold(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEqualFold(FieldIgdbID, v))
}

// IgdbIDContainsFold applies the ContainsFold predicate on the "igdb_id" field.
func IgdbIDContainsFold(v string) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldContainsFold(FieldIgdbID, v))
}

// UpdatedAtEQ applies the EQ predicate on the "updated_at" field.
func UpdatedAtEQ(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldUpdatedAt, v))
}

// UpdatedAtNEQ applies the NEQ predicate on the "updated_at" field.
func UpdatedAtNEQ(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNEQ(FieldUpdatedAt, v))
}

// UpdatedAtIn applies the In predicate on the "updated_at" field.
func UpdatedAtIn(vs ...time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldIn(FieldUpdatedAt, vs...))
}

// UpdatedAtNotIn applies the NotIn predicate on the "updated_at" field.
func UpdatedAtNotIn(vs ...time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNotIn(FieldUpdatedAt, vs...))
}

// UpdatedAtGT applies the GT predicate on the "updated_at" field.
func UpdatedAtGT(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGT(FieldUpdatedAt, v))
}

// UpdatedAtGTE applies the GTE predicate on the "updated_at" field.
func UpdatedAtGTE(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGTE(FieldUpdatedAt, v))
}

// UpdatedAtLT applies the LT predicate on the "updated_at" field.
func UpdatedAtLT(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLT(FieldUpdatedAt, v))
}

// UpdatedAtLTE applies the LTE predicate on the "updated_at" field.
func UpdatedAtLTE(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLTE(FieldUpdatedAt, v))
}

// CreatedAtEQ applies the EQ predicate on the "created_at" field.
func CreatedAtEQ(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldEQ(FieldCreatedAt, v))
}

// CreatedAtNEQ applies the NEQ predicate on the "created_at" field.
func CreatedAtNEQ(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNEQ(FieldCreatedAt, v))
}

// CreatedAtIn applies the In predicate on the "created_at" field.
func CreatedAtIn(vs ...time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldIn(FieldCreatedAt, vs...))
}

// CreatedAtNotIn applies the NotIn predicate on the "created_at" field.
func CreatedAtNotIn(vs ...time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldNotIn(FieldCreatedAt, vs...))
}

// CreatedAtGT applies the GT predicate on the "created_at" field.
func CreatedAtGT(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGT(FieldCreatedAt, v))
}

// CreatedAtGTE applies the GTE predicate on the "created_at" field.
func CreatedAtGTE(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldGTE(FieldCreatedAt, v))
}

// CreatedAtLT applies the LT predicate on the "created_at" field.
func CreatedAtLT(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLT(FieldCreatedAt, v))
}

// CreatedAtLTE applies the LTE predicate on the "created_at" field.
func CreatedAtLTE(v time.Time) predicate.TwitchCategory {
	return predicate.TwitchCategory(sql.FieldLTE(FieldCreatedAt, v))
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.TwitchCategory) predicate.TwitchCategory {
	return predicate.TwitchCategory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.TwitchCategory) predicate.TwitchCategory {
	return predicate.TwitchCategory(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.TwitchCategory) predicate.TwitchCategory {
	return predicate.TwitchCategory(func(s *sql.Selector) {
		p(s.Not())
	})
}
