// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/playback"
	"github.com/zibbp/ganymede/internal/utils"
)

// PlaybackCreate is the builder for creating a Playback entity.
type PlaybackCreate struct {
	config
	mutation *PlaybackMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetVodID sets the "vod_id" field.
func (pc *PlaybackCreate) SetVodID(u uuid.UUID) *PlaybackCreate {
	pc.mutation.SetVodID(u)
	return pc
}

// SetUserID sets the "user_id" field.
func (pc *PlaybackCreate) SetUserID(u uuid.UUID) *PlaybackCreate {
	pc.mutation.SetUserID(u)
	return pc
}

// SetTime sets the "time" field.
func (pc *PlaybackCreate) SetTime(i int) *PlaybackCreate {
	pc.mutation.SetTime(i)
	return pc
}

// SetNillableTime sets the "time" field if the given value is not nil.
func (pc *PlaybackCreate) SetNillableTime(i *int) *PlaybackCreate {
	if i != nil {
		pc.SetTime(*i)
	}
	return pc
}

// SetStatus sets the "status" field.
func (pc *PlaybackCreate) SetStatus(us utils.PlaybackStatus) *PlaybackCreate {
	pc.mutation.SetStatus(us)
	return pc
}

// SetNillableStatus sets the "status" field if the given value is not nil.
func (pc *PlaybackCreate) SetNillableStatus(us *utils.PlaybackStatus) *PlaybackCreate {
	if us != nil {
		pc.SetStatus(*us)
	}
	return pc
}

// SetUpdatedAt sets the "updated_at" field.
func (pc *PlaybackCreate) SetUpdatedAt(t time.Time) *PlaybackCreate {
	pc.mutation.SetUpdatedAt(t)
	return pc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (pc *PlaybackCreate) SetNillableUpdatedAt(t *time.Time) *PlaybackCreate {
	if t != nil {
		pc.SetUpdatedAt(*t)
	}
	return pc
}

// SetCreatedAt sets the "created_at" field.
func (pc *PlaybackCreate) SetCreatedAt(t time.Time) *PlaybackCreate {
	pc.mutation.SetCreatedAt(t)
	return pc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (pc *PlaybackCreate) SetNillableCreatedAt(t *time.Time) *PlaybackCreate {
	if t != nil {
		pc.SetCreatedAt(*t)
	}
	return pc
}

// SetID sets the "id" field.
func (pc *PlaybackCreate) SetID(u uuid.UUID) *PlaybackCreate {
	pc.mutation.SetID(u)
	return pc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (pc *PlaybackCreate) SetNillableID(u *uuid.UUID) *PlaybackCreate {
	if u != nil {
		pc.SetID(*u)
	}
	return pc
}

// Mutation returns the PlaybackMutation object of the builder.
func (pc *PlaybackCreate) Mutation() *PlaybackMutation {
	return pc.mutation
}

// Save creates the Playback in the database.
func (pc *PlaybackCreate) Save(ctx context.Context) (*Playback, error) {
	var (
		err  error
		node *Playback
	)
	pc.defaults()
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PlaybackMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PlaybackCreate) SaveX(ctx context.Context) *Playback {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PlaybackCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PlaybackCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (pc *PlaybackCreate) defaults() {
	if _, ok := pc.mutation.Time(); !ok {
		v := playback.DefaultTime
		pc.mutation.SetTime(v)
	}
	if _, ok := pc.mutation.Status(); !ok {
		v := playback.DefaultStatus
		pc.mutation.SetStatus(v)
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		v := playback.DefaultUpdatedAt()
		pc.mutation.SetUpdatedAt(v)
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		v := playback.DefaultCreatedAt()
		pc.mutation.SetCreatedAt(v)
	}
	if _, ok := pc.mutation.ID(); !ok {
		v := playback.DefaultID()
		pc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PlaybackCreate) check() error {
	if _, ok := pc.mutation.VodID(); !ok {
		return &ValidationError{Name: "vod_id", err: errors.New(`ent: missing required field "Playback.vod_id"`)}
	}
	if _, ok := pc.mutation.UserID(); !ok {
		return &ValidationError{Name: "user_id", err: errors.New(`ent: missing required field "Playback.user_id"`)}
	}
	if _, ok := pc.mutation.Time(); !ok {
		return &ValidationError{Name: "time", err: errors.New(`ent: missing required field "Playback.time"`)}
	}
	if v, ok := pc.mutation.Status(); ok {
		if err := playback.StatusValidator(v); err != nil {
			return &ValidationError{Name: "status", err: fmt.Errorf(`ent: validator failed for field "Playback.status": %w`, err)}
		}
	}
	if _, ok := pc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Playback.updated_at"`)}
	}
	if _, ok := pc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Playback.created_at"`)}
	}
	return nil
}

func (pc *PlaybackCreate) sqlSave(ctx context.Context) (*Playback, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (pc *PlaybackCreate) createSpec() (*Playback, *sqlgraph.CreateSpec) {
	var (
		_node = &Playback{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: playback.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: playback.FieldID,
			},
		}
	)
	_spec.OnConflict = pc.conflict
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := pc.mutation.VodID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: playback.FieldVodID,
		})
		_node.VodID = value
	}
	if value, ok := pc.mutation.UserID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeUUID,
			Value:  value,
			Column: playback.FieldUserID,
		})
		_node.UserID = value
	}
	if value, ok := pc.mutation.Time(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: playback.FieldTime,
		})
		_node.Time = value
	}
	if value, ok := pc.mutation.Status(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: playback.FieldStatus,
		})
		_node.Status = value
	}
	if value, ok := pc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: playback.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := pc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: playback.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Playback.Create().
//		SetVodID(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaybackUpsert) {
//			SetVodID(v+v).
//		}).
//		Exec(ctx)
//
func (pc *PlaybackCreate) OnConflict(opts ...sql.ConflictOption) *PlaybackUpsertOne {
	pc.conflict = opts
	return &PlaybackUpsertOne{
		create: pc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Playback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pc *PlaybackCreate) OnConflictColumns(columns ...string) *PlaybackUpsertOne {
	pc.conflict = append(pc.conflict, sql.ConflictColumns(columns...))
	return &PlaybackUpsertOne{
		create: pc,
	}
}

type (
	// PlaybackUpsertOne is the builder for "upsert"-ing
	//  one Playback node.
	PlaybackUpsertOne struct {
		create *PlaybackCreate
	}

	// PlaybackUpsert is the "OnConflict" setter.
	PlaybackUpsert struct {
		*sql.UpdateSet
	}
)

// SetVodID sets the "vod_id" field.
func (u *PlaybackUpsert) SetVodID(v uuid.UUID) *PlaybackUpsert {
	u.Set(playback.FieldVodID, v)
	return u
}

// UpdateVodID sets the "vod_id" field to the value that was provided on create.
func (u *PlaybackUpsert) UpdateVodID() *PlaybackUpsert {
	u.SetExcluded(playback.FieldVodID)
	return u
}

// SetUserID sets the "user_id" field.
func (u *PlaybackUpsert) SetUserID(v uuid.UUID) *PlaybackUpsert {
	u.Set(playback.FieldUserID, v)
	return u
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PlaybackUpsert) UpdateUserID() *PlaybackUpsert {
	u.SetExcluded(playback.FieldUserID)
	return u
}

// SetTime sets the "time" field.
func (u *PlaybackUpsert) SetTime(v int) *PlaybackUpsert {
	u.Set(playback.FieldTime, v)
	return u
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *PlaybackUpsert) UpdateTime() *PlaybackUpsert {
	u.SetExcluded(playback.FieldTime)
	return u
}

// AddTime adds v to the "time" field.
func (u *PlaybackUpsert) AddTime(v int) *PlaybackUpsert {
	u.Add(playback.FieldTime, v)
	return u
}

// SetStatus sets the "status" field.
func (u *PlaybackUpsert) SetStatus(v utils.PlaybackStatus) *PlaybackUpsert {
	u.Set(playback.FieldStatus, v)
	return u
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PlaybackUpsert) UpdateStatus() *PlaybackUpsert {
	u.SetExcluded(playback.FieldStatus)
	return u
}

// ClearStatus clears the value of the "status" field.
func (u *PlaybackUpsert) ClearStatus() *PlaybackUpsert {
	u.SetNull(playback.FieldStatus)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlaybackUpsert) SetUpdatedAt(v time.Time) *PlaybackUpsert {
	u.Set(playback.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlaybackUpsert) UpdateUpdatedAt() *PlaybackUpsert {
	u.SetExcluded(playback.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *PlaybackUpsert) SetCreatedAt(v time.Time) *PlaybackUpsert {
	u.Set(playback.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlaybackUpsert) UpdateCreatedAt() *PlaybackUpsert {
	u.SetExcluded(playback.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Playback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(playback.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PlaybackUpsertOne) UpdateNewValues() *PlaybackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(playback.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(playback.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Playback.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *PlaybackUpsertOne) Ignore() *PlaybackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaybackUpsertOne) DoNothing() *PlaybackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaybackCreate.OnConflict
// documentation for more info.
func (u *PlaybackUpsertOne) Update(set func(*PlaybackUpsert)) *PlaybackUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaybackUpsert{UpdateSet: update})
	}))
	return u
}

// SetVodID sets the "vod_id" field.
func (u *PlaybackUpsertOne) SetVodID(v uuid.UUID) *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetVodID(v)
	})
}

// UpdateVodID sets the "vod_id" field to the value that was provided on create.
func (u *PlaybackUpsertOne) UpdateVodID() *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateVodID()
	})
}

// SetUserID sets the "user_id" field.
func (u *PlaybackUpsertOne) SetUserID(v uuid.UUID) *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PlaybackUpsertOne) UpdateUserID() *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateUserID()
	})
}

// SetTime sets the "time" field.
func (u *PlaybackUpsertOne) SetTime(v int) *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *PlaybackUpsertOne) AddTime(v int) *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *PlaybackUpsertOne) UpdateTime() *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *PlaybackUpsertOne) SetStatus(v utils.PlaybackStatus) *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PlaybackUpsertOne) UpdateStatus() *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PlaybackUpsertOne) ClearStatus() *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.ClearStatus()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlaybackUpsertOne) SetUpdatedAt(v time.Time) *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlaybackUpsertOne) UpdateUpdatedAt() *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PlaybackUpsertOne) SetCreatedAt(v time.Time) *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlaybackUpsertOne) UpdateCreatedAt() *PlaybackUpsertOne {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *PlaybackUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaybackCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaybackUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *PlaybackUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: PlaybackUpsertOne.ID is not supported by MySQL driver. Use PlaybackUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *PlaybackUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// PlaybackCreateBulk is the builder for creating many Playback entities in bulk.
type PlaybackCreateBulk struct {
	config
	builders []*PlaybackCreate
	conflict []sql.ConflictOption
}

// Save creates the Playback entities in the database.
func (pcb *PlaybackCreateBulk) Save(ctx context.Context) ([]*Playback, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Playback, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PlaybackMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = pcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PlaybackCreateBulk) SaveX(ctx context.Context) []*Playback {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PlaybackCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PlaybackCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Playback.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.PlaybackUpsert) {
//			SetVodID(v+v).
//		}).
//		Exec(ctx)
//
func (pcb *PlaybackCreateBulk) OnConflict(opts ...sql.ConflictOption) *PlaybackUpsertBulk {
	pcb.conflict = opts
	return &PlaybackUpsertBulk{
		create: pcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Playback.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (pcb *PlaybackCreateBulk) OnConflictColumns(columns ...string) *PlaybackUpsertBulk {
	pcb.conflict = append(pcb.conflict, sql.ConflictColumns(columns...))
	return &PlaybackUpsertBulk{
		create: pcb,
	}
}

// PlaybackUpsertBulk is the builder for "upsert"-ing
// a bulk of Playback nodes.
type PlaybackUpsertBulk struct {
	create *PlaybackCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Playback.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(playback.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *PlaybackUpsertBulk) UpdateNewValues() *PlaybackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(playback.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(playback.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Playback.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *PlaybackUpsertBulk) Ignore() *PlaybackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *PlaybackUpsertBulk) DoNothing() *PlaybackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the PlaybackCreateBulk.OnConflict
// documentation for more info.
func (u *PlaybackUpsertBulk) Update(set func(*PlaybackUpsert)) *PlaybackUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&PlaybackUpsert{UpdateSet: update})
	}))
	return u
}

// SetVodID sets the "vod_id" field.
func (u *PlaybackUpsertBulk) SetVodID(v uuid.UUID) *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetVodID(v)
	})
}

// UpdateVodID sets the "vod_id" field to the value that was provided on create.
func (u *PlaybackUpsertBulk) UpdateVodID() *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateVodID()
	})
}

// SetUserID sets the "user_id" field.
func (u *PlaybackUpsertBulk) SetUserID(v uuid.UUID) *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetUserID(v)
	})
}

// UpdateUserID sets the "user_id" field to the value that was provided on create.
func (u *PlaybackUpsertBulk) UpdateUserID() *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateUserID()
	})
}

// SetTime sets the "time" field.
func (u *PlaybackUpsertBulk) SetTime(v int) *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetTime(v)
	})
}

// AddTime adds v to the "time" field.
func (u *PlaybackUpsertBulk) AddTime(v int) *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.AddTime(v)
	})
}

// UpdateTime sets the "time" field to the value that was provided on create.
func (u *PlaybackUpsertBulk) UpdateTime() *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateTime()
	})
}

// SetStatus sets the "status" field.
func (u *PlaybackUpsertBulk) SetStatus(v utils.PlaybackStatus) *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetStatus(v)
	})
}

// UpdateStatus sets the "status" field to the value that was provided on create.
func (u *PlaybackUpsertBulk) UpdateStatus() *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateStatus()
	})
}

// ClearStatus clears the value of the "status" field.
func (u *PlaybackUpsertBulk) ClearStatus() *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.ClearStatus()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *PlaybackUpsertBulk) SetUpdatedAt(v time.Time) *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *PlaybackUpsertBulk) UpdateUpdatedAt() *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *PlaybackUpsertBulk) SetCreatedAt(v time.Time) *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *PlaybackUpsertBulk) UpdateCreatedAt() *PlaybackUpsertBulk {
	return u.Update(func(s *PlaybackUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *PlaybackUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the PlaybackCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for PlaybackCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *PlaybackUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
