// Code generated by entc, DO NOT EDIT.

package ent

import (
	"fmt"
	"strings"
	"time"

	"entgo.io/ent/dialect/sql"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/vod"
	"github.com/zibbp/ganymede/internal/utils"
)

// Queue is the model entity for the Queue schema.
type Queue struct {
	config `json:"-"`
	// ID of the ent.
	ID uuid.UUID `json:"id,omitempty"`
	// LiveArchive holds the value of the "live_archive" field.
	LiveArchive bool `json:"live_archive,omitempty"`
	// OnHold holds the value of the "on_hold" field.
	OnHold bool `json:"on_hold,omitempty"`
	// VideoProcessing holds the value of the "video_processing" field.
	VideoProcessing bool `json:"video_processing,omitempty"`
	// ChatProcessing holds the value of the "chat_processing" field.
	ChatProcessing bool `json:"chat_processing,omitempty"`
	// Processing holds the value of the "processing" field.
	Processing bool `json:"processing,omitempty"`
	// TaskVodCreateFolder holds the value of the "task_vod_create_folder" field.
	TaskVodCreateFolder utils.TaskStatus `json:"task_vod_create_folder,omitempty"`
	// TaskVodDownloadThumbnail holds the value of the "task_vod_download_thumbnail" field.
	TaskVodDownloadThumbnail utils.TaskStatus `json:"task_vod_download_thumbnail,omitempty"`
	// TaskVodSaveInfo holds the value of the "task_vod_save_info" field.
	TaskVodSaveInfo utils.TaskStatus `json:"task_vod_save_info,omitempty"`
	// TaskVideoDownload holds the value of the "task_video_download" field.
	TaskVideoDownload utils.TaskStatus `json:"task_video_download,omitempty"`
	// TaskVideoConvert holds the value of the "task_video_convert" field.
	TaskVideoConvert utils.TaskStatus `json:"task_video_convert,omitempty"`
	// TaskVideoMove holds the value of the "task_video_move" field.
	TaskVideoMove utils.TaskStatus `json:"task_video_move,omitempty"`
	// TaskChatDownload holds the value of the "task_chat_download" field.
	TaskChatDownload utils.TaskStatus `json:"task_chat_download,omitempty"`
	// TaskChatRender holds the value of the "task_chat_render" field.
	TaskChatRender utils.TaskStatus `json:"task_chat_render,omitempty"`
	// TaskChatMove holds the value of the "task_chat_move" field.
	TaskChatMove utils.TaskStatus `json:"task_chat_move,omitempty"`
	// UpdatedAt holds the value of the "updated_at" field.
	UpdatedAt time.Time `json:"updated_at,omitempty"`
	// CreatedAt holds the value of the "created_at" field.
	CreatedAt time.Time `json:"created_at,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the QueueQuery when eager-loading is set.
	Edges     QueueEdges `json:"edges"`
	vod_queue *uuid.UUID
}

// QueueEdges holds the relations/edges for other nodes in the graph.
type QueueEdges struct {
	// Vod holds the value of the vod edge.
	Vod *Vod `json:"vod,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [1]bool
}

// VodOrErr returns the Vod value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e QueueEdges) VodOrErr() (*Vod, error) {
	if e.loadedTypes[0] {
		if e.Vod == nil {
			// The edge vod was loaded in eager-loading,
			// but was not found.
			return nil, &NotFoundError{label: vod.Label}
		}
		return e.Vod, nil
	}
	return nil, &NotLoadedError{edge: "vod"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Queue) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case queue.FieldLiveArchive, queue.FieldOnHold, queue.FieldVideoProcessing, queue.FieldChatProcessing, queue.FieldProcessing:
			values[i] = new(sql.NullBool)
		case queue.FieldTaskVodCreateFolder, queue.FieldTaskVodDownloadThumbnail, queue.FieldTaskVodSaveInfo, queue.FieldTaskVideoDownload, queue.FieldTaskVideoConvert, queue.FieldTaskVideoMove, queue.FieldTaskChatDownload, queue.FieldTaskChatRender, queue.FieldTaskChatMove:
			values[i] = new(sql.NullString)
		case queue.FieldUpdatedAt, queue.FieldCreatedAt:
			values[i] = new(sql.NullTime)
		case queue.FieldID:
			values[i] = new(uuid.UUID)
		case queue.ForeignKeys[0]: // vod_queue
			values[i] = &sql.NullScanner{S: new(uuid.UUID)}
		default:
			return nil, fmt.Errorf("unexpected column %q for type Queue", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Queue fields.
func (q *Queue) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case queue.FieldID:
			if value, ok := values[i].(*uuid.UUID); !ok {
				return fmt.Errorf("unexpected type %T for field id", values[i])
			} else if value != nil {
				q.ID = *value
			}
		case queue.FieldLiveArchive:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field live_archive", values[i])
			} else if value.Valid {
				q.LiveArchive = value.Bool
			}
		case queue.FieldOnHold:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field on_hold", values[i])
			} else if value.Valid {
				q.OnHold = value.Bool
			}
		case queue.FieldVideoProcessing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field video_processing", values[i])
			} else if value.Valid {
				q.VideoProcessing = value.Bool
			}
		case queue.FieldChatProcessing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field chat_processing", values[i])
			} else if value.Valid {
				q.ChatProcessing = value.Bool
			}
		case queue.FieldProcessing:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field processing", values[i])
			} else if value.Valid {
				q.Processing = value.Bool
			}
		case queue.FieldTaskVodCreateFolder:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_vod_create_folder", values[i])
			} else if value.Valid {
				q.TaskVodCreateFolder = utils.TaskStatus(value.String)
			}
		case queue.FieldTaskVodDownloadThumbnail:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_vod_download_thumbnail", values[i])
			} else if value.Valid {
				q.TaskVodDownloadThumbnail = utils.TaskStatus(value.String)
			}
		case queue.FieldTaskVodSaveInfo:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_vod_save_info", values[i])
			} else if value.Valid {
				q.TaskVodSaveInfo = utils.TaskStatus(value.String)
			}
		case queue.FieldTaskVideoDownload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_video_download", values[i])
			} else if value.Valid {
				q.TaskVideoDownload = utils.TaskStatus(value.String)
			}
		case queue.FieldTaskVideoConvert:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_video_convert", values[i])
			} else if value.Valid {
				q.TaskVideoConvert = utils.TaskStatus(value.String)
			}
		case queue.FieldTaskVideoMove:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_video_move", values[i])
			} else if value.Valid {
				q.TaskVideoMove = utils.TaskStatus(value.String)
			}
		case queue.FieldTaskChatDownload:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_chat_download", values[i])
			} else if value.Valid {
				q.TaskChatDownload = utils.TaskStatus(value.String)
			}
		case queue.FieldTaskChatRender:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_chat_render", values[i])
			} else if value.Valid {
				q.TaskChatRender = utils.TaskStatus(value.String)
			}
		case queue.FieldTaskChatMove:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field task_chat_move", values[i])
			} else if value.Valid {
				q.TaskChatMove = utils.TaskStatus(value.String)
			}
		case queue.FieldUpdatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field updated_at", values[i])
			} else if value.Valid {
				q.UpdatedAt = value.Time
			}
		case queue.FieldCreatedAt:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field created_at", values[i])
			} else if value.Valid {
				q.CreatedAt = value.Time
			}
		case queue.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullScanner); !ok {
				return fmt.Errorf("unexpected type %T for field vod_queue", values[i])
			} else if value.Valid {
				q.vod_queue = new(uuid.UUID)
				*q.vod_queue = *value.S.(*uuid.UUID)
			}
		}
	}
	return nil
}

// QueryVod queries the "vod" edge of the Queue entity.
func (q *Queue) QueryVod() *VodQuery {
	return (&QueueClient{config: q.config}).QueryVod(q)
}

// Update returns a builder for updating this Queue.
// Note that you need to call Queue.Unwrap() before calling this method if this Queue
// was returned from a transaction, and the transaction was committed or rolled back.
func (q *Queue) Update() *QueueUpdateOne {
	return (&QueueClient{config: q.config}).UpdateOne(q)
}

// Unwrap unwraps the Queue entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (q *Queue) Unwrap() *Queue {
	tx, ok := q.config.driver.(*txDriver)
	if !ok {
		panic("ent: Queue is not a transactional entity")
	}
	q.config.driver = tx.drv
	return q
}

// String implements the fmt.Stringer.
func (q *Queue) String() string {
	var builder strings.Builder
	builder.WriteString("Queue(")
	builder.WriteString(fmt.Sprintf("id=%v", q.ID))
	builder.WriteString(", live_archive=")
	builder.WriteString(fmt.Sprintf("%v", q.LiveArchive))
	builder.WriteString(", on_hold=")
	builder.WriteString(fmt.Sprintf("%v", q.OnHold))
	builder.WriteString(", video_processing=")
	builder.WriteString(fmt.Sprintf("%v", q.VideoProcessing))
	builder.WriteString(", chat_processing=")
	builder.WriteString(fmt.Sprintf("%v", q.ChatProcessing))
	builder.WriteString(", processing=")
	builder.WriteString(fmt.Sprintf("%v", q.Processing))
	builder.WriteString(", task_vod_create_folder=")
	builder.WriteString(fmt.Sprintf("%v", q.TaskVodCreateFolder))
	builder.WriteString(", task_vod_download_thumbnail=")
	builder.WriteString(fmt.Sprintf("%v", q.TaskVodDownloadThumbnail))
	builder.WriteString(", task_vod_save_info=")
	builder.WriteString(fmt.Sprintf("%v", q.TaskVodSaveInfo))
	builder.WriteString(", task_video_download=")
	builder.WriteString(fmt.Sprintf("%v", q.TaskVideoDownload))
	builder.WriteString(", task_video_convert=")
	builder.WriteString(fmt.Sprintf("%v", q.TaskVideoConvert))
	builder.WriteString(", task_video_move=")
	builder.WriteString(fmt.Sprintf("%v", q.TaskVideoMove))
	builder.WriteString(", task_chat_download=")
	builder.WriteString(fmt.Sprintf("%v", q.TaskChatDownload))
	builder.WriteString(", task_chat_render=")
	builder.WriteString(fmt.Sprintf("%v", q.TaskChatRender))
	builder.WriteString(", task_chat_move=")
	builder.WriteString(fmt.Sprintf("%v", q.TaskChatMove))
	builder.WriteString(", updated_at=")
	builder.WriteString(q.UpdatedAt.Format(time.ANSIC))
	builder.WriteString(", created_at=")
	builder.WriteString(q.CreatedAt.Format(time.ANSIC))
	builder.WriteByte(')')
	return builder.String()
}

// Queues is a parsable slice of Queue.
type Queues []*Queue

func (q Queues) config(cfg config) {
	for _i := range q {
		q[_i].config = cfg
	}
}
