// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"math"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/predicate"
	"github.com/zibbp/ganymede/ent/queue"
	"github.com/zibbp/ganymede/ent/vod"
)

// QueueQuery is the builder for querying Queue entities.
type QueueQuery struct {
	config
	limit      *int
	offset     *int
	unique     *bool
	order      []OrderFunc
	fields     []string
	predicates []predicate.Queue
	// eager-loading edges.
	withVod   *VodQuery
	withFKs   bool
	modifiers []func(s *sql.Selector)
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Where adds a new predicate for the QueueQuery builder.
func (qq *QueueQuery) Where(ps ...predicate.Queue) *QueueQuery {
	qq.predicates = append(qq.predicates, ps...)
	return qq
}

// Limit adds a limit step to the query.
func (qq *QueueQuery) Limit(limit int) *QueueQuery {
	qq.limit = &limit
	return qq
}

// Offset adds an offset step to the query.
func (qq *QueueQuery) Offset(offset int) *QueueQuery {
	qq.offset = &offset
	return qq
}

// Unique configures the query builder to filter duplicate records on query.
// By default, unique is set to true, and can be disabled using this method.
func (qq *QueueQuery) Unique(unique bool) *QueueQuery {
	qq.unique = &unique
	return qq
}

// Order adds an order step to the query.
func (qq *QueueQuery) Order(o ...OrderFunc) *QueueQuery {
	qq.order = append(qq.order, o...)
	return qq
}

// QueryVod chains the current query on the "vod" edge.
func (qq *QueueQuery) QueryVod() *VodQuery {
	query := &VodQuery{config: qq.config}
	query.path = func(ctx context.Context) (fromU *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		selector := qq.sqlQuery(ctx)
		if err := selector.Err(); err != nil {
			return nil, err
		}
		step := sqlgraph.NewStep(
			sqlgraph.From(queue.Table, queue.FieldID, selector),
			sqlgraph.To(vod.Table, vod.FieldID),
			sqlgraph.Edge(sqlgraph.O2O, true, queue.VodTable, queue.VodColumn),
		)
		fromU = sqlgraph.SetNeighbors(qq.driver.Dialect(), step)
		return fromU, nil
	}
	return query
}

// First returns the first Queue entity from the query.
// Returns a *NotFoundError when no Queue was found.
func (qq *QueueQuery) First(ctx context.Context) (*Queue, error) {
	nodes, err := qq.Limit(1).All(ctx)
	if err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nil, &NotFoundError{queue.Label}
	}
	return nodes[0], nil
}

// FirstX is like First, but panics if an error occurs.
func (qq *QueueQuery) FirstX(ctx context.Context) *Queue {
	node, err := qq.First(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return node
}

// FirstID returns the first Queue ID from the query.
// Returns a *NotFoundError when no Queue ID was found.
func (qq *QueueQuery) FirstID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = qq.Limit(1).IDs(ctx); err != nil {
		return
	}
	if len(ids) == 0 {
		err = &NotFoundError{queue.Label}
		return
	}
	return ids[0], nil
}

// FirstIDX is like FirstID, but panics if an error occurs.
func (qq *QueueQuery) FirstIDX(ctx context.Context) uuid.UUID {
	id, err := qq.FirstID(ctx)
	if err != nil && !IsNotFound(err) {
		panic(err)
	}
	return id
}

// Only returns a single Queue entity found by the query, ensuring it only returns one.
// Returns a *NotSingularError when more than one Queue entity is found.
// Returns a *NotFoundError when no Queue entities are found.
func (qq *QueueQuery) Only(ctx context.Context) (*Queue, error) {
	nodes, err := qq.Limit(2).All(ctx)
	if err != nil {
		return nil, err
	}
	switch len(nodes) {
	case 1:
		return nodes[0], nil
	case 0:
		return nil, &NotFoundError{queue.Label}
	default:
		return nil, &NotSingularError{queue.Label}
	}
}

// OnlyX is like Only, but panics if an error occurs.
func (qq *QueueQuery) OnlyX(ctx context.Context) *Queue {
	node, err := qq.Only(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// OnlyID is like Only, but returns the only Queue ID in the query.
// Returns a *NotSingularError when more than one Queue ID is found.
// Returns a *NotFoundError when no entities are found.
func (qq *QueueQuery) OnlyID(ctx context.Context) (id uuid.UUID, err error) {
	var ids []uuid.UUID
	if ids, err = qq.Limit(2).IDs(ctx); err != nil {
		return
	}
	switch len(ids) {
	case 1:
		id = ids[0]
	case 0:
		err = &NotFoundError{queue.Label}
	default:
		err = &NotSingularError{queue.Label}
	}
	return
}

// OnlyIDX is like OnlyID, but panics if an error occurs.
func (qq *QueueQuery) OnlyIDX(ctx context.Context) uuid.UUID {
	id, err := qq.OnlyID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// All executes the query and returns a list of Queues.
func (qq *QueueQuery) All(ctx context.Context) ([]*Queue, error) {
	if err := qq.prepareQuery(ctx); err != nil {
		return nil, err
	}
	return qq.sqlAll(ctx)
}

// AllX is like All, but panics if an error occurs.
func (qq *QueueQuery) AllX(ctx context.Context) []*Queue {
	nodes, err := qq.All(ctx)
	if err != nil {
		panic(err)
	}
	return nodes
}

// IDs executes the query and returns a list of Queue IDs.
func (qq *QueueQuery) IDs(ctx context.Context) ([]uuid.UUID, error) {
	var ids []uuid.UUID
	if err := qq.Select(queue.FieldID).Scan(ctx, &ids); err != nil {
		return nil, err
	}
	return ids, nil
}

// IDsX is like IDs, but panics if an error occurs.
func (qq *QueueQuery) IDsX(ctx context.Context) []uuid.UUID {
	ids, err := qq.IDs(ctx)
	if err != nil {
		panic(err)
	}
	return ids
}

// Count returns the count of the given query.
func (qq *QueueQuery) Count(ctx context.Context) (int, error) {
	if err := qq.prepareQuery(ctx); err != nil {
		return 0, err
	}
	return qq.sqlCount(ctx)
}

// CountX is like Count, but panics if an error occurs.
func (qq *QueueQuery) CountX(ctx context.Context) int {
	count, err := qq.Count(ctx)
	if err != nil {
		panic(err)
	}
	return count
}

// Exist returns true if the query has elements in the graph.
func (qq *QueueQuery) Exist(ctx context.Context) (bool, error) {
	if err := qq.prepareQuery(ctx); err != nil {
		return false, err
	}
	return qq.sqlExist(ctx)
}

// ExistX is like Exist, but panics if an error occurs.
func (qq *QueueQuery) ExistX(ctx context.Context) bool {
	exist, err := qq.Exist(ctx)
	if err != nil {
		panic(err)
	}
	return exist
}

// Clone returns a duplicate of the QueueQuery builder, including all associated steps. It can be
// used to prepare common query builders and use them differently after the clone is made.
func (qq *QueueQuery) Clone() *QueueQuery {
	if qq == nil {
		return nil
	}
	return &QueueQuery{
		config:     qq.config,
		limit:      qq.limit,
		offset:     qq.offset,
		order:      append([]OrderFunc{}, qq.order...),
		predicates: append([]predicate.Queue{}, qq.predicates...),
		withVod:    qq.withVod.Clone(),
		// clone intermediate query.
		sql:    qq.sql.Clone(),
		path:   qq.path,
		unique: qq.unique,
	}
}

// WithVod tells the query-builder to eager-load the nodes that are connected to
// the "vod" edge. The optional arguments are used to configure the query builder of the edge.
func (qq *QueueQuery) WithVod(opts ...func(*VodQuery)) *QueueQuery {
	query := &VodQuery{config: qq.config}
	for _, opt := range opts {
		opt(query)
	}
	qq.withVod = query
	return qq
}

// GroupBy is used to group vertices by one or more fields/columns.
// It is often used with aggregate functions, like: count, max, mean, min, sum.
//
// Example:
//
//	var v []struct {
//		LiveArchive bool `json:"live_archive,omitempty"`
//		Count int `json:"count,omitempty"`
//	}
//
//	client.Queue.Query().
//		GroupBy(queue.FieldLiveArchive).
//		Aggregate(ent.Count()).
//		Scan(ctx, &v)
//
func (qq *QueueQuery) GroupBy(field string, fields ...string) *QueueGroupBy {
	group := &QueueGroupBy{config: qq.config}
	group.fields = append([]string{field}, fields...)
	group.path = func(ctx context.Context) (prev *sql.Selector, err error) {
		if err := qq.prepareQuery(ctx); err != nil {
			return nil, err
		}
		return qq.sqlQuery(ctx), nil
	}
	return group
}

// Select allows the selection one or more fields/columns for the given query,
// instead of selecting all fields in the entity.
//
// Example:
//
//	var v []struct {
//		LiveArchive bool `json:"live_archive,omitempty"`
//	}
//
//	client.Queue.Query().
//		Select(queue.FieldLiveArchive).
//		Scan(ctx, &v)
//
func (qq *QueueQuery) Select(fields ...string) *QueueSelect {
	qq.fields = append(qq.fields, fields...)
	return &QueueSelect{QueueQuery: qq}
}

func (qq *QueueQuery) prepareQuery(ctx context.Context) error {
	for _, f := range qq.fields {
		if !queue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
		}
	}
	if qq.path != nil {
		prev, err := qq.path(ctx)
		if err != nil {
			return err
		}
		qq.sql = prev
	}
	return nil
}

func (qq *QueueQuery) sqlAll(ctx context.Context) ([]*Queue, error) {
	var (
		nodes       = []*Queue{}
		withFKs     = qq.withFKs
		_spec       = qq.querySpec()
		loadedTypes = [1]bool{
			qq.withVod != nil,
		}
	)
	if qq.withVod != nil {
		withFKs = true
	}
	if withFKs {
		_spec.Node.Columns = append(_spec.Node.Columns, queue.ForeignKeys...)
	}
	_spec.ScanValues = func(columns []string) ([]interface{}, error) {
		node := &Queue{config: qq.config}
		nodes = append(nodes, node)
		return node.scanValues(columns)
	}
	_spec.Assign = func(columns []string, values []interface{}) error {
		if len(nodes) == 0 {
			return fmt.Errorf("ent: Assign called without calling ScanValues")
		}
		node := nodes[len(nodes)-1]
		node.Edges.loadedTypes = loadedTypes
		return node.assignValues(columns, values)
	}
	if len(qq.modifiers) > 0 {
		_spec.Modifiers = qq.modifiers
	}
	if err := sqlgraph.QueryNodes(ctx, qq.driver, _spec); err != nil {
		return nil, err
	}
	if len(nodes) == 0 {
		return nodes, nil
	}

	if query := qq.withVod; query != nil {
		ids := make([]uuid.UUID, 0, len(nodes))
		nodeids := make(map[uuid.UUID][]*Queue)
		for i := range nodes {
			if nodes[i].vod_queue == nil {
				continue
			}
			fk := *nodes[i].vod_queue
			if _, ok := nodeids[fk]; !ok {
				ids = append(ids, fk)
			}
			nodeids[fk] = append(nodeids[fk], nodes[i])
		}
		query.Where(vod.IDIn(ids...))
		neighbors, err := query.All(ctx)
		if err != nil {
			return nil, err
		}
		for _, n := range neighbors {
			nodes, ok := nodeids[n.ID]
			if !ok {
				return nil, fmt.Errorf(`unexpected foreign-key "vod_queue" returned %v`, n.ID)
			}
			for i := range nodes {
				nodes[i].Edges.Vod = n
			}
		}
	}

	return nodes, nil
}

func (qq *QueueQuery) sqlCount(ctx context.Context) (int, error) {
	_spec := qq.querySpec()
	if len(qq.modifiers) > 0 {
		_spec.Modifiers = qq.modifiers
	}
	_spec.Node.Columns = qq.fields
	if len(qq.fields) > 0 {
		_spec.Unique = qq.unique != nil && *qq.unique
	}
	return sqlgraph.CountNodes(ctx, qq.driver, _spec)
}

func (qq *QueueQuery) sqlExist(ctx context.Context) (bool, error) {
	n, err := qq.sqlCount(ctx)
	if err != nil {
		return false, fmt.Errorf("ent: check existence: %w", err)
	}
	return n > 0, nil
}

func (qq *QueueQuery) querySpec() *sqlgraph.QuerySpec {
	_spec := &sqlgraph.QuerySpec{
		Node: &sqlgraph.NodeSpec{
			Table:   queue.Table,
			Columns: queue.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: queue.FieldID,
			},
		},
		From:   qq.sql,
		Unique: true,
	}
	if unique := qq.unique; unique != nil {
		_spec.Unique = *unique
	}
	if fields := qq.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, queue.FieldID)
		for i := range fields {
			if fields[i] != queue.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, fields[i])
			}
		}
	}
	if ps := qq.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if limit := qq.limit; limit != nil {
		_spec.Limit = *limit
	}
	if offset := qq.offset; offset != nil {
		_spec.Offset = *offset
	}
	if ps := qq.order; len(ps) > 0 {
		_spec.Order = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	return _spec
}

func (qq *QueueQuery) sqlQuery(ctx context.Context) *sql.Selector {
	builder := sql.Dialect(qq.driver.Dialect())
	t1 := builder.Table(queue.Table)
	columns := qq.fields
	if len(columns) == 0 {
		columns = queue.Columns
	}
	selector := builder.Select(t1.Columns(columns...)...).From(t1)
	if qq.sql != nil {
		selector = qq.sql
		selector.Select(selector.Columns(columns...)...)
	}
	if qq.unique != nil && *qq.unique {
		selector.Distinct()
	}
	for _, m := range qq.modifiers {
		m(selector)
	}
	for _, p := range qq.predicates {
		p(selector)
	}
	for _, p := range qq.order {
		p(selector)
	}
	if offset := qq.offset; offset != nil {
		// limit is mandatory for offset clause. We start
		// with default value, and override it below if needed.
		selector.Offset(*offset).Limit(math.MaxInt32)
	}
	if limit := qq.limit; limit != nil {
		selector.Limit(*limit)
	}
	return selector
}

// Modify adds a query modifier for attaching custom logic to queries.
func (qq *QueueQuery) Modify(modifiers ...func(s *sql.Selector)) *QueueSelect {
	qq.modifiers = append(qq.modifiers, modifiers...)
	return qq.Select()
}

// QueueGroupBy is the group-by builder for Queue entities.
type QueueGroupBy struct {
	config
	fields []string
	fns    []AggregateFunc
	// intermediate query (i.e. traversal path).
	sql  *sql.Selector
	path func(context.Context) (*sql.Selector, error)
}

// Aggregate adds the given aggregation functions to the group-by query.
func (qgb *QueueGroupBy) Aggregate(fns ...AggregateFunc) *QueueGroupBy {
	qgb.fns = append(qgb.fns, fns...)
	return qgb
}

// Scan applies the group-by query and scans the result into the given value.
func (qgb *QueueGroupBy) Scan(ctx context.Context, v interface{}) error {
	query, err := qgb.path(ctx)
	if err != nil {
		return err
	}
	qgb.sql = query
	return qgb.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (qgb *QueueGroupBy) ScanX(ctx context.Context, v interface{}) {
	if err := qgb.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from group-by.
// It is only allowed when executing a group-by query with one field.
func (qgb *QueueGroupBy) Strings(ctx context.Context) ([]string, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QueueGroupBy.Strings is not achievable when grouping more than 1 field")
	}
	var v []string
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (qgb *QueueGroupBy) StringsX(ctx context.Context) []string {
	v, err := qgb.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (qgb *QueueGroupBy) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = qgb.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{queue.Label}
	default:
		err = fmt.Errorf("ent: QueueGroupBy.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (qgb *QueueGroupBy) StringX(ctx context.Context) string {
	v, err := qgb.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from group-by.
// It is only allowed when executing a group-by query with one field.
func (qgb *QueueGroupBy) Ints(ctx context.Context) ([]int, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QueueGroupBy.Ints is not achievable when grouping more than 1 field")
	}
	var v []int
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (qgb *QueueGroupBy) IntsX(ctx context.Context) []int {
	v, err := qgb.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (qgb *QueueGroupBy) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = qgb.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{queue.Label}
	default:
		err = fmt.Errorf("ent: QueueGroupBy.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (qgb *QueueGroupBy) IntX(ctx context.Context) int {
	v, err := qgb.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from group-by.
// It is only allowed when executing a group-by query with one field.
func (qgb *QueueGroupBy) Float64s(ctx context.Context) ([]float64, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QueueGroupBy.Float64s is not achievable when grouping more than 1 field")
	}
	var v []float64
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (qgb *QueueGroupBy) Float64sX(ctx context.Context) []float64 {
	v, err := qgb.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (qgb *QueueGroupBy) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = qgb.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{queue.Label}
	default:
		err = fmt.Errorf("ent: QueueGroupBy.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (qgb *QueueGroupBy) Float64X(ctx context.Context) float64 {
	v, err := qgb.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from group-by.
// It is only allowed when executing a group-by query with one field.
func (qgb *QueueGroupBy) Bools(ctx context.Context) ([]bool, error) {
	if len(qgb.fields) > 1 {
		return nil, errors.New("ent: QueueGroupBy.Bools is not achievable when grouping more than 1 field")
	}
	var v []bool
	if err := qgb.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (qgb *QueueGroupBy) BoolsX(ctx context.Context) []bool {
	v, err := qgb.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a group-by query.
// It is only allowed when executing a group-by query with one field.
func (qgb *QueueGroupBy) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = qgb.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{queue.Label}
	default:
		err = fmt.Errorf("ent: QueueGroupBy.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (qgb *QueueGroupBy) BoolX(ctx context.Context) bool {
	v, err := qgb.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qgb *QueueGroupBy) sqlScan(ctx context.Context, v interface{}) error {
	for _, f := range qgb.fields {
		if !queue.ValidColumn(f) {
			return &ValidationError{Name: f, err: fmt.Errorf("invalid field %q for group-by", f)}
		}
	}
	selector := qgb.sqlQuery()
	if err := selector.Err(); err != nil {
		return err
	}
	rows := &sql.Rows{}
	query, args := selector.Query()
	if err := qgb.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

func (qgb *QueueGroupBy) sqlQuery() *sql.Selector {
	selector := qgb.sql.Select()
	aggregation := make([]string, 0, len(qgb.fns))
	for _, fn := range qgb.fns {
		aggregation = append(aggregation, fn(selector))
	}
	// If no columns were selected in a custom aggregation function, the default
	// selection is the fields used for "group-by", and the aggregation functions.
	if len(selector.SelectedColumns()) == 0 {
		columns := make([]string, 0, len(qgb.fields)+len(qgb.fns))
		for _, f := range qgb.fields {
			columns = append(columns, selector.C(f))
		}
		columns = append(columns, aggregation...)
		selector.Select(columns...)
	}
	return selector.GroupBy(selector.Columns(qgb.fields...)...)
}

// QueueSelect is the builder for selecting fields of Queue entities.
type QueueSelect struct {
	*QueueQuery
	// intermediate query (i.e. traversal path).
	sql *sql.Selector
}

// Scan applies the selector query and scans the result into the given value.
func (qs *QueueSelect) Scan(ctx context.Context, v interface{}) error {
	if err := qs.prepareQuery(ctx); err != nil {
		return err
	}
	qs.sql = qs.QueueQuery.sqlQuery(ctx)
	return qs.sqlScan(ctx, v)
}

// ScanX is like Scan, but panics if an error occurs.
func (qs *QueueSelect) ScanX(ctx context.Context, v interface{}) {
	if err := qs.Scan(ctx, v); err != nil {
		panic(err)
	}
}

// Strings returns list of strings from a selector. It is only allowed when selecting one field.
func (qs *QueueSelect) Strings(ctx context.Context) ([]string, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QueueSelect.Strings is not achievable when selecting more than 1 field")
	}
	var v []string
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// StringsX is like Strings, but panics if an error occurs.
func (qs *QueueSelect) StringsX(ctx context.Context) []string {
	v, err := qs.Strings(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// String returns a single string from a selector. It is only allowed when selecting one field.
func (qs *QueueSelect) String(ctx context.Context) (_ string, err error) {
	var v []string
	if v, err = qs.Strings(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{queue.Label}
	default:
		err = fmt.Errorf("ent: QueueSelect.Strings returned %d results when one was expected", len(v))
	}
	return
}

// StringX is like String, but panics if an error occurs.
func (qs *QueueSelect) StringX(ctx context.Context) string {
	v, err := qs.String(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Ints returns list of ints from a selector. It is only allowed when selecting one field.
func (qs *QueueSelect) Ints(ctx context.Context) ([]int, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QueueSelect.Ints is not achievable when selecting more than 1 field")
	}
	var v []int
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// IntsX is like Ints, but panics if an error occurs.
func (qs *QueueSelect) IntsX(ctx context.Context) []int {
	v, err := qs.Ints(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Int returns a single int from a selector. It is only allowed when selecting one field.
func (qs *QueueSelect) Int(ctx context.Context) (_ int, err error) {
	var v []int
	if v, err = qs.Ints(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{queue.Label}
	default:
		err = fmt.Errorf("ent: QueueSelect.Ints returned %d results when one was expected", len(v))
	}
	return
}

// IntX is like Int, but panics if an error occurs.
func (qs *QueueSelect) IntX(ctx context.Context) int {
	v, err := qs.Int(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64s returns list of float64s from a selector. It is only allowed when selecting one field.
func (qs *QueueSelect) Float64s(ctx context.Context) ([]float64, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QueueSelect.Float64s is not achievable when selecting more than 1 field")
	}
	var v []float64
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// Float64sX is like Float64s, but panics if an error occurs.
func (qs *QueueSelect) Float64sX(ctx context.Context) []float64 {
	v, err := qs.Float64s(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Float64 returns a single float64 from a selector. It is only allowed when selecting one field.
func (qs *QueueSelect) Float64(ctx context.Context) (_ float64, err error) {
	var v []float64
	if v, err = qs.Float64s(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{queue.Label}
	default:
		err = fmt.Errorf("ent: QueueSelect.Float64s returned %d results when one was expected", len(v))
	}
	return
}

// Float64X is like Float64, but panics if an error occurs.
func (qs *QueueSelect) Float64X(ctx context.Context) float64 {
	v, err := qs.Float64(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bools returns list of bools from a selector. It is only allowed when selecting one field.
func (qs *QueueSelect) Bools(ctx context.Context) ([]bool, error) {
	if len(qs.fields) > 1 {
		return nil, errors.New("ent: QueueSelect.Bools is not achievable when selecting more than 1 field")
	}
	var v []bool
	if err := qs.Scan(ctx, &v); err != nil {
		return nil, err
	}
	return v, nil
}

// BoolsX is like Bools, but panics if an error occurs.
func (qs *QueueSelect) BoolsX(ctx context.Context) []bool {
	v, err := qs.Bools(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Bool returns a single bool from a selector. It is only allowed when selecting one field.
func (qs *QueueSelect) Bool(ctx context.Context) (_ bool, err error) {
	var v []bool
	if v, err = qs.Bools(ctx); err != nil {
		return
	}
	switch len(v) {
	case 1:
		return v[0], nil
	case 0:
		err = &NotFoundError{queue.Label}
	default:
		err = fmt.Errorf("ent: QueueSelect.Bools returned %d results when one was expected", len(v))
	}
	return
}

// BoolX is like Bool, but panics if an error occurs.
func (qs *QueueSelect) BoolX(ctx context.Context) bool {
	v, err := qs.Bool(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

func (qs *QueueSelect) sqlScan(ctx context.Context, v interface{}) error {
	rows := &sql.Rows{}
	query, args := qs.sql.Query()
	if err := qs.driver.Query(ctx, query, args, rows); err != nil {
		return err
	}
	defer rows.Close()
	return sql.ScanSlice(rows, v)
}

// Modify adds a query modifier for attaching custom logic to queries.
func (qs *QueueSelect) Modify(modifiers ...func(s *sql.Selector)) *QueueSelect {
	qs.modifiers = append(qs.modifiers, modifiers...)
	return qs
}
