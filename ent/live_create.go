// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/channel"
	"github.com/zibbp/ganymede/ent/live"
)

// LiveCreate is the builder for creating a Live entity.
type LiveCreate struct {
	config
	mutation *LiveMutation
	hooks    []Hook
	conflict []sql.ConflictOption
}

// SetIsLive sets the "is_live" field.
func (lc *LiveCreate) SetIsLive(b bool) *LiveCreate {
	lc.mutation.SetIsLive(b)
	return lc
}

// SetNillableIsLive sets the "is_live" field if the given value is not nil.
func (lc *LiveCreate) SetNillableIsLive(b *bool) *LiveCreate {
	if b != nil {
		lc.SetIsLive(*b)
	}
	return lc
}

// SetArchiveChat sets the "archive_chat" field.
func (lc *LiveCreate) SetArchiveChat(b bool) *LiveCreate {
	lc.mutation.SetArchiveChat(b)
	return lc
}

// SetNillableArchiveChat sets the "archive_chat" field if the given value is not nil.
func (lc *LiveCreate) SetNillableArchiveChat(b *bool) *LiveCreate {
	if b != nil {
		lc.SetArchiveChat(*b)
	}
	return lc
}

// SetResolution sets the "resolution" field.
func (lc *LiveCreate) SetResolution(s string) *LiveCreate {
	lc.mutation.SetResolution(s)
	return lc
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (lc *LiveCreate) SetNillableResolution(s *string) *LiveCreate {
	if s != nil {
		lc.SetResolution(*s)
	}
	return lc
}

// SetLastLive sets the "last_live" field.
func (lc *LiveCreate) SetLastLive(t time.Time) *LiveCreate {
	lc.mutation.SetLastLive(t)
	return lc
}

// SetNillableLastLive sets the "last_live" field if the given value is not nil.
func (lc *LiveCreate) SetNillableLastLive(t *time.Time) *LiveCreate {
	if t != nil {
		lc.SetLastLive(*t)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LiveCreate) SetUpdatedAt(t time.Time) *LiveCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LiveCreate) SetNillableUpdatedAt(t *time.Time) *LiveCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LiveCreate) SetCreatedAt(t time.Time) *LiveCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LiveCreate) SetNillableCreatedAt(t *time.Time) *LiveCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LiveCreate) SetID(u uuid.UUID) *LiveCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LiveCreate) SetNillableID(u *uuid.UUID) *LiveCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (lc *LiveCreate) SetChannelID(id uuid.UUID) *LiveCreate {
	lc.mutation.SetChannelID(id)
	return lc
}

// SetChannel sets the "channel" edge to the Channel entity.
func (lc *LiveCreate) SetChannel(c *Channel) *LiveCreate {
	return lc.SetChannelID(c.ID)
}

// Mutation returns the LiveMutation object of the builder.
func (lc *LiveCreate) Mutation() *LiveMutation {
	return lc.mutation
}

// Save creates the Live in the database.
func (lc *LiveCreate) Save(ctx context.Context) (*Live, error) {
	var (
		err  error
		node *Live
	)
	lc.defaults()
	if len(lc.hooks) == 0 {
		if err = lc.check(); err != nil {
			return nil, err
		}
		node, err = lc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*LiveMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = lc.check(); err != nil {
				return nil, err
			}
			lc.mutation = mutation
			if node, err = lc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(lc.hooks) - 1; i >= 0; i-- {
			if lc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = lc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, lc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LiveCreate) SaveX(ctx context.Context) *Live {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LiveCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LiveCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LiveCreate) defaults() {
	if _, ok := lc.mutation.IsLive(); !ok {
		v := live.DefaultIsLive
		lc.mutation.SetIsLive(v)
	}
	if _, ok := lc.mutation.ArchiveChat(); !ok {
		v := live.DefaultArchiveChat
		lc.mutation.SetArchiveChat(v)
	}
	if _, ok := lc.mutation.Resolution(); !ok {
		v := live.DefaultResolution
		lc.mutation.SetResolution(v)
	}
	if _, ok := lc.mutation.LastLive(); !ok {
		v := live.DefaultLastLive()
		lc.mutation.SetLastLive(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := live.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := live.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := live.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LiveCreate) check() error {
	if _, ok := lc.mutation.IsLive(); !ok {
		return &ValidationError{Name: "is_live", err: errors.New(`ent: missing required field "Live.is_live"`)}
	}
	if _, ok := lc.mutation.ArchiveChat(); !ok {
		return &ValidationError{Name: "archive_chat", err: errors.New(`ent: missing required field "Live.archive_chat"`)}
	}
	if _, ok := lc.mutation.LastLive(); !ok {
		return &ValidationError{Name: "last_live", err: errors.New(`ent: missing required field "Live.last_live"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Live.updated_at"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Live.created_at"`)}
	}
	if _, ok := lc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "Live.channel"`)}
	}
	return nil
}

func (lc *LiveCreate) sqlSave(ctx context.Context) (*Live, error) {
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	return _node, nil
}

func (lc *LiveCreate) createSpec() (*Live, *sqlgraph.CreateSpec) {
	var (
		_node = &Live{config: lc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: live.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUUID,
				Column: live.FieldID,
			},
		}
	)
	_spec.OnConflict = lc.conflict
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.IsLive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: live.FieldIsLive,
		})
		_node.IsLive = value
	}
	if value, ok := lc.mutation.ArchiveChat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: live.FieldArchiveChat,
		})
		_node.ArchiveChat = value
	}
	if value, ok := lc.mutation.Resolution(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: live.FieldResolution,
		})
		_node.Resolution = value
	}
	if value, ok := lc.mutation.LastLive(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: live.FieldLastLive,
		})
		_node.LastLive = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: live.FieldUpdatedAt,
		})
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeTime,
			Value:  value,
			Column: live.FieldCreatedAt,
		})
		_node.CreatedAt = value
	}
	if nodes := lc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   live.ChannelTable,
			Columns: []string{live.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.channel_live = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Live.Create().
//		SetIsLive(v).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LiveUpsert) {
//			SetIsLive(v+v).
//		}).
//		Exec(ctx)
//
func (lc *LiveCreate) OnConflict(opts ...sql.ConflictOption) *LiveUpsertOne {
	lc.conflict = opts
	return &LiveUpsertOne{
		create: lc,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Live.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lc *LiveCreate) OnConflictColumns(columns ...string) *LiveUpsertOne {
	lc.conflict = append(lc.conflict, sql.ConflictColumns(columns...))
	return &LiveUpsertOne{
		create: lc,
	}
}

type (
	// LiveUpsertOne is the builder for "upsert"-ing
	//  one Live node.
	LiveUpsertOne struct {
		create *LiveCreate
	}

	// LiveUpsert is the "OnConflict" setter.
	LiveUpsert struct {
		*sql.UpdateSet
	}
)

// SetIsLive sets the "is_live" field.
func (u *LiveUpsert) SetIsLive(v bool) *LiveUpsert {
	u.Set(live.FieldIsLive, v)
	return u
}

// UpdateIsLive sets the "is_live" field to the value that was provided on create.
func (u *LiveUpsert) UpdateIsLive() *LiveUpsert {
	u.SetExcluded(live.FieldIsLive)
	return u
}

// SetArchiveChat sets the "archive_chat" field.
func (u *LiveUpsert) SetArchiveChat(v bool) *LiveUpsert {
	u.Set(live.FieldArchiveChat, v)
	return u
}

// UpdateArchiveChat sets the "archive_chat" field to the value that was provided on create.
func (u *LiveUpsert) UpdateArchiveChat() *LiveUpsert {
	u.SetExcluded(live.FieldArchiveChat)
	return u
}

// SetResolution sets the "resolution" field.
func (u *LiveUpsert) SetResolution(v string) *LiveUpsert {
	u.Set(live.FieldResolution, v)
	return u
}

// UpdateResolution sets the "resolution" field to the value that was provided on create.
func (u *LiveUpsert) UpdateResolution() *LiveUpsert {
	u.SetExcluded(live.FieldResolution)
	return u
}

// ClearResolution clears the value of the "resolution" field.
func (u *LiveUpsert) ClearResolution() *LiveUpsert {
	u.SetNull(live.FieldResolution)
	return u
}

// SetLastLive sets the "last_live" field.
func (u *LiveUpsert) SetLastLive(v time.Time) *LiveUpsert {
	u.Set(live.FieldLastLive, v)
	return u
}

// UpdateLastLive sets the "last_live" field to the value that was provided on create.
func (u *LiveUpsert) UpdateLastLive() *LiveUpsert {
	u.SetExcluded(live.FieldLastLive)
	return u
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LiveUpsert) SetUpdatedAt(v time.Time) *LiveUpsert {
	u.Set(live.FieldUpdatedAt, v)
	return u
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LiveUpsert) UpdateUpdatedAt() *LiveUpsert {
	u.SetExcluded(live.FieldUpdatedAt)
	return u
}

// SetCreatedAt sets the "created_at" field.
func (u *LiveUpsert) SetCreatedAt(v time.Time) *LiveUpsert {
	u.Set(live.FieldCreatedAt, v)
	return u
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LiveUpsert) UpdateCreatedAt() *LiveUpsert {
	u.SetExcluded(live.FieldCreatedAt)
	return u
}

// UpdateNewValues updates the mutable fields using the new values that were set on create except the ID field.
// Using this option is equivalent to using:
//
//	client.Live.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(live.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LiveUpsertOne) UpdateNewValues() *LiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		if _, exists := u.create.mutation.ID(); exists {
			s.SetIgnore(live.FieldID)
		}
		if _, exists := u.create.mutation.CreatedAt(); exists {
			s.SetIgnore(live.FieldCreatedAt)
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//  client.Live.Create().
//      OnConflict(sql.ResolveWithIgnore()).
//      Exec(ctx)
//
func (u *LiveUpsertOne) Ignore() *LiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LiveUpsertOne) DoNothing() *LiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LiveCreate.OnConflict
// documentation for more info.
func (u *LiveUpsertOne) Update(set func(*LiveUpsert)) *LiveUpsertOne {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LiveUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsLive sets the "is_live" field.
func (u *LiveUpsertOne) SetIsLive(v bool) *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.SetIsLive(v)
	})
}

// UpdateIsLive sets the "is_live" field to the value that was provided on create.
func (u *LiveUpsertOne) UpdateIsLive() *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateIsLive()
	})
}

// SetArchiveChat sets the "archive_chat" field.
func (u *LiveUpsertOne) SetArchiveChat(v bool) *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.SetArchiveChat(v)
	})
}

// UpdateArchiveChat sets the "archive_chat" field to the value that was provided on create.
func (u *LiveUpsertOne) UpdateArchiveChat() *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateArchiveChat()
	})
}

// SetResolution sets the "resolution" field.
func (u *LiveUpsertOne) SetResolution(v string) *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.SetResolution(v)
	})
}

// UpdateResolution sets the "resolution" field to the value that was provided on create.
func (u *LiveUpsertOne) UpdateResolution() *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateResolution()
	})
}

// ClearResolution clears the value of the "resolution" field.
func (u *LiveUpsertOne) ClearResolution() *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.ClearResolution()
	})
}

// SetLastLive sets the "last_live" field.
func (u *LiveUpsertOne) SetLastLive(v time.Time) *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.SetLastLive(v)
	})
}

// UpdateLastLive sets the "last_live" field to the value that was provided on create.
func (u *LiveUpsertOne) UpdateLastLive() *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateLastLive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LiveUpsertOne) SetUpdatedAt(v time.Time) *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LiveUpsertOne) UpdateUpdatedAt() *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *LiveUpsertOne) SetCreatedAt(v time.Time) *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LiveUpsertOne) UpdateCreatedAt() *LiveUpsertOne {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *LiveUpsertOne) Exec(ctx context.Context) error {
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LiveCreate.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LiveUpsertOne) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}

// Exec executes the UPSERT query and returns the inserted/updated ID.
func (u *LiveUpsertOne) ID(ctx context.Context) (id uuid.UUID, err error) {
	if u.create.driver.Dialect() == dialect.MySQL {
		// In case of "ON CONFLICT", there is no way to get back non-numeric ID
		// fields from the database since MySQL does not support the RETURNING clause.
		return id, errors.New("ent: LiveUpsertOne.ID is not supported by MySQL driver. Use LiveUpsertOne.Exec instead")
	}
	node, err := u.create.Save(ctx)
	if err != nil {
		return id, err
	}
	return node.ID, nil
}

// IDX is like ID, but panics if an error occurs.
func (u *LiveUpsertOne) IDX(ctx context.Context) uuid.UUID {
	id, err := u.ID(ctx)
	if err != nil {
		panic(err)
	}
	return id
}

// LiveCreateBulk is the builder for creating many Live entities in bulk.
type LiveCreateBulk struct {
	config
	builders []*LiveCreate
	conflict []sql.ConflictOption
}

// Save creates the Live entities in the database.
func (lcb *LiveCreateBulk) Save(ctx context.Context) ([]*Live, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Live, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LiveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					spec.OnConflict = lcb.conflict
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LiveCreateBulk) SaveX(ctx context.Context) []*Live {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LiveCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LiveCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}

// OnConflict allows configuring the `ON CONFLICT` / `ON DUPLICATE KEY` clause
// of the `INSERT` statement. For example:
//
//	client.Live.CreateBulk(builders...).
//		OnConflict(
//			// Update the row with the new values
//			// the was proposed for insertion.
//			sql.ResolveWithNewValues(),
//		).
//		// Override some of the fields with custom
//		// update values.
//		Update(func(u *ent.LiveUpsert) {
//			SetIsLive(v+v).
//		}).
//		Exec(ctx)
//
func (lcb *LiveCreateBulk) OnConflict(opts ...sql.ConflictOption) *LiveUpsertBulk {
	lcb.conflict = opts
	return &LiveUpsertBulk{
		create: lcb,
	}
}

// OnConflictColumns calls `OnConflict` and configures the columns
// as conflict target. Using this option is equivalent to using:
//
//	client.Live.Create().
//		OnConflict(sql.ConflictColumns(columns...)).
//		Exec(ctx)
//
func (lcb *LiveCreateBulk) OnConflictColumns(columns ...string) *LiveUpsertBulk {
	lcb.conflict = append(lcb.conflict, sql.ConflictColumns(columns...))
	return &LiveUpsertBulk{
		create: lcb,
	}
}

// LiveUpsertBulk is the builder for "upsert"-ing
// a bulk of Live nodes.
type LiveUpsertBulk struct {
	create *LiveCreateBulk
}

// UpdateNewValues updates the mutable fields using the new values that
// were set on create. Using this option is equivalent to using:
//
//	client.Live.Create().
//		OnConflict(
//			sql.ResolveWithNewValues(),
//			sql.ResolveWith(func(u *sql.UpdateSet) {
//				u.SetIgnore(live.FieldID)
//			}),
//		).
//		Exec(ctx)
//
func (u *LiveUpsertBulk) UpdateNewValues() *LiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithNewValues())
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(s *sql.UpdateSet) {
		for _, b := range u.create.builders {
			if _, exists := b.mutation.ID(); exists {
				s.SetIgnore(live.FieldID)
				return
			}
			if _, exists := b.mutation.CreatedAt(); exists {
				s.SetIgnore(live.FieldCreatedAt)
			}
		}
	}))
	return u
}

// Ignore sets each column to itself in case of conflict.
// Using this option is equivalent to using:
//
//	client.Live.Create().
//		OnConflict(sql.ResolveWithIgnore()).
//		Exec(ctx)
//
func (u *LiveUpsertBulk) Ignore() *LiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWithIgnore())
	return u
}

// DoNothing configures the conflict_action to `DO NOTHING`.
// Supported only by SQLite and PostgreSQL.
func (u *LiveUpsertBulk) DoNothing() *LiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.DoNothing())
	return u
}

// Update allows overriding fields `UPDATE` values. See the LiveCreateBulk.OnConflict
// documentation for more info.
func (u *LiveUpsertBulk) Update(set func(*LiveUpsert)) *LiveUpsertBulk {
	u.create.conflict = append(u.create.conflict, sql.ResolveWith(func(update *sql.UpdateSet) {
		set(&LiveUpsert{UpdateSet: update})
	}))
	return u
}

// SetIsLive sets the "is_live" field.
func (u *LiveUpsertBulk) SetIsLive(v bool) *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.SetIsLive(v)
	})
}

// UpdateIsLive sets the "is_live" field to the value that was provided on create.
func (u *LiveUpsertBulk) UpdateIsLive() *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateIsLive()
	})
}

// SetArchiveChat sets the "archive_chat" field.
func (u *LiveUpsertBulk) SetArchiveChat(v bool) *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.SetArchiveChat(v)
	})
}

// UpdateArchiveChat sets the "archive_chat" field to the value that was provided on create.
func (u *LiveUpsertBulk) UpdateArchiveChat() *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateArchiveChat()
	})
}

// SetResolution sets the "resolution" field.
func (u *LiveUpsertBulk) SetResolution(v string) *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.SetResolution(v)
	})
}

// UpdateResolution sets the "resolution" field to the value that was provided on create.
func (u *LiveUpsertBulk) UpdateResolution() *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateResolution()
	})
}

// ClearResolution clears the value of the "resolution" field.
func (u *LiveUpsertBulk) ClearResolution() *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.ClearResolution()
	})
}

// SetLastLive sets the "last_live" field.
func (u *LiveUpsertBulk) SetLastLive(v time.Time) *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.SetLastLive(v)
	})
}

// UpdateLastLive sets the "last_live" field to the value that was provided on create.
func (u *LiveUpsertBulk) UpdateLastLive() *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateLastLive()
	})
}

// SetUpdatedAt sets the "updated_at" field.
func (u *LiveUpsertBulk) SetUpdatedAt(v time.Time) *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.SetUpdatedAt(v)
	})
}

// UpdateUpdatedAt sets the "updated_at" field to the value that was provided on create.
func (u *LiveUpsertBulk) UpdateUpdatedAt() *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateUpdatedAt()
	})
}

// SetCreatedAt sets the "created_at" field.
func (u *LiveUpsertBulk) SetCreatedAt(v time.Time) *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.SetCreatedAt(v)
	})
}

// UpdateCreatedAt sets the "created_at" field to the value that was provided on create.
func (u *LiveUpsertBulk) UpdateCreatedAt() *LiveUpsertBulk {
	return u.Update(func(s *LiveUpsert) {
		s.UpdateCreatedAt()
	})
}

// Exec executes the query.
func (u *LiveUpsertBulk) Exec(ctx context.Context) error {
	for i, b := range u.create.builders {
		if len(b.conflict) != 0 {
			return fmt.Errorf("ent: OnConflict was set for builder %d. Set it on the LiveCreateBulk instead", i)
		}
	}
	if len(u.create.conflict) == 0 {
		return errors.New("ent: missing options for LiveCreateBulk.OnConflict")
	}
	return u.create.Exec(ctx)
}

// ExecX is like Exec, but panics if an error occurs.
func (u *LiveUpsertBulk) ExecX(ctx context.Context) {
	if err := u.create.Exec(ctx); err != nil {
		panic(err)
	}
}
