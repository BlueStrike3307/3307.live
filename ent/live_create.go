// Code generated by ent, DO NOT EDIT.

package ent

import (
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
	"github.com/google/uuid"
	"github.com/zibbp/ganymede/ent/channel"
	"github.com/zibbp/ganymede/ent/live"
)

// LiveCreate is the builder for creating a Live entity.
type LiveCreate struct {
	config
	mutation *LiveMutation
	hooks    []Hook
}

// SetWatchLive sets the "watch_live" field.
func (lc *LiveCreate) SetWatchLive(b bool) *LiveCreate {
	lc.mutation.SetWatchLive(b)
	return lc
}

// SetNillableWatchLive sets the "watch_live" field if the given value is not nil.
func (lc *LiveCreate) SetNillableWatchLive(b *bool) *LiveCreate {
	if b != nil {
		lc.SetWatchLive(*b)
	}
	return lc
}

// SetWatchVod sets the "watch_vod" field.
func (lc *LiveCreate) SetWatchVod(b bool) *LiveCreate {
	lc.mutation.SetWatchVod(b)
	return lc
}

// SetNillableWatchVod sets the "watch_vod" field if the given value is not nil.
func (lc *LiveCreate) SetNillableWatchVod(b *bool) *LiveCreate {
	if b != nil {
		lc.SetWatchVod(*b)
	}
	return lc
}

// SetDownloadArchives sets the "download_archives" field.
func (lc *LiveCreate) SetDownloadArchives(b bool) *LiveCreate {
	lc.mutation.SetDownloadArchives(b)
	return lc
}

// SetNillableDownloadArchives sets the "download_archives" field if the given value is not nil.
func (lc *LiveCreate) SetNillableDownloadArchives(b *bool) *LiveCreate {
	if b != nil {
		lc.SetDownloadArchives(*b)
	}
	return lc
}

// SetDownloadHighlights sets the "download_highlights" field.
func (lc *LiveCreate) SetDownloadHighlights(b bool) *LiveCreate {
	lc.mutation.SetDownloadHighlights(b)
	return lc
}

// SetNillableDownloadHighlights sets the "download_highlights" field if the given value is not nil.
func (lc *LiveCreate) SetNillableDownloadHighlights(b *bool) *LiveCreate {
	if b != nil {
		lc.SetDownloadHighlights(*b)
	}
	return lc
}

// SetDownloadUploads sets the "download_uploads" field.
func (lc *LiveCreate) SetDownloadUploads(b bool) *LiveCreate {
	lc.mutation.SetDownloadUploads(b)
	return lc
}

// SetNillableDownloadUploads sets the "download_uploads" field if the given value is not nil.
func (lc *LiveCreate) SetNillableDownloadUploads(b *bool) *LiveCreate {
	if b != nil {
		lc.SetDownloadUploads(*b)
	}
	return lc
}

// SetDownloadSubOnly sets the "download_sub_only" field.
func (lc *LiveCreate) SetDownloadSubOnly(b bool) *LiveCreate {
	lc.mutation.SetDownloadSubOnly(b)
	return lc
}

// SetNillableDownloadSubOnly sets the "download_sub_only" field if the given value is not nil.
func (lc *LiveCreate) SetNillableDownloadSubOnly(b *bool) *LiveCreate {
	if b != nil {
		lc.SetDownloadSubOnly(*b)
	}
	return lc
}

// SetIsLive sets the "is_live" field.
func (lc *LiveCreate) SetIsLive(b bool) *LiveCreate {
	lc.mutation.SetIsLive(b)
	return lc
}

// SetNillableIsLive sets the "is_live" field if the given value is not nil.
func (lc *LiveCreate) SetNillableIsLive(b *bool) *LiveCreate {
	if b != nil {
		lc.SetIsLive(*b)
	}
	return lc
}

// SetArchiveChat sets the "archive_chat" field.
func (lc *LiveCreate) SetArchiveChat(b bool) *LiveCreate {
	lc.mutation.SetArchiveChat(b)
	return lc
}

// SetNillableArchiveChat sets the "archive_chat" field if the given value is not nil.
func (lc *LiveCreate) SetNillableArchiveChat(b *bool) *LiveCreate {
	if b != nil {
		lc.SetArchiveChat(*b)
	}
	return lc
}

// SetResolution sets the "resolution" field.
func (lc *LiveCreate) SetResolution(s string) *LiveCreate {
	lc.mutation.SetResolution(s)
	return lc
}

// SetNillableResolution sets the "resolution" field if the given value is not nil.
func (lc *LiveCreate) SetNillableResolution(s *string) *LiveCreate {
	if s != nil {
		lc.SetResolution(*s)
	}
	return lc
}

// SetLastLive sets the "last_live" field.
func (lc *LiveCreate) SetLastLive(t time.Time) *LiveCreate {
	lc.mutation.SetLastLive(t)
	return lc
}

// SetNillableLastLive sets the "last_live" field if the given value is not nil.
func (lc *LiveCreate) SetNillableLastLive(t *time.Time) *LiveCreate {
	if t != nil {
		lc.SetLastLive(*t)
	}
	return lc
}

// SetRenderChat sets the "render_chat" field.
func (lc *LiveCreate) SetRenderChat(b bool) *LiveCreate {
	lc.mutation.SetRenderChat(b)
	return lc
}

// SetNillableRenderChat sets the "render_chat" field if the given value is not nil.
func (lc *LiveCreate) SetNillableRenderChat(b *bool) *LiveCreate {
	if b != nil {
		lc.SetRenderChat(*b)
	}
	return lc
}

// SetUpdatedAt sets the "updated_at" field.
func (lc *LiveCreate) SetUpdatedAt(t time.Time) *LiveCreate {
	lc.mutation.SetUpdatedAt(t)
	return lc
}

// SetNillableUpdatedAt sets the "updated_at" field if the given value is not nil.
func (lc *LiveCreate) SetNillableUpdatedAt(t *time.Time) *LiveCreate {
	if t != nil {
		lc.SetUpdatedAt(*t)
	}
	return lc
}

// SetCreatedAt sets the "created_at" field.
func (lc *LiveCreate) SetCreatedAt(t time.Time) *LiveCreate {
	lc.mutation.SetCreatedAt(t)
	return lc
}

// SetNillableCreatedAt sets the "created_at" field if the given value is not nil.
func (lc *LiveCreate) SetNillableCreatedAt(t *time.Time) *LiveCreate {
	if t != nil {
		lc.SetCreatedAt(*t)
	}
	return lc
}

// SetID sets the "id" field.
func (lc *LiveCreate) SetID(u uuid.UUID) *LiveCreate {
	lc.mutation.SetID(u)
	return lc
}

// SetNillableID sets the "id" field if the given value is not nil.
func (lc *LiveCreate) SetNillableID(u *uuid.UUID) *LiveCreate {
	if u != nil {
		lc.SetID(*u)
	}
	return lc
}

// SetChannelID sets the "channel" edge to the Channel entity by ID.
func (lc *LiveCreate) SetChannelID(id uuid.UUID) *LiveCreate {
	lc.mutation.SetChannelID(id)
	return lc
}

// SetChannel sets the "channel" edge to the Channel entity.
func (lc *LiveCreate) SetChannel(c *Channel) *LiveCreate {
	return lc.SetChannelID(c.ID)
}

// Mutation returns the LiveMutation object of the builder.
func (lc *LiveCreate) Mutation() *LiveMutation {
	return lc.mutation
}

// Save creates the Live in the database.
func (lc *LiveCreate) Save(ctx context.Context) (*Live, error) {
	lc.defaults()
	return withHooks[*Live, LiveMutation](ctx, lc.sqlSave, lc.mutation, lc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (lc *LiveCreate) SaveX(ctx context.Context) *Live {
	v, err := lc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lc *LiveCreate) Exec(ctx context.Context) error {
	_, err := lc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lc *LiveCreate) ExecX(ctx context.Context) {
	if err := lc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (lc *LiveCreate) defaults() {
	if _, ok := lc.mutation.WatchLive(); !ok {
		v := live.DefaultWatchLive
		lc.mutation.SetWatchLive(v)
	}
	if _, ok := lc.mutation.WatchVod(); !ok {
		v := live.DefaultWatchVod
		lc.mutation.SetWatchVod(v)
	}
	if _, ok := lc.mutation.DownloadArchives(); !ok {
		v := live.DefaultDownloadArchives
		lc.mutation.SetDownloadArchives(v)
	}
	if _, ok := lc.mutation.DownloadHighlights(); !ok {
		v := live.DefaultDownloadHighlights
		lc.mutation.SetDownloadHighlights(v)
	}
	if _, ok := lc.mutation.DownloadUploads(); !ok {
		v := live.DefaultDownloadUploads
		lc.mutation.SetDownloadUploads(v)
	}
	if _, ok := lc.mutation.DownloadSubOnly(); !ok {
		v := live.DefaultDownloadSubOnly
		lc.mutation.SetDownloadSubOnly(v)
	}
	if _, ok := lc.mutation.IsLive(); !ok {
		v := live.DefaultIsLive
		lc.mutation.SetIsLive(v)
	}
	if _, ok := lc.mutation.ArchiveChat(); !ok {
		v := live.DefaultArchiveChat
		lc.mutation.SetArchiveChat(v)
	}
	if _, ok := lc.mutation.Resolution(); !ok {
		v := live.DefaultResolution
		lc.mutation.SetResolution(v)
	}
	if _, ok := lc.mutation.LastLive(); !ok {
		v := live.DefaultLastLive()
		lc.mutation.SetLastLive(v)
	}
	if _, ok := lc.mutation.RenderChat(); !ok {
		v := live.DefaultRenderChat
		lc.mutation.SetRenderChat(v)
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		v := live.DefaultUpdatedAt()
		lc.mutation.SetUpdatedAt(v)
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		v := live.DefaultCreatedAt()
		lc.mutation.SetCreatedAt(v)
	}
	if _, ok := lc.mutation.ID(); !ok {
		v := live.DefaultID()
		lc.mutation.SetID(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (lc *LiveCreate) check() error {
	if _, ok := lc.mutation.WatchLive(); !ok {
		return &ValidationError{Name: "watch_live", err: errors.New(`ent: missing required field "Live.watch_live"`)}
	}
	if _, ok := lc.mutation.WatchVod(); !ok {
		return &ValidationError{Name: "watch_vod", err: errors.New(`ent: missing required field "Live.watch_vod"`)}
	}
	if _, ok := lc.mutation.DownloadArchives(); !ok {
		return &ValidationError{Name: "download_archives", err: errors.New(`ent: missing required field "Live.download_archives"`)}
	}
	if _, ok := lc.mutation.DownloadHighlights(); !ok {
		return &ValidationError{Name: "download_highlights", err: errors.New(`ent: missing required field "Live.download_highlights"`)}
	}
	if _, ok := lc.mutation.DownloadUploads(); !ok {
		return &ValidationError{Name: "download_uploads", err: errors.New(`ent: missing required field "Live.download_uploads"`)}
	}
	if _, ok := lc.mutation.DownloadSubOnly(); !ok {
		return &ValidationError{Name: "download_sub_only", err: errors.New(`ent: missing required field "Live.download_sub_only"`)}
	}
	if _, ok := lc.mutation.IsLive(); !ok {
		return &ValidationError{Name: "is_live", err: errors.New(`ent: missing required field "Live.is_live"`)}
	}
	if _, ok := lc.mutation.ArchiveChat(); !ok {
		return &ValidationError{Name: "archive_chat", err: errors.New(`ent: missing required field "Live.archive_chat"`)}
	}
	if _, ok := lc.mutation.LastLive(); !ok {
		return &ValidationError{Name: "last_live", err: errors.New(`ent: missing required field "Live.last_live"`)}
	}
	if _, ok := lc.mutation.RenderChat(); !ok {
		return &ValidationError{Name: "render_chat", err: errors.New(`ent: missing required field "Live.render_chat"`)}
	}
	if _, ok := lc.mutation.UpdatedAt(); !ok {
		return &ValidationError{Name: "updated_at", err: errors.New(`ent: missing required field "Live.updated_at"`)}
	}
	if _, ok := lc.mutation.CreatedAt(); !ok {
		return &ValidationError{Name: "created_at", err: errors.New(`ent: missing required field "Live.created_at"`)}
	}
	if _, ok := lc.mutation.ChannelID(); !ok {
		return &ValidationError{Name: "channel", err: errors.New(`ent: missing required edge "Live.channel"`)}
	}
	return nil
}

func (lc *LiveCreate) sqlSave(ctx context.Context) (*Live, error) {
	if err := lc.check(); err != nil {
		return nil, err
	}
	_node, _spec := lc.createSpec()
	if err := sqlgraph.CreateNode(ctx, lc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	if _spec.ID.Value != nil {
		if id, ok := _spec.ID.Value.(*uuid.UUID); ok {
			_node.ID = *id
		} else if err := _node.ID.Scan(_spec.ID.Value); err != nil {
			return nil, err
		}
	}
	lc.mutation.id = &_node.ID
	lc.mutation.done = true
	return _node, nil
}

func (lc *LiveCreate) createSpec() (*Live, *sqlgraph.CreateSpec) {
	var (
		_node = &Live{config: lc.config}
		_spec = sqlgraph.NewCreateSpec(live.Table, sqlgraph.NewFieldSpec(live.FieldID, field.TypeUUID))
	)
	if id, ok := lc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = &id
	}
	if value, ok := lc.mutation.WatchLive(); ok {
		_spec.SetField(live.FieldWatchLive, field.TypeBool, value)
		_node.WatchLive = value
	}
	if value, ok := lc.mutation.WatchVod(); ok {
		_spec.SetField(live.FieldWatchVod, field.TypeBool, value)
		_node.WatchVod = value
	}
	if value, ok := lc.mutation.DownloadArchives(); ok {
		_spec.SetField(live.FieldDownloadArchives, field.TypeBool, value)
		_node.DownloadArchives = value
	}
	if value, ok := lc.mutation.DownloadHighlights(); ok {
		_spec.SetField(live.FieldDownloadHighlights, field.TypeBool, value)
		_node.DownloadHighlights = value
	}
	if value, ok := lc.mutation.DownloadUploads(); ok {
		_spec.SetField(live.FieldDownloadUploads, field.TypeBool, value)
		_node.DownloadUploads = value
	}
	if value, ok := lc.mutation.DownloadSubOnly(); ok {
		_spec.SetField(live.FieldDownloadSubOnly, field.TypeBool, value)
		_node.DownloadSubOnly = value
	}
	if value, ok := lc.mutation.IsLive(); ok {
		_spec.SetField(live.FieldIsLive, field.TypeBool, value)
		_node.IsLive = value
	}
	if value, ok := lc.mutation.ArchiveChat(); ok {
		_spec.SetField(live.FieldArchiveChat, field.TypeBool, value)
		_node.ArchiveChat = value
	}
	if value, ok := lc.mutation.Resolution(); ok {
		_spec.SetField(live.FieldResolution, field.TypeString, value)
		_node.Resolution = value
	}
	if value, ok := lc.mutation.LastLive(); ok {
		_spec.SetField(live.FieldLastLive, field.TypeTime, value)
		_node.LastLive = value
	}
	if value, ok := lc.mutation.RenderChat(); ok {
		_spec.SetField(live.FieldRenderChat, field.TypeBool, value)
		_node.RenderChat = value
	}
	if value, ok := lc.mutation.UpdatedAt(); ok {
		_spec.SetField(live.FieldUpdatedAt, field.TypeTime, value)
		_node.UpdatedAt = value
	}
	if value, ok := lc.mutation.CreatedAt(); ok {
		_spec.SetField(live.FieldCreatedAt, field.TypeTime, value)
		_node.CreatedAt = value
	}
	if nodes := lc.mutation.ChannelIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   live.ChannelTable,
			Columns: []string{live.ChannelColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: &sqlgraph.FieldSpec{
					Type:   field.TypeUUID,
					Column: channel.FieldID,
				},
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.channel_live = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// LiveCreateBulk is the builder for creating many Live entities in bulk.
type LiveCreateBulk struct {
	config
	builders []*LiveCreate
}

// Save creates the Live entities in the database.
func (lcb *LiveCreateBulk) Save(ctx context.Context) ([]*Live, error) {
	specs := make([]*sqlgraph.CreateSpec, len(lcb.builders))
	nodes := make([]*Live, len(lcb.builders))
	mutators := make([]Mutator, len(lcb.builders))
	for i := range lcb.builders {
		func(i int, root context.Context) {
			builder := lcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*LiveMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, lcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, lcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, lcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (lcb *LiveCreateBulk) SaveX(ctx context.Context) []*Live {
	v, err := lcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (lcb *LiveCreateBulk) Exec(ctx context.Context) error {
	_, err := lcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (lcb *LiveCreateBulk) ExecX(ctx context.Context) {
	if err := lcb.Exec(ctx); err != nil {
		panic(err)
	}
}
